
avProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a26c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800a40c  0800a40c  0001a40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a480  0800a480  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800a480  0800a480  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a480  0800a480  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a480  0800a480  0001a480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a484  0800a484  0001a484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0000141c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001494  20001494  00020078  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c322  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d0b  00000000  00000000  0003c3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e0  00000000  00000000  000400d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001688  00000000  00000000  000419b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e91  00000000  00000000  00043038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000261da  00000000  00000000  00067ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8142  00000000  00000000  0008e0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001661e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006830  00000000  00000000  00166238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a3f4 	.word	0x0800a3f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800a3f4 	.word	0x0800a3f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <Access_Init>:
/**
  * @brief	Access module initialization function
  * @return	None
  */
void Access_Init(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Access_InitDone_b = TRUE;
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <Access_Init+0x14>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	701a      	strb	r2, [r3, #0]
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000094 	.word	0x20000094

08000a84 <Access_MainFunction>:
/**
  * @brief	Access module main function (runs in task)
  * @return	None
  */
void Access_MainFunction(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Access_InitDone_b)
	{

	}
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <Brakes_Init>:
/**
  * @brief	Brakes module initialization function
  * @return	None
  */
void Brakes_Init(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Brakes_InitDone_b = TRUE;
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <Brakes_Init+0x14>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000095 	.word	0x20000095

08000aa8 <Brakes_MainFunction>:
/**
  * @brief	Brakes module main function (runs in task)
  * @return	None
  */
void Brakes_MainFunction(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Brakes_InitDone_b)
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <Brakes_MainFunction+0x18>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d102      	bne.n	8000aba <Brakes_MainFunction+0x12>
	{
		/* Read AN0 analog voltage (mV) */
		Rte_Read_AN0_Voltage_u16(&g_Brakes_AN0_Voltage_u16);
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <Brakes_MainFunction+0x1c>)
 8000ab6:	f008 ffeb 	bl	8009a90 <Rte_Read_AN0_Voltage_u16>
	}
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000095 	.word	0x20000095
 8000ac4:	20000096 	.word	0x20000096

08000ac8 <Engine_Init>:
/**
  * @brief	Engine module initialization function
  * @return	None
  */
void Engine_Init(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Engine_InitDone_b = TRUE;
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <Engine_Init+0x14>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000098 	.word	0x20000098

08000ae0 <Engine_MainFunction>:
/**
  * @brief	Engine module main function (runs in task)
  * @return	None
  */
void Engine_MainFunction(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Engine_InitDone_b)
	{

	}
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <LED_UpdatePulseDirection>:
/**
  * @brief  Updates the PWM pulse direction
  * @return None
  */
static void LED_UpdatePulseDirection(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
	/* Check is pulse value reached the maximum allowed value */
	if(g_LED_Pulse_u16 >= LED_FADE_MAX_PULSE_U16)
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <LED_UpdatePulseDirection+0x2c>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8000af8:	d302      	bcc.n	8000b00 <LED_UpdatePulseDirection+0x14>
	{
		/* Switch pulse direction to downward */
		g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_DOWN_U8;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <LED_UpdatePulseDirection+0x30>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
	}
	/* Check is pulse value reached the minimum allowed value */
	if(g_LED_Pulse_u16 <= LED_FADE_MIN_PULSE_U16)
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <LED_UpdatePulseDirection+0x2c>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b08:	d802      	bhi.n	8000b10 <LED_UpdatePulseDirection+0x24>
	{
		/* Switch pulse direction to upward */
		g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_UP_U8;
 8000b0a:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <LED_UpdatePulseDirection+0x30>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
	}
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	2000009c 	.word	0x2000009c
 8000b1c:	2000009e 	.word	0x2000009e

08000b20 <LED_UpdatePulseWidth>:
/**
  * @brief  Updates the PWM pulse step
  * @return None
  */
static void LED_UpdatePulseWidth(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	/* Check if pulse direction is upward */
	if(LED_PULSE_DIRECTION_UP_U8 == g_LED_Pulse_Direction_u8)
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <LED_UpdatePulseWidth+0x48>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d10c      	bne.n	8000b46 <LED_UpdatePulseWidth+0x26>
	{
		if(g_LED_Pulse_u16 <= LED_FADE_MAX_PULSE_U16)
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <LED_UpdatePulseWidth+0x4c>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8000b34:	d813      	bhi.n	8000b5e <LED_UpdatePulseWidth+0x3e>
		{
			/* Increment the pulse width */
			g_LED_Pulse_u16 = g_LED_Pulse_u16+LED_FADE_PULSE_STEP_U16;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <LED_UpdatePulseWidth+0x4c>)
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <LED_UpdatePulseWidth+0x4c>)
 8000b42:	801a      	strh	r2, [r3, #0]
 8000b44:	e00b      	b.n	8000b5e <LED_UpdatePulseWidth+0x3e>
		}
	}
	else
	{
		if(g_LED_Pulse_u16 >= LED_FADE_PULSE_STEP_U16)
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <LED_UpdatePulseWidth+0x4c>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000b4e:	d306      	bcc.n	8000b5e <LED_UpdatePulseWidth+0x3e>
		{
			/* Decrement the pulse width */
			g_LED_Pulse_u16 = g_LED_Pulse_u16-LED_FADE_PULSE_STEP_U16;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <LED_UpdatePulseWidth+0x4c>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <LED_UpdatePulseWidth+0x4c>)
 8000b5c:	801a      	strh	r2, [r3, #0]
		}
	}
	/* Update pulse direction */
	LED_UpdatePulseDirection();
 8000b5e:	f7ff ffc5 	bl	8000aec <LED_UpdatePulseDirection>
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000009e 	.word	0x2000009e
 8000b6c:	2000009c 	.word	0x2000009c

08000b70 <LED_Init>:
/**
  * @brief  Initializes the LED module
  * @return None
  */
void LED_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	/* Set servo initial position */
	Rte_Write_Servo_RawPulseWidth_u16(0u);
 8000b74:	2000      	movs	r0, #0
 8000b76:	f008 ff61 	bl	8009a3c <Rte_Cdd_Servo_RawMove>
	/* Read LED NvM block */
	Rte_Read_NvM_LED_Block(g_LED_NvMBlock_a);
 8000b7a:	4804      	ldr	r0, [pc, #16]	; (8000b8c <LED_Init+0x1c>)
 8000b7c:	f008 ff6b 	bl	8009a56 <Rte_Read_NvM_Block_0>
	/* Set initialization flag to done */
	g_LED_InitDone_b = TRUE;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <LED_Init+0x20>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000a0 	.word	0x200000a0
 8000b90:	20000099 	.word	0x20000099

08000b94 <LED_MainFunction>:
/**
  * @brief  LED Main function (runs in periodic task)
  * @return None
  */
void LED_MainFunction(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_LED_InitDone_b)
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <LED_MainFunction+0x2c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d10d      	bne.n	8000bbc <LED_MainFunction+0x28>
	{
		/* Read the blue button state */
		Rte_Read_Button_State(&g_LED_ButtonState_b);
 8000ba0:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <LED_MainFunction+0x30>)
 8000ba2:	f008 ff2b 	bl	80099fc <Rte_Read_PC13_Pin_State>
		/* Check if the button is released */
		if(TRUE == (boolean)g_LED_ButtonState_b)
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <LED_MainFunction+0x30>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d106      	bne.n	8000bbc <LED_MainFunction+0x28>
		{
			/* Update PWM pulse width */
			LED_UpdatePulseWidth();
 8000bae:	f7ff ffb7 	bl	8000b20 <LED_UpdatePulseWidth>
			/* Call the servo interface with the new pulse width */
			Rte_Write_Servo_RawPulseWidth_u16(g_LED_Pulse_u16);
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <LED_MainFunction+0x34>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f008 ff40 	bl	8009a3c <Rte_Cdd_Servo_RawMove>
		else
		{
			/* Stop fading */
		}
	}
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000099 	.word	0x20000099
 8000bc4:	2000009a 	.word	0x2000009a
 8000bc8:	2000009c 	.word	0x2000009c

08000bcc <Blinker_Init>:
/**
  * @brief	Blinker module initialization function
  * @return	None
  */
void Blinker_Init(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Blinker_InitDone_b = TRUE;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <Blinker_Init+0x14>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	200000c0 	.word	0x200000c0

08000be4 <Blinker_MainFunction>:
/**
  * @brief	Blinker module main function (runs in task)
  * @return	None
  */
void Blinker_MainFunction(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Blinker_InitDone_b)
	{

	}
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <FrontLights_Init>:
/**
  * @brief	FrontLights module initialization function
  * @return	None
  */
void FrontLights_Init(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_FrontLights_InitDone_b = TRUE;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <FrontLights_Init+0x14>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	701a      	strb	r2, [r3, #0]
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	200000c1 	.word	0x200000c1

08000c08 <FrontLights_MainFunction>:
/**
  * @brief	FrontLights module main function (runs in task)
  * @return	None
  */
void FrontLights_MainFunction(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_FrontLights_InitDone_b)
	{

	}
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <InteriorLights_Init>:
/**
  * @brief	InteriorLights module initialization function
  * @return	None
  */
void InteriorLights_Init(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_InteriorLights_InitDone_b = TRUE;
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <InteriorLights_Init+0x14>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	200000c2 	.word	0x200000c2

08000c2c <InteriorLights_MainFunction>:
/**
  * @brief	InteriorLights module main function (runs in task)
  * @return	None
  */
void InteriorLights_MainFunction(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_InteriorLights_InitDone_b)
	{

	}
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <RearLights_Init>:
/**
  * @brief	RearLights module initialization function
  * @return	None
  */
void RearLights_Init(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_RearLights_InitDone_b = TRUE;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <RearLights_Init+0x14>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	200000c3 	.word	0x200000c3

08000c50 <RearLights_MainFunction>:
/**
  * @brief	RearLights module main function (runs in task)
  * @return	None
  */
void RearLights_MainFunction(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_RearLights_InitDone_b)
	{

	}
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <Steering_Init>:
/**
  * @brief	Steering module initialization function
  * @return	None
  */
void Steering_Init(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Steering_InitDone_b = TRUE;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <Steering_Init+0x14>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	200000c4 	.word	0x200000c4

08000c74 <Steering_MainFunction>:
/**
  * @brief	Steering module main function (runs in task)
  * @return	None
  */
void Steering_MainFunction(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Steering_InitDone_b)
	{

	}
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <Cdd_Servo_Init>:
	0.0,
	20.0
};

void Cdd_Servo_Init(void)
{
 8000c80:	b5b0      	push	{r4, r5, r7, lr}
 8000c82:	b0b2      	sub	sp, #200	; 0xc8
 8000c84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
 8000cc0:	615a      	str	r2, [r3, #20]
 8000cc2:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32 PSC_Value = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32 ARR_Value = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    //DWT_Delay_Init();

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

    if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOA)
 8000cd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cd4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cd8:	d10c      	bne.n	8000cf4 <Cdd_Servo_Init+0x74>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	4b70      	ldr	r3, [pc, #448]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	4a6f      	ldr	r2, [pc, #444]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	6153      	str	r3, [r2, #20]
 8000ce6:	4b6d      	ldr	r3, [pc, #436]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	e046      	b.n	8000d82 <Cdd_Servo_Init+0x102>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOB)
 8000cf4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cf8:	4b69      	ldr	r3, [pc, #420]	; (8000ea0 <Cdd_Servo_Init+0x220>)
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d10c      	bne.n	8000d18 <Cdd_Servo_Init+0x98>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	4b67      	ldr	r3, [pc, #412]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	4a66      	ldr	r2, [pc, #408]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d08:	6153      	str	r3, [r2, #20]
 8000d0a:	4b64      	ldr	r3, [pc, #400]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d12:	623b      	str	r3, [r7, #32]
 8000d14:	6a3b      	ldr	r3, [r7, #32]
 8000d16:	e034      	b.n	8000d82 <Cdd_Servo_Init+0x102>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOC)
 8000d18:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d1c:	4b61      	ldr	r3, [pc, #388]	; (8000ea4 <Cdd_Servo_Init+0x224>)
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d10c      	bne.n	8000d3c <Cdd_Servo_Init+0xbc>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	4b5e      	ldr	r3, [pc, #376]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	4a5d      	ldr	r2, [pc, #372]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d2c:	6153      	str	r3, [r2, #20]
 8000d2e:	4b5b      	ldr	r3, [pc, #364]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d36:	61fb      	str	r3, [r7, #28]
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	e022      	b.n	8000d82 <Cdd_Servo_Init+0x102>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOD)
 8000d3c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d40:	4b59      	ldr	r3, [pc, #356]	; (8000ea8 <Cdd_Servo_Init+0x228>)
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d10c      	bne.n	8000d60 <Cdd_Servo_Init+0xe0>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d46:	4b55      	ldr	r3, [pc, #340]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	4a54      	ldr	r2, [pc, #336]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d50:	6153      	str	r3, [r2, #20]
 8000d52:	4b52      	ldr	r3, [pc, #328]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d5a:	61bb      	str	r3, [r7, #24]
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	e010      	b.n	8000d82 <Cdd_Servo_Init+0x102>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOE)
 8000d60:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d64:	4b51      	ldr	r3, [pc, #324]	; (8000eac <Cdd_Servo_Init+0x22c>)
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d10b      	bne.n	8000d82 <Cdd_Servo_Init+0x102>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6a:	4b4c      	ldr	r3, [pc, #304]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	4a4b      	ldr	r2, [pc, #300]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d74:	6153      	str	r3, [r2, #20]
 8000d76:	4b49      	ldr	r3, [pc, #292]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]
    }
	GPIO_InitStruct.Pin = c_SERVO_CfgParam_s.SERVO_PIN;
 8000d82:	2320      	movs	r3, #32
 8000d84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d94:	2301      	movs	r3, #1
 8000d96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	HAL_GPIO_Init(c_SERVO_CfgParam_s.SERVO_GPIO, &GPIO_InitStruct);
 8000d9a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d9e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000da2:	4619      	mov	r1, r3
 8000da4:	4610      	mov	r0, r2
 8000da6:	f001 f98f 	bl	80020c8 <HAL_GPIO_Init>

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32) (c_SERVO_CfgParam_s.TIM_CLK / 3276800.0);
 8000daa:	4b41      	ldr	r3, [pc, #260]	; (8000eb0 <Cdd_Servo_Init+0x230>)
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fbb1 	bl	8000514 <__aeabi_ui2d>
 8000db2:	f04f 0200 	mov.w	r2, #0
 8000db6:	4b3f      	ldr	r3, [pc, #252]	; (8000eb4 <Cdd_Servo_Init+0x234>)
 8000db8:	f7ff fd50 	bl	800085c <__aeabi_ddiv>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f7ff fe32 	bl	8000a2c <__aeabi_d2uiz>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	ARR_Value = (uint32) ((c_SERVO_CfgParam_s.TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <Cdd_Servo_Init+0x230>)
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fb9f 	bl	8000514 <__aeabi_ui2d>
 8000dd6:	4604      	mov	r4, r0
 8000dd8:	460d      	mov	r5, r1
 8000dda:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8000dde:	f7ff fb99 	bl	8000514 <__aeabi_ui2d>
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	4b34      	ldr	r3, [pc, #208]	; (8000eb8 <Cdd_Servo_Init+0x238>)
 8000de8:	f7ff fa58 	bl	800029c <__adddf3>
 8000dec:	4602      	mov	r2, r0
 8000dee:	460b      	mov	r3, r1
 8000df0:	4610      	mov	r0, r2
 8000df2:	4619      	mov	r1, r3
 8000df4:	f04f 0200 	mov.w	r2, #0
 8000df8:	4b30      	ldr	r3, [pc, #192]	; (8000ebc <Cdd_Servo_Init+0x23c>)
 8000dfa:	f7ff fc05 	bl	8000608 <__aeabi_dmul>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	4620      	mov	r0, r4
 8000e04:	4629      	mov	r1, r5
 8000e06:	f7ff fd29 	bl	800085c <__aeabi_ddiv>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	4610      	mov	r0, r2
 8000e10:	4619      	mov	r1, r3
 8000e12:	f04f 0200 	mov.w	r2, #0
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <Cdd_Servo_Init+0x238>)
 8000e18:	f7ff fa3e 	bl	8000298 <__aeabi_dsub>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4610      	mov	r0, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	f7ff fe02 	bl	8000a2c <__aeabi_d2uiz>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(c_SERVO_CfgParam_s.TIM_Instance == TIM1)
 8000e2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e32:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <Cdd_Servo_Init+0x240>)
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d10c      	bne.n	8000e52 <Cdd_Servo_Init+0x1d2>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a17      	ldr	r2, [pc, #92]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000e3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	e04b      	b.n	8000eea <Cdd_Servo_Init+0x26a>
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM2)
 8000e52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e5a:	d10c      	bne.n	8000e76 <Cdd_Servo_Init+0x1f6>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000e5e:	69db      	ldr	r3, [r3, #28]
 8000e60:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	61d3      	str	r3, [r2, #28]
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	e039      	b.n	8000eea <Cdd_Servo_Init+0x26a>
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM3)
 8000e76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <Cdd_Servo_Init+0x244>)
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d123      	bne.n	8000ec8 <Cdd_Servo_Init+0x248>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000e86:	f043 0302 	orr.w	r3, r3, #2
 8000e8a:	61d3      	str	r3, [r2, #28]
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <Cdd_Servo_Init+0x21c>)
 8000e8e:	69db      	ldr	r3, [r3, #28]
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	e027      	b.n	8000eea <Cdd_Servo_Init+0x26a>
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	48000400 	.word	0x48000400
 8000ea4:	48000800 	.word	0x48000800
 8000ea8:	48000c00 	.word	0x48000c00
 8000eac:	48001000 	.word	0x48001000
 8000eb0:	044aa200 	.word	0x044aa200
 8000eb4:	41490000 	.word	0x41490000
 8000eb8:	3ff00000 	.word	0x3ff00000
 8000ebc:	40490000 	.word	0x40490000
 8000ec0:	40012c00 	.word	0x40012c00
 8000ec4:	40000400 	.word	0x40000400
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM4)
 8000ec8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ecc:	4b4e      	ldr	r3, [pc, #312]	; (8001008 <Cdd_Servo_Init+0x388>)
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d10b      	bne.n	8000eea <Cdd_Servo_Init+0x26a>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8000ed2:	4b4e      	ldr	r3, [pc, #312]	; (800100c <Cdd_Servo_Init+0x38c>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	4a4d      	ldr	r2, [pc, #308]	; (800100c <Cdd_Servo_Init+0x38c>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	61d3      	str	r3, [r2, #28]
 8000ede:	4b4b      	ldr	r3, [pc, #300]	; (800100c <Cdd_Servo_Init+0x38c>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
	}

	htim.Instance = c_SERVO_CfgParam_s.TIM_Instance;
 8000eea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.Prescaler = PSC_Value;
 8000ef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
	htim.Init.Period = ARR_Value;
 8000efa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	63bb      	str	r3, [r7, #56]	; 0x38
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_TIM_Base_Init(&htim);
 8000f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f001 fd46 	bl	800299e <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8000f1a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8000f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f002 f931 	bl	800318c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8000f2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 fd8c 	bl	8002a4c <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8000f40:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000f44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 fe62 	bl	8003c14 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f50:	2360      	movs	r3, #96	; 0x60
 8000f52:	677b      	str	r3, [r7, #116]	; 0x74
	sConfigOC.Pulse = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	67bb      	str	r3, [r7, #120]	; 0x78
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	67fb      	str	r3, [r7, #124]	; 0x7c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, c_SERVO_CfgParam_s.PWM_TIM_CH);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000f68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 fff9 	bl	8002f64 <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info_s.Period_Min_u16 = (uint16) (ARR_Value * (c_SERVO_CfgParam_s.MinPulse/20.0));
 8000f72:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8000f76:	f7ff facd 	bl	8000514 <__aeabi_ui2d>
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	460d      	mov	r5, r1
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fae8 	bl	8000558 <__aeabi_f2d>
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	4b20      	ldr	r3, [pc, #128]	; (8001010 <Cdd_Servo_Init+0x390>)
 8000f8e:	f7ff fc65 	bl	800085c <__aeabi_ddiv>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4620      	mov	r0, r4
 8000f98:	4629      	mov	r1, r5
 8000f9a:	f7ff fb35 	bl	8000608 <__aeabi_dmul>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f7ff fd41 	bl	8000a2c <__aeabi_d2uiz>
 8000faa:	4603      	mov	r3, r0
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <Cdd_Servo_Init+0x394>)
 8000fb0:	801a      	strh	r2, [r3, #0]
	gs_SERVO_info_s.Period_Max_u16 = (uint16) (ARR_Value * (c_SERVO_CfgParam_s.MaxPulse/20.0));
 8000fb2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8000fb6:	f7ff faad 	bl	8000514 <__aeabi_ui2d>
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <Cdd_Servo_Init+0x398>)
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fac9 	bl	8000558 <__aeabi_f2d>
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <Cdd_Servo_Init+0x390>)
 8000fcc:	f7ff fc46 	bl	800085c <__aeabi_ddiv>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	4629      	mov	r1, r5
 8000fd8:	f7ff fb16 	bl	8000608 <__aeabi_dmul>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f7ff fd22 	bl	8000a2c <__aeabi_d2uiz>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <Cdd_Servo_Init+0x394>)
 8000fee:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, c_SERVO_CfgParam_s.PWM_TIM_CH);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f001 fd87 	bl	8002b0c <HAL_TIM_PWM_Start>
}
 8000ffe:	bf00      	nop
 8001000:	37c8      	adds	r7, #200	; 0xc8
 8001002:	46bd      	mov	sp, r7
 8001004:	bdb0      	pop	{r4, r5, r7, pc}
 8001006:	bf00      	nop
 8001008:	40000800 	.word	0x40000800
 800100c:	40021000 	.word	0x40021000
 8001010:	40340000 	.word	0x40340000
 8001014:	200000c8 	.word	0x200000c8
 8001018:	41a00000 	.word	0x41a00000

0800101c <Cdd_Servo_RawMove>:
	*(c_SERVO_CfgParam_s.TIM_CCRx) = l_Pulse_u16;
}

/* Moves A Specific Motor With A Raw Pulse Width Value */
void Cdd_Servo_RawMove(uint16 Pulse)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
	if(Pulse <= gs_SERVO_info_s.Period_Max_u16 && Pulse >= gs_SERVO_info_s.Period_Min_u16)
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <Cdd_Servo_RawMove+0x30>)
 8001028:	885b      	ldrh	r3, [r3, #2]
 800102a:	88fa      	ldrh	r2, [r7, #6]
 800102c:	429a      	cmp	r2, r3
 800102e:	d807      	bhi.n	8001040 <Cdd_Servo_RawMove+0x24>
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <Cdd_Servo_RawMove+0x30>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	88fa      	ldrh	r2, [r7, #6]
 8001036:	429a      	cmp	r2, r3
 8001038:	d302      	bcc.n	8001040 <Cdd_Servo_RawMove+0x24>
	{
		*(c_SERVO_CfgParam_s.TIM_CCRx) = Pulse;
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <Cdd_Servo_RawMove+0x34>)
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	6013      	str	r3, [r2, #0]
	}
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200000c8 	.word	0x200000c8
 8001050:	40000034 	.word	0x40000034

08001054 <Cdd_Servo_MainFunction>:
		Cdd_Servo_MoveTo(l_Angle_u8--);
	}
}

void Cdd_Servo_MainFunction(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b09a      	sub	sp, #104	; 0x68
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001092:	2300      	movs	r3, #0
 8001094:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e1e3      	b.n	800146c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d176      	bne.n	80011a4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d152      	bne.n	8001164 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f004 fcbb 	bl	8005a54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d13b      	bne.n	8001164 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 ff85 	bl	8001ffc <ADC_Disable>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	2b00      	cmp	r3, #0
 8001102:	d12f      	bne.n	8001164 <HAL_ADC_Init+0xe0>
 8001104:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001108:	2b00      	cmp	r3, #0
 800110a:	d12b      	bne.n	8001164 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001114:	f023 0302 	bic.w	r3, r3, #2
 8001118:	f043 0202 	orr.w	r2, r3, #2
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800112e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800113e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001140:	4b92      	ldr	r3, [pc, #584]	; (800138c <HAL_ADC_Init+0x308>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a92      	ldr	r2, [pc, #584]	; (8001390 <HAL_ADC_Init+0x30c>)
 8001146:	fba2 2303 	umull	r2, r3, r2, r3
 800114a:	0c9a      	lsrs	r2, r3, #18
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001156:	e002      	b.n	800115e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	3b01      	subs	r3, #1
 800115c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1f9      	bne.n	8001158 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d007      	beq.n	8001182 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800117c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001180:	d110      	bne.n	80011a4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f023 0312 	bic.w	r3, r3, #18
 800118a:	f043 0210 	orr.w	r2, r3, #16
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f043 0201 	orr.w	r2, r3, #1
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f003 0310 	and.w	r3, r3, #16
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f040 8150 	bne.w	8001452 <HAL_ADC_Init+0x3ce>
 80011b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f040 814b 	bne.w	8001452 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f040 8143 	bne.w	8001452 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011d4:	f043 0202 	orr.w	r2, r3, #2
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011e4:	d004      	beq.n	80011f0 <HAL_ADC_Init+0x16c>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a6a      	ldr	r2, [pc, #424]	; (8001394 <HAL_ADC_Init+0x310>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d101      	bne.n	80011f4 <HAL_ADC_Init+0x170>
 80011f0:	4b69      	ldr	r3, [pc, #420]	; (8001398 <HAL_ADC_Init+0x314>)
 80011f2:	e000      	b.n	80011f6 <HAL_ADC_Init+0x172>
 80011f4:	4b69      	ldr	r3, [pc, #420]	; (800139c <HAL_ADC_Init+0x318>)
 80011f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001200:	d102      	bne.n	8001208 <HAL_ADC_Init+0x184>
 8001202:	4b64      	ldr	r3, [pc, #400]	; (8001394 <HAL_ADC_Init+0x310>)
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	e01a      	b.n	800123e <HAL_ADC_Init+0x1ba>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a61      	ldr	r2, [pc, #388]	; (8001394 <HAL_ADC_Init+0x310>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d103      	bne.n	800121a <HAL_ADC_Init+0x196>
 8001212:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	e011      	b.n	800123e <HAL_ADC_Init+0x1ba>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a60      	ldr	r2, [pc, #384]	; (80013a0 <HAL_ADC_Init+0x31c>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d102      	bne.n	800122a <HAL_ADC_Init+0x1a6>
 8001224:	4b5f      	ldr	r3, [pc, #380]	; (80013a4 <HAL_ADC_Init+0x320>)
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	e009      	b.n	800123e <HAL_ADC_Init+0x1ba>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a5d      	ldr	r2, [pc, #372]	; (80013a4 <HAL_ADC_Init+0x320>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d102      	bne.n	800123a <HAL_ADC_Init+0x1b6>
 8001234:	4b5a      	ldr	r3, [pc, #360]	; (80013a0 <HAL_ADC_Init+0x31c>)
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	e001      	b.n	800123e <HAL_ADC_Init+0x1ba>
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b01      	cmp	r3, #1
 800124a:	d108      	bne.n	800125e <HAL_ADC_Init+0x1da>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b01      	cmp	r3, #1
 8001258:	d101      	bne.n	800125e <HAL_ADC_Init+0x1da>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <HAL_ADC_Init+0x1dc>
 800125e:	2300      	movs	r3, #0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d11c      	bne.n	800129e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001264:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001266:	2b00      	cmp	r3, #0
 8001268:	d010      	beq.n	800128c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	2b01      	cmp	r3, #1
 8001274:	d107      	bne.n	8001286 <HAL_ADC_Init+0x202>
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b01      	cmp	r3, #1
 8001280:	d101      	bne.n	8001286 <HAL_ADC_Init+0x202>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_ADC_Init+0x204>
 8001286:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001288:	2b00      	cmp	r3, #0
 800128a:	d108      	bne.n	800129e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800128c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	431a      	orrs	r2, r3
 800129a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800129c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7e5b      	ldrb	r3, [r3, #25]
 80012a2:	035b      	lsls	r3, r3, #13
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012a8:	2a01      	cmp	r2, #1
 80012aa:	d002      	beq.n	80012b2 <HAL_ADC_Init+0x22e>
 80012ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012b0:	e000      	b.n	80012b4 <HAL_ADC_Init+0x230>
 80012b2:	2200      	movs	r2, #0
 80012b4:	431a      	orrs	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012c4:	4313      	orrs	r3, r2
 80012c6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d11b      	bne.n	800130a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7e5b      	ldrb	r3, [r3, #25]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d109      	bne.n	80012ee <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012de:	3b01      	subs	r3, #1
 80012e0:	045a      	lsls	r2, r3, #17
 80012e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012e4:	4313      	orrs	r3, r2
 80012e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ea:	663b      	str	r3, [r7, #96]	; 0x60
 80012ec:	e00d      	b.n	800130a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80012f6:	f043 0220 	orr.w	r2, r3, #32
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f043 0201 	orr.w	r2, r3, #1
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130e:	2b01      	cmp	r3, #1
 8001310:	d054      	beq.n	80013bc <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a22      	ldr	r2, [pc, #136]	; (80013a0 <HAL_ADC_Init+0x31c>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d004      	beq.n	8001326 <HAL_ADC_Init+0x2a2>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a20      	ldr	r2, [pc, #128]	; (80013a4 <HAL_ADC_Init+0x320>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d140      	bne.n	80013a8 <HAL_ADC_Init+0x324>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800132e:	d02a      	beq.n	8001386 <HAL_ADC_Init+0x302>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001338:	d022      	beq.n	8001380 <HAL_ADC_Init+0x2fc>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001342:	d01a      	beq.n	800137a <HAL_ADC_Init+0x2f6>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001348:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 800134c:	d012      	beq.n	8001374 <HAL_ADC_Init+0x2f0>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001352:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001356:	d00a      	beq.n	800136e <HAL_ADC_Init+0x2ea>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001360:	d002      	beq.n	8001368 <HAL_ADC_Init+0x2e4>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001366:	e023      	b.n	80013b0 <HAL_ADC_Init+0x32c>
 8001368:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800136c:	e020      	b.n	80013b0 <HAL_ADC_Init+0x32c>
 800136e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001372:	e01d      	b.n	80013b0 <HAL_ADC_Init+0x32c>
 8001374:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001378:	e01a      	b.n	80013b0 <HAL_ADC_Init+0x32c>
 800137a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800137e:	e017      	b.n	80013b0 <HAL_ADC_Init+0x32c>
 8001380:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001384:	e014      	b.n	80013b0 <HAL_ADC_Init+0x32c>
 8001386:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800138a:	e011      	b.n	80013b0 <HAL_ADC_Init+0x32c>
 800138c:	20000000 	.word	0x20000000
 8001390:	431bde83 	.word	0x431bde83
 8001394:	50000100 	.word	0x50000100
 8001398:	50000300 	.word	0x50000300
 800139c:	50000700 	.word	0x50000700
 80013a0:	50000400 	.word	0x50000400
 80013a4:	50000500 	.word	0x50000500
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80013b4:	4313      	orrs	r3, r2
 80013b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013b8:	4313      	orrs	r3, r2
 80013ba:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d114      	bne.n	80013f4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013d8:	f023 0302 	bic.w	r3, r3, #2
 80013dc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7e1b      	ldrb	r3, [r3, #24]
 80013e2:	039a      	lsls	r2, r3, #14
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4313      	orrs	r3, r2
 80013ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013f0:	4313      	orrs	r3, r2
 80013f2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <HAL_ADC_Init+0x3f0>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001404:	430b      	orrs	r3, r1
 8001406:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d10c      	bne.n	800142a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f023 010f 	bic.w	r1, r3, #15
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	1e5a      	subs	r2, r3, #1
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	631a      	str	r2, [r3, #48]	; 0x30
 8001428:	e007      	b.n	800143a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 020f 	bic.w	r2, r2, #15
 8001438:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	f023 0303 	bic.w	r3, r3, #3
 8001448:	f043 0201 	orr.w	r2, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	641a      	str	r2, [r3, #64]	; 0x40
 8001450:	e00a      	b.n	8001468 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f023 0312 	bic.w	r3, r3, #18
 800145a:	f043 0210 	orr.w	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001462:	2301      	movs	r3, #1
 8001464:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001468:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800146c:	4618      	mov	r0, r3
 800146e:	3768      	adds	r7, #104	; 0x68
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	fff0c007 	.word	0xfff0c007

08001478 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	2b00      	cmp	r3, #0
 8001494:	f040 80f7 	bne.w	8001686 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d101      	bne.n	80014a6 <HAL_ADC_Start_DMA+0x2e>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e0f2      	b.n	800168c <HAL_ADC_Start_DMA+0x214>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014b6:	d004      	beq.n	80014c2 <HAL_ADC_Start_DMA+0x4a>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a75      	ldr	r2, [pc, #468]	; (8001694 <HAL_ADC_Start_DMA+0x21c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d109      	bne.n	80014d6 <HAL_ADC_Start_DMA+0x5e>
 80014c2:	4b75      	ldr	r3, [pc, #468]	; (8001698 <HAL_ADC_Start_DMA+0x220>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 031f 	and.w	r3, r3, #31
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf0c      	ite	eq
 80014ce:	2301      	moveq	r3, #1
 80014d0:	2300      	movne	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	e008      	b.n	80014e8 <HAL_ADC_Start_DMA+0x70>
 80014d6:	4b71      	ldr	r3, [pc, #452]	; (800169c <HAL_ADC_Start_DMA+0x224>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 031f 	and.w	r3, r3, #31
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bf0c      	ite	eq
 80014e2:	2301      	moveq	r3, #1
 80014e4:	2300      	movne	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80c5 	beq.w	8001678 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 fd20 	bl	8001f34 <ADC_Enable>
 80014f4:	4603      	mov	r3, r0
 80014f6:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f040 80b7 	bne.w	800166e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001508:	f023 0301 	bic.w	r3, r3, #1
 800150c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800151c:	d004      	beq.n	8001528 <HAL_ADC_Start_DMA+0xb0>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a5c      	ldr	r2, [pc, #368]	; (8001694 <HAL_ADC_Start_DMA+0x21c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d106      	bne.n	8001536 <HAL_ADC_Start_DMA+0xbe>
 8001528:	4b5b      	ldr	r3, [pc, #364]	; (8001698 <HAL_ADC_Start_DMA+0x220>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 031f 	and.w	r3, r3, #31
 8001530:	2b00      	cmp	r3, #0
 8001532:	d010      	beq.n	8001556 <HAL_ADC_Start_DMA+0xde>
 8001534:	e005      	b.n	8001542 <HAL_ADC_Start_DMA+0xca>
 8001536:	4b59      	ldr	r3, [pc, #356]	; (800169c <HAL_ADC_Start_DMA+0x224>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 031f 	and.w	r3, r3, #31
 800153e:	2b00      	cmp	r3, #0
 8001540:	d009      	beq.n	8001556 <HAL_ADC_Start_DMA+0xde>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800154a:	d004      	beq.n	8001556 <HAL_ADC_Start_DMA+0xde>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a53      	ldr	r2, [pc, #332]	; (80016a0 <HAL_ADC_Start_DMA+0x228>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d115      	bne.n	8001582 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d036      	beq.n	80015de <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001578:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001580:	e02d      	b.n	80015de <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001596:	d004      	beq.n	80015a2 <HAL_ADC_Start_DMA+0x12a>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a3d      	ldr	r2, [pc, #244]	; (8001694 <HAL_ADC_Start_DMA+0x21c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d10a      	bne.n	80015b8 <HAL_ADC_Start_DMA+0x140>
 80015a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf14      	ite	ne
 80015b0:	2301      	movne	r3, #1
 80015b2:	2300      	moveq	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	e008      	b.n	80015ca <HAL_ADC_Start_DMA+0x152>
 80015b8:	4b39      	ldr	r3, [pc, #228]	; (80016a0 <HAL_ADC_Start_DMA+0x228>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bf14      	ite	ne
 80015c4:	2301      	movne	r3, #1
 80015c6:	2300      	moveq	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d007      	beq.n	80015de <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ea:	d106      	bne.n	80015fa <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f0:	f023 0206 	bic.w	r2, r3, #6
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	645a      	str	r2, [r3, #68]	; 0x44
 80015f8:	e002      	b.n	8001600 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800160c:	4a25      	ldr	r2, [pc, #148]	; (80016a4 <HAL_ADC_Start_DMA+0x22c>)
 800160e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001614:	4a24      	ldr	r2, [pc, #144]	; (80016a8 <HAL_ADC_Start_DMA+0x230>)
 8001616:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161c:	4a23      	ldr	r2, [pc, #140]	; (80016ac <HAL_ADC_Start_DMA+0x234>)
 800161e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	221c      	movs	r2, #28
 8001626:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0210 	orr.w	r2, r2, #16
 8001636:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0201 	orr.w	r2, r2, #1
 8001646:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	3340      	adds	r3, #64	; 0x40
 8001652:	4619      	mov	r1, r3
 8001654:	68ba      	ldr	r2, [r7, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f000 ff4d 	bl	80024f6 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0204 	orr.w	r2, r2, #4
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	e00d      	b.n	800168a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001676:	e008      	b.n	800168a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001684:	e001      	b.n	800168a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001686:	2302      	movs	r3, #2
 8001688:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800168a:	7dfb      	ldrb	r3, [r7, #23]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	50000100 	.word	0x50000100
 8001698:	50000300 	.word	0x50000300
 800169c:	50000700 	.word	0x50000700
 80016a0:	50000400 	.word	0x50000400
 80016a4:	08001e69 	.word	0x08001e69
 80016a8:	08001ee3 	.word	0x08001ee3
 80016ac:	08001eff 	.word	0x08001eff

080016b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b09b      	sub	sp, #108	; 0x6c
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d101      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x22>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e2ca      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x5b8>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f040 82ae 	bne.w	8001c46 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d81c      	bhi.n	800172c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	461a      	mov	r2, r3
 8001706:	231f      	movs	r3, #31
 8001708:	4093      	lsls	r3, r2
 800170a:	43db      	mvns	r3, r3
 800170c:	4019      	ands	r1, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	fa00 f203 	lsl.w	r2, r0, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	631a      	str	r2, [r3, #48]	; 0x30
 800172a:	e063      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b09      	cmp	r3, #9
 8001732:	d81e      	bhi.n	8001772 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	3b1e      	subs	r3, #30
 8001748:	221f      	movs	r2, #31
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	4019      	ands	r1, r3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	3b1e      	subs	r3, #30
 8001764:	fa00 f203 	lsl.w	r2, r0, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	635a      	str	r2, [r3, #52]	; 0x34
 8001770:	e040      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b0e      	cmp	r3, #14
 8001778:	d81e      	bhi.n	80017b8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	3b3c      	subs	r3, #60	; 0x3c
 800178e:	221f      	movs	r2, #31
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	4019      	ands	r1, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	3b3c      	subs	r3, #60	; 0x3c
 80017aa:	fa00 f203 	lsl.w	r2, r0, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	639a      	str	r2, [r3, #56]	; 0x38
 80017b6:	e01d      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	3b5a      	subs	r3, #90	; 0x5a
 80017cc:	221f      	movs	r2, #31
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	4019      	ands	r1, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	6818      	ldr	r0, [r3, #0]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	3b5a      	subs	r3, #90	; 0x5a
 80017e8:	fa00 f203 	lsl.w	r2, r0, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 80e5 	bne.w	80019ce <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b09      	cmp	r3, #9
 800180a:	d91c      	bls.n	8001846 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6999      	ldr	r1, [r3, #24]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4613      	mov	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	3b1e      	subs	r3, #30
 800181e:	2207      	movs	r2, #7
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	4019      	ands	r1, r3
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	6898      	ldr	r0, [r3, #8]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	3b1e      	subs	r3, #30
 8001838:	fa00 f203 	lsl.w	r2, r0, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	619a      	str	r2, [r3, #24]
 8001844:	e019      	b.n	800187a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6959      	ldr	r1, [r3, #20]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	2207      	movs	r2, #7
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	4019      	ands	r1, r3
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	6898      	ldr	r0, [r3, #8]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4613      	mov	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	fa00 f203 	lsl.w	r2, r0, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	08db      	lsrs	r3, r3, #3
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	3b01      	subs	r3, #1
 8001898:	2b03      	cmp	r3, #3
 800189a:	d84f      	bhi.n	800193c <HAL_ADC_ConfigChannel+0x28c>
 800189c:	a201      	add	r2, pc, #4	; (adr r2, 80018a4 <HAL_ADC_ConfigChannel+0x1f4>)
 800189e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a2:	bf00      	nop
 80018a4:	080018b5 	.word	0x080018b5
 80018a8:	080018d7 	.word	0x080018d7
 80018ac:	080018f9 	.word	0x080018f9
 80018b0:	0800191b 	.word	0x0800191b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018ba:	4b9a      	ldr	r3, [pc, #616]	; (8001b24 <HAL_ADC_ConfigChannel+0x474>)
 80018bc:	4013      	ands	r3, r2
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	0691      	lsls	r1, r2, #26
 80018c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018c6:	430a      	orrs	r2, r1
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018d2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018d4:	e07e      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018dc:	4b91      	ldr	r3, [pc, #580]	; (8001b24 <HAL_ADC_ConfigChannel+0x474>)
 80018de:	4013      	ands	r3, r2
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	0691      	lsls	r1, r2, #26
 80018e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018e8:	430a      	orrs	r2, r1
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018f4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018f6:	e06d      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018fe:	4b89      	ldr	r3, [pc, #548]	; (8001b24 <HAL_ADC_ConfigChannel+0x474>)
 8001900:	4013      	ands	r3, r2
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	0691      	lsls	r1, r2, #26
 8001908:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800190a:	430a      	orrs	r2, r1
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001916:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001918:	e05c      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001920:	4b80      	ldr	r3, [pc, #512]	; (8001b24 <HAL_ADC_ConfigChannel+0x474>)
 8001922:	4013      	ands	r3, r2
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	0691      	lsls	r1, r2, #26
 800192a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800192c:	430a      	orrs	r2, r1
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001938:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800193a:	e04b      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001942:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	069b      	lsls	r3, r3, #26
 800194c:	429a      	cmp	r2, r3
 800194e:	d107      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800195e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001966:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	069b      	lsls	r3, r3, #26
 8001970:	429a      	cmp	r2, r3
 8001972:	d107      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001982:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800198a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	069b      	lsls	r3, r3, #26
 8001994:	429a      	cmp	r2, r3
 8001996:	d107      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019a6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	069b      	lsls	r3, r3, #26
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d10a      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019ca:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80019cc:	e001      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80019ce:	bf00      	nop
 80019d0:	e000      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80019d2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d108      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x344>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x344>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x346>
 80019f4:	2300      	movs	r3, #0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f040 8130 	bne.w	8001c5c <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d00f      	beq.n	8001a24 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2201      	movs	r2, #1
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001a22:	e049      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2201      	movs	r2, #1
 8001a32:	409a      	lsls	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b09      	cmp	r3, #9
 8001a44:	d91c      	bls.n	8001a80 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6999      	ldr	r1, [r3, #24]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4613      	mov	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	3b1b      	subs	r3, #27
 8001a58:	2207      	movs	r2, #7
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	4019      	ands	r1, r3
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	6898      	ldr	r0, [r3, #8]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	3b1b      	subs	r3, #27
 8001a72:	fa00 f203 	lsl.w	r2, r0, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	619a      	str	r2, [r3, #24]
 8001a7e:	e01b      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6959      	ldr	r1, [r3, #20]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	4413      	add	r3, r2
 8001a92:	2207      	movs	r2, #7
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	4019      	ands	r1, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	6898      	ldr	r0, [r3, #8]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ac0:	d004      	beq.n	8001acc <HAL_ADC_ConfigChannel+0x41c>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a18      	ldr	r2, [pc, #96]	; (8001b28 <HAL_ADC_ConfigChannel+0x478>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d101      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x420>
 8001acc:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <HAL_ADC_ConfigChannel+0x47c>)
 8001ace:	e000      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x422>
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <HAL_ADC_ConfigChannel+0x480>)
 8001ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b10      	cmp	r3, #16
 8001ada:	d105      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d015      	beq.n	8001b14 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001aec:	2b11      	cmp	r3, #17
 8001aee:	d105      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00b      	beq.n	8001b14 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b00:	2b12      	cmp	r3, #18
 8001b02:	f040 80ab 	bne.w	8001c5c <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 80a4 	bne.w	8001c5c <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b1c:	d10a      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x484>
 8001b1e:	4b02      	ldr	r3, [pc, #8]	; (8001b28 <HAL_ADC_ConfigChannel+0x478>)
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	e022      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x4ba>
 8001b24:	83fff000 	.word	0x83fff000
 8001b28:	50000100 	.word	0x50000100
 8001b2c:	50000300 	.word	0x50000300
 8001b30:	50000700 	.word	0x50000700
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a4e      	ldr	r2, [pc, #312]	; (8001c74 <HAL_ADC_ConfigChannel+0x5c4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d103      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x496>
 8001b3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	e011      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x4ba>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a4b      	ldr	r2, [pc, #300]	; (8001c78 <HAL_ADC_ConfigChannel+0x5c8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d102      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x4a6>
 8001b50:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <HAL_ADC_ConfigChannel+0x5cc>)
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	e009      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x4ba>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a48      	ldr	r2, [pc, #288]	; (8001c7c <HAL_ADC_ConfigChannel+0x5cc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d102      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x4b6>
 8001b60:	4b45      	ldr	r3, [pc, #276]	; (8001c78 <HAL_ADC_ConfigChannel+0x5c8>)
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	e001      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x4ba>
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d108      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x4da>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x4da>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x4dc>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d150      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b90:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d010      	beq.n	8001bb8 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d107      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x502>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x502>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x504>
 8001bb2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d13c      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b10      	cmp	r3, #16
 8001bbe:	d11d      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x54c>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bc8:	d118      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bd4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bd6:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <HAL_ADC_ConfigChannel+0x5d0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a2a      	ldr	r2, [pc, #168]	; (8001c84 <HAL_ADC_ConfigChannel+0x5d4>)
 8001bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001be0:	0c9a      	lsrs	r2, r3, #18
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bec:	e002      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f9      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bfa:	e02e      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b11      	cmp	r3, #17
 8001c02:	d10b      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x56c>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c0c:	d106      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c18:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c1a:	e01e      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b12      	cmp	r3, #18
 8001c22:	d11a      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c2e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c30:	e013      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f043 0220 	orr.w	r2, r3, #32
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c44:	e00a      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f043 0220 	orr.w	r2, r3, #32
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c58:	e000      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c5a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	376c      	adds	r7, #108	; 0x6c
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	50000100 	.word	0x50000100
 8001c78:	50000400 	.word	0x50000400
 8001c7c:	50000500 	.word	0x50000500
 8001c80:	20000000 	.word	0x20000000
 8001c84:	431bde83 	.word	0x431bde83

08001c88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b099      	sub	sp, #100	; 0x64
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ca0:	d102      	bne.n	8001ca8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001ca2:	4b6c      	ldr	r3, [pc, #432]	; (8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	e01a      	b.n	8001cde <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a69      	ldr	r2, [pc, #420]	; (8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d103      	bne.n	8001cba <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001cb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	e011      	b.n	8001cde <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a66      	ldr	r2, [pc, #408]	; (8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d102      	bne.n	8001cca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001cc4:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	e009      	b.n	8001cde <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a63      	ldr	r2, [pc, #396]	; (8001e5c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d102      	bne.n	8001cda <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001cd4:	4b60      	ldr	r3, [pc, #384]	; (8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	e001      	b.n	8001cde <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0b0      	b.n	8001e4a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e0a9      	b.n	8001e4a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f040 808d 	bne.w	8001e28 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f040 8086 	bne.w	8001e28 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d24:	d004      	beq.n	8001d30 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a4a      	ldr	r2, [pc, #296]	; (8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d101      	bne.n	8001d34 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001d30:	4b4b      	ldr	r3, [pc, #300]	; (8001e60 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001d32:	e000      	b.n	8001d36 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001d34:	4b4b      	ldr	r3, [pc, #300]	; (8001e64 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001d36:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d040      	beq.n	8001dc2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d52:	035b      	lsls	r3, r3, #13
 8001d54:	430b      	orrs	r3, r1
 8001d56:	431a      	orrs	r2, r3
 8001d58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d5a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d108      	bne.n	8001d7c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d15c      	bne.n	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d107      	bne.n	8001d9e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d101      	bne.n	8001d9e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001d9e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d14b      	bne.n	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001da4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001dac:	f023 030f 	bic.w	r3, r3, #15
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	6811      	ldr	r1, [r2, #0]
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	6892      	ldr	r2, [r2, #8]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dbe:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001dc0:	e03c      	b.n	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001dc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dcc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d108      	bne.n	8001dee <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001dee:	2300      	movs	r3, #0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d123      	bne.n	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d107      	bne.n	8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001e10:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d112      	bne.n	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001e16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e1e:	f023 030f 	bic.w	r3, r3, #15
 8001e22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e24:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e26:	e009      	b.n	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	f043 0220 	orr.w	r2, r3, #32
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001e3a:	e000      	b.n	8001e3e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e3c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3764      	adds	r7, #100	; 0x64
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	50000100 	.word	0x50000100
 8001e58:	50000400 	.word	0x50000400
 8001e5c:	50000500 	.word	0x50000500
 8001e60:	50000300 	.word	0x50000300
 8001e64:	50000700 	.word	0x50000700

08001e68 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d126      	bne.n	8001ed0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d115      	bne.n	8001ec8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d111      	bne.n	8001ec8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d105      	bne.n	8001ec8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f043 0201 	orr.w	r2, r3, #1
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f006 ffd9 	bl	8008e80 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001ece:	e004      	b.n	8001eda <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	4798      	blx	r3
}
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f7ff f8b5 	bl	8001060 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b084      	sub	sp, #16
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	f043 0204 	orr.w	r2, r3, #4
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f7ff f8a4 	bl	8001072 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d108      	bne.n	8001f60 <ADC_Enable+0x2c>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <ADC_Enable+0x2c>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <ADC_Enable+0x2e>
 8001f60:	2300      	movs	r3, #0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d143      	bne.n	8001fee <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	4b22      	ldr	r3, [pc, #136]	; (8001ff8 <ADC_Enable+0xc4>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00d      	beq.n	8001f90 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	f043 0210 	orr.w	r2, r3, #16
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f84:	f043 0201 	orr.w	r2, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e02f      	b.n	8001ff0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001fa0:	f003 fc1e 	bl	80057e0 <HAL_GetTick>
 8001fa4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fa6:	e01b      	b.n	8001fe0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fa8:	f003 fc1a 	bl	80057e0 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d914      	bls.n	8001fe0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d00d      	beq.n	8001fe0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f043 0210 	orr.w	r2, r3, #16
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e007      	b.n	8001ff0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d1dc      	bne.n	8001fa8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	8000003f 	.word	0x8000003f

08001ffc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d108      	bne.n	8002028 <ADC_Disable+0x2c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <ADC_Disable+0x2c>
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <ADC_Disable+0x2e>
 8002028:	2300      	movs	r3, #0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d047      	beq.n	80020be <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 030d 	and.w	r3, r3, #13
 8002038:	2b01      	cmp	r3, #1
 800203a:	d10f      	bne.n	800205c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0202 	orr.w	r2, r2, #2
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2203      	movs	r2, #3
 8002052:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002054:	f003 fbc4 	bl	80057e0 <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800205a:	e029      	b.n	80020b0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	f043 0210 	orr.w	r2, r3, #16
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206c:	f043 0201 	orr.w	r2, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e023      	b.n	80020c0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002078:	f003 fbb2 	bl	80057e0 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d914      	bls.n	80020b0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d10d      	bne.n	80020b0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f043 0210 	orr.w	r2, r3, #16
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	f043 0201 	orr.w	r2, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e007      	b.n	80020c0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d0dc      	beq.n	8002078 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d6:	e160      	b.n	800239a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2101      	movs	r1, #1
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	fa01 f303 	lsl.w	r3, r1, r3
 80020e4:	4013      	ands	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8152 	beq.w	8002394 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d005      	beq.n	8002108 <HAL_GPIO_Init+0x40>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d130      	bne.n	800216a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	2203      	movs	r2, #3
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800213e:	2201      	movs	r2, #1
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	f003 0201 	and.w	r2, r3, #1
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b03      	cmp	r3, #3
 8002174:	d017      	beq.n	80021a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	2203      	movs	r2, #3
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d123      	bne.n	80021fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	08da      	lsrs	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3208      	adds	r2, #8
 80021ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	220f      	movs	r2, #15
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4013      	ands	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	08da      	lsrs	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3208      	adds	r2, #8
 80021f4:	6939      	ldr	r1, [r7, #16]
 80021f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	2203      	movs	r2, #3
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 0203 	and.w	r2, r3, #3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 80ac 	beq.w	8002394 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223c:	4b5e      	ldr	r3, [pc, #376]	; (80023b8 <HAL_GPIO_Init+0x2f0>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	4a5d      	ldr	r2, [pc, #372]	; (80023b8 <HAL_GPIO_Init+0x2f0>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6193      	str	r3, [r2, #24]
 8002248:	4b5b      	ldr	r3, [pc, #364]	; (80023b8 <HAL_GPIO_Init+0x2f0>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002254:	4a59      	ldr	r2, [pc, #356]	; (80023bc <HAL_GPIO_Init+0x2f4>)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	089b      	lsrs	r3, r3, #2
 800225a:	3302      	adds	r3, #2
 800225c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	220f      	movs	r2, #15
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800227e:	d025      	beq.n	80022cc <HAL_GPIO_Init+0x204>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a4f      	ldr	r2, [pc, #316]	; (80023c0 <HAL_GPIO_Init+0x2f8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d01f      	beq.n	80022c8 <HAL_GPIO_Init+0x200>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a4e      	ldr	r2, [pc, #312]	; (80023c4 <HAL_GPIO_Init+0x2fc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d019      	beq.n	80022c4 <HAL_GPIO_Init+0x1fc>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a4d      	ldr	r2, [pc, #308]	; (80023c8 <HAL_GPIO_Init+0x300>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d013      	beq.n	80022c0 <HAL_GPIO_Init+0x1f8>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a4c      	ldr	r2, [pc, #304]	; (80023cc <HAL_GPIO_Init+0x304>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d00d      	beq.n	80022bc <HAL_GPIO_Init+0x1f4>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a4b      	ldr	r2, [pc, #300]	; (80023d0 <HAL_GPIO_Init+0x308>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d007      	beq.n	80022b8 <HAL_GPIO_Init+0x1f0>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a4a      	ldr	r2, [pc, #296]	; (80023d4 <HAL_GPIO_Init+0x30c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d101      	bne.n	80022b4 <HAL_GPIO_Init+0x1ec>
 80022b0:	2306      	movs	r3, #6
 80022b2:	e00c      	b.n	80022ce <HAL_GPIO_Init+0x206>
 80022b4:	2307      	movs	r3, #7
 80022b6:	e00a      	b.n	80022ce <HAL_GPIO_Init+0x206>
 80022b8:	2305      	movs	r3, #5
 80022ba:	e008      	b.n	80022ce <HAL_GPIO_Init+0x206>
 80022bc:	2304      	movs	r3, #4
 80022be:	e006      	b.n	80022ce <HAL_GPIO_Init+0x206>
 80022c0:	2303      	movs	r3, #3
 80022c2:	e004      	b.n	80022ce <HAL_GPIO_Init+0x206>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e002      	b.n	80022ce <HAL_GPIO_Init+0x206>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <HAL_GPIO_Init+0x206>
 80022cc:	2300      	movs	r3, #0
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	f002 0203 	and.w	r2, r2, #3
 80022d4:	0092      	lsls	r2, r2, #2
 80022d6:	4093      	lsls	r3, r2
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022de:	4937      	ldr	r1, [pc, #220]	; (80023bc <HAL_GPIO_Init+0x2f4>)
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	3302      	adds	r3, #2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ec:	4b3a      	ldr	r3, [pc, #232]	; (80023d8 <HAL_GPIO_Init+0x310>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002310:	4a31      	ldr	r2, [pc, #196]	; (80023d8 <HAL_GPIO_Init+0x310>)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002316:	4b30      	ldr	r3, [pc, #192]	; (80023d8 <HAL_GPIO_Init+0x310>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800233a:	4a27      	ldr	r2, [pc, #156]	; (80023d8 <HAL_GPIO_Init+0x310>)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002340:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <HAL_GPIO_Init+0x310>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	43db      	mvns	r3, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002364:	4a1c      	ldr	r2, [pc, #112]	; (80023d8 <HAL_GPIO_Init+0x310>)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <HAL_GPIO_Init+0x310>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <HAL_GPIO_Init+0x310>)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	3301      	adds	r3, #1
 8002398:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f47f ae97 	bne.w	80020d8 <HAL_GPIO_Init+0x10>
  }
}
 80023aa:	bf00      	nop
 80023ac:	bf00      	nop
 80023ae:	371c      	adds	r7, #28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40010000 	.word	0x40010000
 80023c0:	48000400 	.word	0x48000400
 80023c4:	48000800 	.word	0x48000800
 80023c8:	48000c00 	.word	0x48000c00
 80023cc:	48001000 	.word	0x48001000
 80023d0:	48001400 	.word	0x48001400
 80023d4:	48001800 	.word	0x48001800
 80023d8:	40010400 	.word	0x40010400

080023dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	887b      	ldrh	r3, [r7, #2]
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023f4:	2301      	movs	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
 80023f8:	e001      	b.n	80023fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023fa:	2300      	movs	r3, #0
 80023fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	460b      	mov	r3, r1
 8002414:	807b      	strh	r3, [r7, #2]
 8002416:	4613      	mov	r3, r2
 8002418:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800241a:	787b      	ldrb	r3, [r7, #1]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002420:	887a      	ldrh	r2, [r7, #2]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002426:	e002      	b.n	800242e <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002428:	887a      	ldrh	r2, [r7, #2]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	4013      	ands	r3, r2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d006      	beq.n	800245c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800244e:	4a05      	ldr	r2, [pc, #20]	; (8002464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	4618      	mov	r0, r3
 8002458:	f003 f940 	bl	80056dc <HAL_GPIO_EXTI_Callback>
  }
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40010400 	.word	0x40010400

08002468 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e037      	b.n	80024ee <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2202      	movs	r2, #2
 8002482:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002494:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002498:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f9c1 	bl	8002858 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}  
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_DMA_Start_IT+0x20>
 8002512:	2302      	movs	r3, #2
 8002514:	e04a      	b.n	80025ac <HAL_DMA_Start_IT+0xb6>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002524:	2b01      	cmp	r3, #1
 8002526:	d13a      	bne.n	800259e <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0201 	bic.w	r2, r2, #1
 8002544:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	68b9      	ldr	r1, [r7, #8]
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f956 	bl	80027fe <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 020e 	orr.w	r2, r2, #14
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	e00f      	b.n	800258c <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 020a 	orr.w	r2, r2, #10
 800257a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0204 	bic.w	r2, r2, #4
 800258a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e005      	b.n	80025aa <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80025a6:	2302      	movs	r3, #2
 80025a8:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
} 
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d008      	beq.n	80025d8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2204      	movs	r2, #4
 80025ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e020      	b.n	800261a <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 020e 	bic.w	r2, r2, #14
 80025e6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002600:	2101      	movs	r1, #1
 8002602:	fa01 f202 	lsl.w	r2, r1, r2
 8002606:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002636:	2b02      	cmp	r3, #2
 8002638:	d005      	beq.n	8002646 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2204      	movs	r2, #4
 800263e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
 8002644:	e027      	b.n	8002696 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 020e 	bic.w	r2, r2, #14
 8002654:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0201 	bic.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266e:	2101      	movs	r1, #1
 8002670:	fa01 f202 	lsl.w	r2, r1, r2
 8002674:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	4798      	blx	r3
    } 
  }
  return status;
 8002696:	7bfb      	ldrb	r3, [r7, #15]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	2204      	movs	r2, #4
 80026be:	409a      	lsls	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d024      	beq.n	8002712 <HAL_DMA_IRQHandler+0x72>
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d01f      	beq.n	8002712 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d107      	bne.n	80026f0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0204 	bic.w	r2, r2, #4
 80026ee:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f8:	2104      	movs	r1, #4
 80026fa:	fa01 f202 	lsl.w	r2, r1, r2
 80026fe:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	2b00      	cmp	r3, #0
 8002706:	d06a      	beq.n	80027de <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002710:	e065      	b.n	80027de <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	2202      	movs	r2, #2
 8002718:	409a      	lsls	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d02c      	beq.n	800277c <HAL_DMA_IRQHandler+0xdc>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d027      	beq.n	800277c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10b      	bne.n	8002752 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 020a 	bic.w	r2, r2, #10
 8002748:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275a:	2102      	movs	r1, #2
 800275c:	fa01 f202 	lsl.w	r2, r1, r2
 8002760:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276e:	2b00      	cmp	r3, #0
 8002770:	d035      	beq.n	80027de <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800277a:	e030      	b.n	80027de <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	2208      	movs	r2, #8
 8002782:	409a      	lsls	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d028      	beq.n	80027de <HAL_DMA_IRQHandler+0x13e>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d023      	beq.n	80027de <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 020e 	bic.w	r2, r2, #14
 80027a4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ae:	2101      	movs	r1, #1
 80027b0:	fa01 f202 	lsl.w	r2, r1, r2
 80027b4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
    }
  }
}  
 80027dc:	e7ff      	b.n	80027de <HAL_DMA_IRQHandler+0x13e>
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027fe:	b480      	push	{r7}
 8002800:	b085      	sub	sp, #20
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002814:	2101      	movs	r1, #1
 8002816:	fa01 f202 	lsl.w	r2, r1, r2
 800281a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b10      	cmp	r3, #16
 800282a:	d108      	bne.n	800283e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800283c:	e007      	b.n	800284e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	60da      	str	r2, [r3, #12]
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <DMA_CalcBaseAndBitshift+0x5c>)
 8002868:	429a      	cmp	r2, r3
 800286a:	d80f      	bhi.n	800288c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <DMA_CalcBaseAndBitshift+0x60>)
 8002874:	4413      	add	r3, r2
 8002876:	4a11      	ldr	r2, [pc, #68]	; (80028bc <DMA_CalcBaseAndBitshift+0x64>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	091b      	lsrs	r3, r3, #4
 800287e:	009a      	lsls	r2, r3, #2
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a0e      	ldr	r2, [pc, #56]	; (80028c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002888:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800288a:	e00e      	b.n	80028aa <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <DMA_CalcBaseAndBitshift+0x6c>)
 8002894:	4413      	add	r3, r2
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <DMA_CalcBaseAndBitshift+0x64>)
 8002898:	fba2 2303 	umull	r2, r3, r2, r3
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	009a      	lsls	r2, r3, #2
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <DMA_CalcBaseAndBitshift+0x70>)
 80028a8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	40020407 	.word	0x40020407
 80028b8:	bffdfff8 	.word	0xbffdfff8
 80028bc:	cccccccd 	.word	0xcccccccd
 80028c0:	40020000 	.word	0x40020000
 80028c4:	bffdfbf8 	.word	0xbffdfbf8
 80028c8:	40020400 	.word	0x40020400

080028cc <Gpt_Init>:

static void Gpt_TIM3_Init(void);
static void Gpt_Error_Handler(void);

void Gpt_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	Gpt_TIM3_Init();
 80028d0:	f000 f812 	bl	80028f8 <Gpt_TIM3_Init>
	Gpt_InitDone = 1u;
 80028d4:	4b02      	ldr	r3, [pc, #8]	; (80028e0 <Gpt_Init+0x14>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000118 	.word	0x20000118

080028e4 <HAL_TIM_PeriodElapsedCallback>:
		HAL_TIM_Base_Stop_IT(&htim3);
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
	...

080028f8 <Gpt_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void Gpt_TIM3_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028fe:	f107 0310 	add.w	r3, r7, #16
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	609a      	str	r2, [r3, #8]
 800290a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800290c:	1d3b      	adds	r3, r7, #4
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002916:	4b1d      	ldr	r3, [pc, #116]	; (800298c <Gpt_TIM3_Init+0x94>)
 8002918:	4a1d      	ldr	r2, [pc, #116]	; (8002990 <Gpt_TIM3_Init+0x98>)
 800291a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 800291c:	4b1b      	ldr	r3, [pc, #108]	; (800298c <Gpt_TIM3_Init+0x94>)
 800291e:	220a      	movs	r2, #10
 8002920:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002922:	4b1a      	ldr	r3, [pc, #104]	; (800298c <Gpt_TIM3_Init+0x94>)
 8002924:	2200      	movs	r2, #0
 8002926:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 8002928:	4b18      	ldr	r3, [pc, #96]	; (800298c <Gpt_TIM3_Init+0x94>)
 800292a:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800292e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002930:	4b16      	ldr	r3, [pc, #88]	; (800298c <Gpt_TIM3_Init+0x94>)
 8002932:	2200      	movs	r2, #0
 8002934:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <Gpt_TIM3_Init+0x94>)
 8002938:	2280      	movs	r2, #128	; 0x80
 800293a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800293c:	4813      	ldr	r0, [pc, #76]	; (800298c <Gpt_TIM3_Init+0x94>)
 800293e:	f000 f82e 	bl	800299e <HAL_TIM_Base_Init>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <Gpt_TIM3_Init+0x54>
  {
	  Gpt_Error_Handler();
 8002948:	f000 f824 	bl	8002994 <Gpt_Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800294c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002950:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002952:	f107 0310 	add.w	r3, r7, #16
 8002956:	4619      	mov	r1, r3
 8002958:	480c      	ldr	r0, [pc, #48]	; (800298c <Gpt_TIM3_Init+0x94>)
 800295a:	f000 fc17 	bl	800318c <HAL_TIM_ConfigClockSource>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <Gpt_TIM3_Init+0x70>
  {
	  Gpt_Error_Handler();
 8002964:	f000 f816 	bl	8002994 <Gpt_Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002968:	2300      	movs	r3, #0
 800296a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002970:	1d3b      	adds	r3, r7, #4
 8002972:	4619      	mov	r1, r3
 8002974:	4805      	ldr	r0, [pc, #20]	; (800298c <Gpt_TIM3_Init+0x94>)
 8002976:	f001 f94d 	bl	8003c14 <HAL_TIMEx_MasterConfigSynchronization>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <Gpt_TIM3_Init+0x8c>
  {
	  Gpt_Error_Handler();
 8002980:	f000 f808 	bl	8002994 <Gpt_Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002984:	bf00      	nop
 8002986:	3720      	adds	r7, #32
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	200000cc 	.word	0x200000cc
 8002990:	40000400 	.word	0x40000400

08002994 <Gpt_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Gpt_Error_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002998:	b672      	cpsid	i
}
 800299a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800299c:	e7fe      	b.n	800299c <Gpt_Error_Handler+0x8>

0800299e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e049      	b.n	8002a44 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d106      	bne.n	80029ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f003 f999 	bl	8005cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2202      	movs	r2, #2
 80029ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3304      	adds	r3, #4
 80029da:	4619      	mov	r1, r3
 80029dc:	4610      	mov	r0, r2
 80029de:	f000 fcc3 	bl	8003368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e049      	b.n	8002af2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d106      	bne.n	8002a78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f841 	bl	8002afa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3304      	adds	r3, #4
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	f000 fc6c 	bl	8003368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d109      	bne.n	8002b30 <HAL_TIM_PWM_Start+0x24>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	bf14      	ite	ne
 8002b28:	2301      	movne	r3, #1
 8002b2a:	2300      	moveq	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	e03c      	b.n	8002baa <HAL_TIM_PWM_Start+0x9e>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d109      	bne.n	8002b4a <HAL_TIM_PWM_Start+0x3e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	bf14      	ite	ne
 8002b42:	2301      	movne	r3, #1
 8002b44:	2300      	moveq	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	e02f      	b.n	8002baa <HAL_TIM_PWM_Start+0x9e>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d109      	bne.n	8002b64 <HAL_TIM_PWM_Start+0x58>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e022      	b.n	8002baa <HAL_TIM_PWM_Start+0x9e>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b0c      	cmp	r3, #12
 8002b68:	d109      	bne.n	8002b7e <HAL_TIM_PWM_Start+0x72>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	bf14      	ite	ne
 8002b76:	2301      	movne	r3, #1
 8002b78:	2300      	moveq	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	e015      	b.n	8002baa <HAL_TIM_PWM_Start+0x9e>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d109      	bne.n	8002b98 <HAL_TIM_PWM_Start+0x8c>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	e008      	b.n	8002baa <HAL_TIM_PWM_Start+0x9e>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e0a1      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d104      	bne.n	8002bc2 <HAL_TIM_PWM_Start+0xb6>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc0:	e023      	b.n	8002c0a <HAL_TIM_PWM_Start+0xfe>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d104      	bne.n	8002bd2 <HAL_TIM_PWM_Start+0xc6>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd0:	e01b      	b.n	8002c0a <HAL_TIM_PWM_Start+0xfe>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d104      	bne.n	8002be2 <HAL_TIM_PWM_Start+0xd6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002be0:	e013      	b.n	8002c0a <HAL_TIM_PWM_Start+0xfe>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b0c      	cmp	r3, #12
 8002be6:	d104      	bne.n	8002bf2 <HAL_TIM_PWM_Start+0xe6>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bf0:	e00b      	b.n	8002c0a <HAL_TIM_PWM_Start+0xfe>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b10      	cmp	r3, #16
 8002bf6:	d104      	bne.n	8002c02 <HAL_TIM_PWM_Start+0xf6>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c00:	e003      	b.n	8002c0a <HAL_TIM_PWM_Start+0xfe>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	6839      	ldr	r1, [r7, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 ffda 	bl	8003bcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a38      	ldr	r2, [pc, #224]	; (8002d00 <HAL_TIM_PWM_Start+0x1f4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d018      	beq.n	8002c54 <HAL_TIM_PWM_Start+0x148>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a37      	ldr	r2, [pc, #220]	; (8002d04 <HAL_TIM_PWM_Start+0x1f8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d013      	beq.n	8002c54 <HAL_TIM_PWM_Start+0x148>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a35      	ldr	r2, [pc, #212]	; (8002d08 <HAL_TIM_PWM_Start+0x1fc>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00e      	beq.n	8002c54 <HAL_TIM_PWM_Start+0x148>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a34      	ldr	r2, [pc, #208]	; (8002d0c <HAL_TIM_PWM_Start+0x200>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d009      	beq.n	8002c54 <HAL_TIM_PWM_Start+0x148>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a32      	ldr	r2, [pc, #200]	; (8002d10 <HAL_TIM_PWM_Start+0x204>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d004      	beq.n	8002c54 <HAL_TIM_PWM_Start+0x148>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a31      	ldr	r2, [pc, #196]	; (8002d14 <HAL_TIM_PWM_Start+0x208>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d101      	bne.n	8002c58 <HAL_TIM_PWM_Start+0x14c>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <HAL_TIM_PWM_Start+0x14e>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <HAL_TIM_PWM_Start+0x1f4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d01d      	beq.n	8002cb4 <HAL_TIM_PWM_Start+0x1a8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c80:	d018      	beq.n	8002cb4 <HAL_TIM_PWM_Start+0x1a8>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a24      	ldr	r2, [pc, #144]	; (8002d18 <HAL_TIM_PWM_Start+0x20c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d013      	beq.n	8002cb4 <HAL_TIM_PWM_Start+0x1a8>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a22      	ldr	r2, [pc, #136]	; (8002d1c <HAL_TIM_PWM_Start+0x210>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00e      	beq.n	8002cb4 <HAL_TIM_PWM_Start+0x1a8>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a1a      	ldr	r2, [pc, #104]	; (8002d04 <HAL_TIM_PWM_Start+0x1f8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d009      	beq.n	8002cb4 <HAL_TIM_PWM_Start+0x1a8>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a18      	ldr	r2, [pc, #96]	; (8002d08 <HAL_TIM_PWM_Start+0x1fc>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d004      	beq.n	8002cb4 <HAL_TIM_PWM_Start+0x1a8>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a19      	ldr	r2, [pc, #100]	; (8002d14 <HAL_TIM_PWM_Start+0x208>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d115      	bne.n	8002ce0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_TIM_PWM_Start+0x214>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b06      	cmp	r3, #6
 8002cc4:	d015      	beq.n	8002cf2 <HAL_TIM_PWM_Start+0x1e6>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ccc:	d011      	beq.n	8002cf2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cde:	e008      	b.n	8002cf2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	e000      	b.n	8002cf4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40012c00 	.word	0x40012c00
 8002d04:	40013400 	.word	0x40013400
 8002d08:	40014000 	.word	0x40014000
 8002d0c:	40014400 	.word	0x40014400
 8002d10:	40014800 	.word	0x40014800
 8002d14:	40015000 	.word	0x40015000
 8002d18:	40000400 	.word	0x40000400
 8002d1c:	40000800 	.word	0x40000800
 8002d20:	00010007 	.word	0x00010007

08002d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d122      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d11b      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0202 	mvn.w	r2, #2
 8002d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fae2 	bl	8003330 <HAL_TIM_IC_CaptureCallback>
 8002d6c:	e005      	b.n	8002d7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fad5 	bl	800331e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fae4 	bl	8003342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d122      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d11b      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0204 	mvn.w	r2, #4
 8002da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2202      	movs	r2, #2
 8002daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fab8 	bl	8003330 <HAL_TIM_IC_CaptureCallback>
 8002dc0:	e005      	b.n	8002dce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 faab 	bl	800331e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 faba 	bl	8003342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d122      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d11b      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0208 	mvn.w	r2, #8
 8002df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fa8e 	bl	8003330 <HAL_TIM_IC_CaptureCallback>
 8002e14:	e005      	b.n	8002e22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fa81 	bl	800331e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 fa90 	bl	8003342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	2b10      	cmp	r3, #16
 8002e34:	d122      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	2b10      	cmp	r3, #16
 8002e42:	d11b      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0210 	mvn.w	r2, #16
 8002e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2208      	movs	r2, #8
 8002e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fa64 	bl	8003330 <HAL_TIM_IC_CaptureCallback>
 8002e68:	e005      	b.n	8002e76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fa57 	bl	800331e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fa66 	bl	8003342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d10e      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d107      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0201 	mvn.w	r2, #1
 8002ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff fd1e 	bl	80028e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb2:	2b80      	cmp	r3, #128	; 0x80
 8002eb4:	d10e      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec0:	2b80      	cmp	r3, #128	; 0x80
 8002ec2:	d107      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 ff35 	bl	8003d3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ee2:	d10e      	bne.n	8002f02 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eee:	2b80      	cmp	r3, #128	; 0x80
 8002ef0:	d107      	bne.n	8002f02 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 ff27 	bl	8003d50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0c:	2b40      	cmp	r3, #64	; 0x40
 8002f0e:	d10e      	bne.n	8002f2e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	2b40      	cmp	r3, #64	; 0x40
 8002f1c:	d107      	bne.n	8002f2e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fa13 	bl	8003354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d10e      	bne.n	8002f5a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	d107      	bne.n	8002f5a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f06f 0220 	mvn.w	r2, #32
 8002f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fee9 	bl	8003d2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e0ff      	b.n	8003182 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b14      	cmp	r3, #20
 8002f8e:	f200 80f0 	bhi.w	8003172 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002f92:	a201      	add	r2, pc, #4	; (adr r2, 8002f98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f98:	08002fed 	.word	0x08002fed
 8002f9c:	08003173 	.word	0x08003173
 8002fa0:	08003173 	.word	0x08003173
 8002fa4:	08003173 	.word	0x08003173
 8002fa8:	0800302d 	.word	0x0800302d
 8002fac:	08003173 	.word	0x08003173
 8002fb0:	08003173 	.word	0x08003173
 8002fb4:	08003173 	.word	0x08003173
 8002fb8:	0800306f 	.word	0x0800306f
 8002fbc:	08003173 	.word	0x08003173
 8002fc0:	08003173 	.word	0x08003173
 8002fc4:	08003173 	.word	0x08003173
 8002fc8:	080030af 	.word	0x080030af
 8002fcc:	08003173 	.word	0x08003173
 8002fd0:	08003173 	.word	0x08003173
 8002fd4:	08003173 	.word	0x08003173
 8002fd8:	080030f1 	.word	0x080030f1
 8002fdc:	08003173 	.word	0x08003173
 8002fe0:	08003173 	.word	0x08003173
 8002fe4:	08003173 	.word	0x08003173
 8002fe8:	08003131 	.word	0x08003131
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fa54 	bl	80034a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0208 	orr.w	r2, r2, #8
 8003006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699a      	ldr	r2, [r3, #24]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0204 	bic.w	r2, r2, #4
 8003016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6999      	ldr	r1, [r3, #24]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	619a      	str	r2, [r3, #24]
      break;
 800302a:	e0a5      	b.n	8003178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	4618      	mov	r0, r3
 8003034:	f000 face 	bl	80035d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6999      	ldr	r1, [r3, #24]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	021a      	lsls	r2, r3, #8
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	619a      	str	r2, [r3, #24]
      break;
 800306c:	e084      	b.n	8003178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	4618      	mov	r0, r3
 8003076:	f000 fb3f 	bl	80036f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	69da      	ldr	r2, [r3, #28]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0208 	orr.w	r2, r2, #8
 8003088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	69da      	ldr	r2, [r3, #28]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0204 	bic.w	r2, r2, #4
 8003098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69d9      	ldr	r1, [r3, #28]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	61da      	str	r2, [r3, #28]
      break;
 80030ac:	e064      	b.n	8003178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fbb1 	bl	800381c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69da      	ldr	r2, [r3, #28]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69d9      	ldr	r1, [r3, #28]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	021a      	lsls	r2, r3, #8
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	61da      	str	r2, [r3, #28]
      break;
 80030ee:	e043      	b.n	8003178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fbfe 	bl	80038f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0208 	orr.w	r2, r2, #8
 800310a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0204 	bic.w	r2, r2, #4
 800311a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800312e:	e023      	b.n	8003178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fc48 	bl	80039cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800314a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800315a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	021a      	lsls	r2, r3, #8
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003170:	e002      	b.n	8003178 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	75fb      	strb	r3, [r7, #23]
      break;
 8003176:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003180:	7dfb      	ldrb	r3, [r7, #23]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop

0800318c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_TIM_ConfigClockSource+0x1c>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e0b6      	b.n	8003316 <HAL_TIM_ConfigClockSource+0x18a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e4:	d03e      	beq.n	8003264 <HAL_TIM_ConfigClockSource+0xd8>
 80031e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ea:	f200 8087 	bhi.w	80032fc <HAL_TIM_ConfigClockSource+0x170>
 80031ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f2:	f000 8086 	beq.w	8003302 <HAL_TIM_ConfigClockSource+0x176>
 80031f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fa:	d87f      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x170>
 80031fc:	2b70      	cmp	r3, #112	; 0x70
 80031fe:	d01a      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0xaa>
 8003200:	2b70      	cmp	r3, #112	; 0x70
 8003202:	d87b      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x170>
 8003204:	2b60      	cmp	r3, #96	; 0x60
 8003206:	d050      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0x11e>
 8003208:	2b60      	cmp	r3, #96	; 0x60
 800320a:	d877      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x170>
 800320c:	2b50      	cmp	r3, #80	; 0x50
 800320e:	d03c      	beq.n	800328a <HAL_TIM_ConfigClockSource+0xfe>
 8003210:	2b50      	cmp	r3, #80	; 0x50
 8003212:	d873      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x170>
 8003214:	2b40      	cmp	r3, #64	; 0x40
 8003216:	d058      	beq.n	80032ca <HAL_TIM_ConfigClockSource+0x13e>
 8003218:	2b40      	cmp	r3, #64	; 0x40
 800321a:	d86f      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x170>
 800321c:	2b30      	cmp	r3, #48	; 0x30
 800321e:	d064      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x15e>
 8003220:	2b30      	cmp	r3, #48	; 0x30
 8003222:	d86b      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x170>
 8003224:	2b20      	cmp	r3, #32
 8003226:	d060      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x15e>
 8003228:	2b20      	cmp	r3, #32
 800322a:	d867      	bhi.n	80032fc <HAL_TIM_ConfigClockSource+0x170>
 800322c:	2b00      	cmp	r3, #0
 800322e:	d05c      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x15e>
 8003230:	2b10      	cmp	r3, #16
 8003232:	d05a      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x15e>
 8003234:	e062      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	6899      	ldr	r1, [r3, #8]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f000 fca2 	bl	8003b8e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003258:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	609a      	str	r2, [r3, #8]
      break;
 8003262:	e04f      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	6899      	ldr	r1, [r3, #8]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f000 fc8b 	bl	8003b8e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003286:	609a      	str	r2, [r3, #8]
      break;
 8003288:	e03c      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6818      	ldr	r0, [r3, #0]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6859      	ldr	r1, [r3, #4]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	461a      	mov	r2, r3
 8003298:	f000 fc02 	bl	8003aa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2150      	movs	r1, #80	; 0x50
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fc59 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 80032a8:	e02c      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6859      	ldr	r1, [r3, #4]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	461a      	mov	r2, r3
 80032b8:	f000 fc20 	bl	8003afc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2160      	movs	r1, #96	; 0x60
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fc49 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 80032c8:	e01c      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6859      	ldr	r1, [r3, #4]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	461a      	mov	r2, r3
 80032d8:	f000 fbe2 	bl	8003aa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2140      	movs	r1, #64	; 0x40
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fc39 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 80032e8:	e00c      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4619      	mov	r1, r3
 80032f4:	4610      	mov	r0, r2
 80032f6:	f000 fc30 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 80032fa:	e003      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003300:	e000      	b.n	8003304 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003302:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003314:	7bfb      	ldrb	r3, [r7, #15]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr

08003342 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
	...

08003368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a41      	ldr	r2, [pc, #260]	; (8003480 <TIM_Base_SetConfig+0x118>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d013      	beq.n	80033a8 <TIM_Base_SetConfig+0x40>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003386:	d00f      	beq.n	80033a8 <TIM_Base_SetConfig+0x40>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a3e      	ldr	r2, [pc, #248]	; (8003484 <TIM_Base_SetConfig+0x11c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00b      	beq.n	80033a8 <TIM_Base_SetConfig+0x40>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a3d      	ldr	r2, [pc, #244]	; (8003488 <TIM_Base_SetConfig+0x120>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d007      	beq.n	80033a8 <TIM_Base_SetConfig+0x40>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a3c      	ldr	r2, [pc, #240]	; (800348c <TIM_Base_SetConfig+0x124>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d003      	beq.n	80033a8 <TIM_Base_SetConfig+0x40>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a3b      	ldr	r2, [pc, #236]	; (8003490 <TIM_Base_SetConfig+0x128>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d108      	bne.n	80033ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a30      	ldr	r2, [pc, #192]	; (8003480 <TIM_Base_SetConfig+0x118>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d01f      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c8:	d01b      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a2d      	ldr	r2, [pc, #180]	; (8003484 <TIM_Base_SetConfig+0x11c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d017      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a2c      	ldr	r2, [pc, #176]	; (8003488 <TIM_Base_SetConfig+0x120>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a2b      	ldr	r2, [pc, #172]	; (800348c <TIM_Base_SetConfig+0x124>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00f      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a2b      	ldr	r2, [pc, #172]	; (8003494 <TIM_Base_SetConfig+0x12c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00b      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a2a      	ldr	r2, [pc, #168]	; (8003498 <TIM_Base_SetConfig+0x130>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d007      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a29      	ldr	r2, [pc, #164]	; (800349c <TIM_Base_SetConfig+0x134>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d003      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a24      	ldr	r2, [pc, #144]	; (8003490 <TIM_Base_SetConfig+0x128>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d108      	bne.n	8003414 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a11      	ldr	r2, [pc, #68]	; (8003480 <TIM_Base_SetConfig+0x118>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d013      	beq.n	8003468 <TIM_Base_SetConfig+0x100>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a12      	ldr	r2, [pc, #72]	; (800348c <TIM_Base_SetConfig+0x124>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00f      	beq.n	8003468 <TIM_Base_SetConfig+0x100>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a12      	ldr	r2, [pc, #72]	; (8003494 <TIM_Base_SetConfig+0x12c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d00b      	beq.n	8003468 <TIM_Base_SetConfig+0x100>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a11      	ldr	r2, [pc, #68]	; (8003498 <TIM_Base_SetConfig+0x130>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d007      	beq.n	8003468 <TIM_Base_SetConfig+0x100>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a10      	ldr	r2, [pc, #64]	; (800349c <TIM_Base_SetConfig+0x134>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d003      	beq.n	8003468 <TIM_Base_SetConfig+0x100>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a0b      	ldr	r2, [pc, #44]	; (8003490 <TIM_Base_SetConfig+0x128>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d103      	bne.n	8003470 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	615a      	str	r2, [r3, #20]
}
 8003476:	bf00      	nop
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr
 8003480:	40012c00 	.word	0x40012c00
 8003484:	40000400 	.word	0x40000400
 8003488:	40000800 	.word	0x40000800
 800348c:	40013400 	.word	0x40013400
 8003490:	40015000 	.word	0x40015000
 8003494:	40014000 	.word	0x40014000
 8003498:	40014400 	.word	0x40014400
 800349c:	40014800 	.word	0x40014800

080034a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	f023 0201 	bic.w	r2, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0303 	bic.w	r3, r3, #3
 80034da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f023 0302 	bic.w	r3, r3, #2
 80034ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a30      	ldr	r2, [pc, #192]	; (80035bc <TIM_OC1_SetConfig+0x11c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d013      	beq.n	8003528 <TIM_OC1_SetConfig+0x88>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a2f      	ldr	r2, [pc, #188]	; (80035c0 <TIM_OC1_SetConfig+0x120>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00f      	beq.n	8003528 <TIM_OC1_SetConfig+0x88>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a2e      	ldr	r2, [pc, #184]	; (80035c4 <TIM_OC1_SetConfig+0x124>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00b      	beq.n	8003528 <TIM_OC1_SetConfig+0x88>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a2d      	ldr	r2, [pc, #180]	; (80035c8 <TIM_OC1_SetConfig+0x128>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d007      	beq.n	8003528 <TIM_OC1_SetConfig+0x88>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a2c      	ldr	r2, [pc, #176]	; (80035cc <TIM_OC1_SetConfig+0x12c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d003      	beq.n	8003528 <TIM_OC1_SetConfig+0x88>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a2b      	ldr	r2, [pc, #172]	; (80035d0 <TIM_OC1_SetConfig+0x130>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d10c      	bne.n	8003542 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f023 0308 	bic.w	r3, r3, #8
 800352e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f023 0304 	bic.w	r3, r3, #4
 8003540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a1d      	ldr	r2, [pc, #116]	; (80035bc <TIM_OC1_SetConfig+0x11c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d013      	beq.n	8003572 <TIM_OC1_SetConfig+0xd2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a1c      	ldr	r2, [pc, #112]	; (80035c0 <TIM_OC1_SetConfig+0x120>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00f      	beq.n	8003572 <TIM_OC1_SetConfig+0xd2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a1b      	ldr	r2, [pc, #108]	; (80035c4 <TIM_OC1_SetConfig+0x124>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d00b      	beq.n	8003572 <TIM_OC1_SetConfig+0xd2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a1a      	ldr	r2, [pc, #104]	; (80035c8 <TIM_OC1_SetConfig+0x128>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d007      	beq.n	8003572 <TIM_OC1_SetConfig+0xd2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a19      	ldr	r2, [pc, #100]	; (80035cc <TIM_OC1_SetConfig+0x12c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d003      	beq.n	8003572 <TIM_OC1_SetConfig+0xd2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a18      	ldr	r2, [pc, #96]	; (80035d0 <TIM_OC1_SetConfig+0x130>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d111      	bne.n	8003596 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	621a      	str	r2, [r3, #32]
}
 80035b0:	bf00      	nop
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40012c00 	.word	0x40012c00
 80035c0:	40013400 	.word	0x40013400
 80035c4:	40014000 	.word	0x40014000
 80035c8:	40014400 	.word	0x40014400
 80035cc:	40014800 	.word	0x40014800
 80035d0:	40015000 	.word	0x40015000

080035d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	f023 0210 	bic.w	r2, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800360e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f023 0320 	bic.w	r3, r3, #32
 8003622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a2b      	ldr	r2, [pc, #172]	; (80036e0 <TIM_OC2_SetConfig+0x10c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d007      	beq.n	8003648 <TIM_OC2_SetConfig+0x74>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a2a      	ldr	r2, [pc, #168]	; (80036e4 <TIM_OC2_SetConfig+0x110>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d003      	beq.n	8003648 <TIM_OC2_SetConfig+0x74>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a29      	ldr	r2, [pc, #164]	; (80036e8 <TIM_OC2_SetConfig+0x114>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d10d      	bne.n	8003664 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800364e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003662:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a1e      	ldr	r2, [pc, #120]	; (80036e0 <TIM_OC2_SetConfig+0x10c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d013      	beq.n	8003694 <TIM_OC2_SetConfig+0xc0>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a1d      	ldr	r2, [pc, #116]	; (80036e4 <TIM_OC2_SetConfig+0x110>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00f      	beq.n	8003694 <TIM_OC2_SetConfig+0xc0>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a1d      	ldr	r2, [pc, #116]	; (80036ec <TIM_OC2_SetConfig+0x118>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00b      	beq.n	8003694 <TIM_OC2_SetConfig+0xc0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <TIM_OC2_SetConfig+0x11c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d007      	beq.n	8003694 <TIM_OC2_SetConfig+0xc0>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a1b      	ldr	r2, [pc, #108]	; (80036f4 <TIM_OC2_SetConfig+0x120>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d003      	beq.n	8003694 <TIM_OC2_SetConfig+0xc0>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a16      	ldr	r2, [pc, #88]	; (80036e8 <TIM_OC2_SetConfig+0x114>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d113      	bne.n	80036bc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800369a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036a2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	621a      	str	r2, [r3, #32]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr
 80036e0:	40012c00 	.word	0x40012c00
 80036e4:	40013400 	.word	0x40013400
 80036e8:	40015000 	.word	0x40015000
 80036ec:	40014000 	.word	0x40014000
 80036f0:	40014400 	.word	0x40014400
 80036f4:	40014800 	.word	0x40014800

080036f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0303 	bic.w	r3, r3, #3
 8003732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a2b      	ldr	r2, [pc, #172]	; (8003804 <TIM_OC3_SetConfig+0x10c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d007      	beq.n	800376a <TIM_OC3_SetConfig+0x72>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a2a      	ldr	r2, [pc, #168]	; (8003808 <TIM_OC3_SetConfig+0x110>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d003      	beq.n	800376a <TIM_OC3_SetConfig+0x72>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a29      	ldr	r2, [pc, #164]	; (800380c <TIM_OC3_SetConfig+0x114>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d10d      	bne.n	8003786 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003770:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003784:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a1e      	ldr	r2, [pc, #120]	; (8003804 <TIM_OC3_SetConfig+0x10c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d013      	beq.n	80037b6 <TIM_OC3_SetConfig+0xbe>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a1d      	ldr	r2, [pc, #116]	; (8003808 <TIM_OC3_SetConfig+0x110>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00f      	beq.n	80037b6 <TIM_OC3_SetConfig+0xbe>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a1d      	ldr	r2, [pc, #116]	; (8003810 <TIM_OC3_SetConfig+0x118>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00b      	beq.n	80037b6 <TIM_OC3_SetConfig+0xbe>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1c      	ldr	r2, [pc, #112]	; (8003814 <TIM_OC3_SetConfig+0x11c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d007      	beq.n	80037b6 <TIM_OC3_SetConfig+0xbe>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <TIM_OC3_SetConfig+0x120>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d003      	beq.n	80037b6 <TIM_OC3_SetConfig+0xbe>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a16      	ldr	r2, [pc, #88]	; (800380c <TIM_OC3_SetConfig+0x114>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d113      	bne.n	80037de <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	621a      	str	r2, [r3, #32]
}
 80037f8:	bf00      	nop
 80037fa:	371c      	adds	r7, #28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40013400 	.word	0x40013400
 800380c:	40015000 	.word	0x40015000
 8003810:	40014000 	.word	0x40014000
 8003814:	40014400 	.word	0x40014400
 8003818:	40014800 	.word	0x40014800

0800381c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800384a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800384e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	021b      	lsls	r3, r3, #8
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4313      	orrs	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800386a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	031b      	lsls	r3, r3, #12
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a19      	ldr	r2, [pc, #100]	; (80038e0 <TIM_OC4_SetConfig+0xc4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d013      	beq.n	80038a8 <TIM_OC4_SetConfig+0x8c>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a18      	ldr	r2, [pc, #96]	; (80038e4 <TIM_OC4_SetConfig+0xc8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00f      	beq.n	80038a8 <TIM_OC4_SetConfig+0x8c>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a17      	ldr	r2, [pc, #92]	; (80038e8 <TIM_OC4_SetConfig+0xcc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00b      	beq.n	80038a8 <TIM_OC4_SetConfig+0x8c>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a16      	ldr	r2, [pc, #88]	; (80038ec <TIM_OC4_SetConfig+0xd0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d007      	beq.n	80038a8 <TIM_OC4_SetConfig+0x8c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a15      	ldr	r2, [pc, #84]	; (80038f0 <TIM_OC4_SetConfig+0xd4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d003      	beq.n	80038a8 <TIM_OC4_SetConfig+0x8c>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a14      	ldr	r2, [pc, #80]	; (80038f4 <TIM_OC4_SetConfig+0xd8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d109      	bne.n	80038bc <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	019b      	lsls	r3, r3, #6
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	621a      	str	r2, [r3, #32]
}
 80038d6:	bf00      	nop
 80038d8:	371c      	adds	r7, #28
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr
 80038e0:	40012c00 	.word	0x40012c00
 80038e4:	40013400 	.word	0x40013400
 80038e8:	40014000 	.word	0x40014000
 80038ec:	40014400 	.word	0x40014400
 80038f0:	40014800 	.word	0x40014800
 80038f4:	40015000 	.word	0x40015000

080038f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800393c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	041b      	lsls	r3, r3, #16
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a19      	ldr	r2, [pc, #100]	; (80039b4 <TIM_OC5_SetConfig+0xbc>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d013      	beq.n	800397a <TIM_OC5_SetConfig+0x82>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a18      	ldr	r2, [pc, #96]	; (80039b8 <TIM_OC5_SetConfig+0xc0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00f      	beq.n	800397a <TIM_OC5_SetConfig+0x82>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a17      	ldr	r2, [pc, #92]	; (80039bc <TIM_OC5_SetConfig+0xc4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00b      	beq.n	800397a <TIM_OC5_SetConfig+0x82>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a16      	ldr	r2, [pc, #88]	; (80039c0 <TIM_OC5_SetConfig+0xc8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d007      	beq.n	800397a <TIM_OC5_SetConfig+0x82>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a15      	ldr	r2, [pc, #84]	; (80039c4 <TIM_OC5_SetConfig+0xcc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d003      	beq.n	800397a <TIM_OC5_SetConfig+0x82>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <TIM_OC5_SetConfig+0xd0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d109      	bne.n	800398e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003980:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	621a      	str	r2, [r3, #32]
}
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40012c00 	.word	0x40012c00
 80039b8:	40013400 	.word	0x40013400
 80039bc:	40014000 	.word	0x40014000
 80039c0:	40014400 	.word	0x40014400
 80039c4:	40014800 	.word	0x40014800
 80039c8:	40015000 	.word	0x40015000

080039cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	021b      	lsls	r3, r3, #8
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	051b      	lsls	r3, r3, #20
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a19      	ldr	r2, [pc, #100]	; (8003a88 <TIM_OC6_SetConfig+0xbc>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d013      	beq.n	8003a50 <TIM_OC6_SetConfig+0x84>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a18      	ldr	r2, [pc, #96]	; (8003a8c <TIM_OC6_SetConfig+0xc0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00f      	beq.n	8003a50 <TIM_OC6_SetConfig+0x84>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a17      	ldr	r2, [pc, #92]	; (8003a90 <TIM_OC6_SetConfig+0xc4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00b      	beq.n	8003a50 <TIM_OC6_SetConfig+0x84>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a16      	ldr	r2, [pc, #88]	; (8003a94 <TIM_OC6_SetConfig+0xc8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d007      	beq.n	8003a50 <TIM_OC6_SetConfig+0x84>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a15      	ldr	r2, [pc, #84]	; (8003a98 <TIM_OC6_SetConfig+0xcc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d003      	beq.n	8003a50 <TIM_OC6_SetConfig+0x84>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <TIM_OC6_SetConfig+0xd0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d109      	bne.n	8003a64 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	029b      	lsls	r3, r3, #10
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	621a      	str	r2, [r3, #32]
}
 8003a7e:	bf00      	nop
 8003a80:	371c      	adds	r7, #28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40013400 	.word	0x40013400
 8003a90:	40014000 	.word	0x40014000
 8003a94:	40014400 	.word	0x40014400
 8003a98:	40014800 	.word	0x40014800
 8003a9c:	40015000 	.word	0x40015000

08003aa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	f023 0201 	bic.w	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f023 030a 	bic.w	r3, r3, #10
 8003adc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	621a      	str	r2, [r3, #32]
}
 8003af2:	bf00      	nop
 8003af4:	371c      	adds	r7, #28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr

08003afc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	f023 0210 	bic.w	r2, r3, #16
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	031b      	lsls	r3, r3, #12
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	621a      	str	r2, [r3, #32]
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr

08003b5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b085      	sub	sp, #20
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f043 0307 	orr.w	r3, r3, #7
 8003b7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	609a      	str	r2, [r3, #8]
}
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr

08003b8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b087      	sub	sp, #28
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ba8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	021a      	lsls	r2, r3, #8
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	609a      	str	r2, [r3, #8]
}
 8003bc2:	bf00      	nop
 8003bc4:	371c      	adds	r7, #28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	2201      	movs	r2, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a1a      	ldr	r2, [r3, #32]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	401a      	ands	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a1a      	ldr	r2, [r3, #32]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	fa01 f303 	lsl.w	r3, r1, r3
 8003c04:	431a      	orrs	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	621a      	str	r2, [r3, #32]
}
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr

08003c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e06d      	b.n	8003d08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a30      	ldr	r2, [pc, #192]	; (8003d14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d009      	beq.n	8003c6a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a2f      	ldr	r2, [pc, #188]	; (8003d18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d004      	beq.n	8003c6a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a2d      	ldr	r2, [pc, #180]	; (8003d1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d108      	bne.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1e      	ldr	r2, [pc, #120]	; (8003d14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d01d      	beq.n	8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca8:	d018      	beq.n	8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1c      	ldr	r2, [pc, #112]	; (8003d20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d013      	beq.n	8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1a      	ldr	r2, [pc, #104]	; (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00e      	beq.n	8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a15      	ldr	r2, [pc, #84]	; (8003d18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d009      	beq.n	8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a16      	ldr	r2, [pc, #88]	; (8003d28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d004      	beq.n	8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a11      	ldr	r2, [pc, #68]	; (8003d1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d10c      	bne.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40012c00 	.word	0x40012c00
 8003d18:	40013400 	.word	0x40013400
 8003d1c:	40015000 	.word	0x40015000
 8003d20:	40000400 	.word	0x40000400
 8003d24:	40000800 	.word	0x40000800
 8003d28:	40014000 	.word	0x40014000

08003d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr

08003d3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr
	...

08003d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e0a7      	b.n	8003ec6 <HAL_I2C_Init+0x162>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d12c      	bne.n	8003ddc <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a50      	ldr	r2, [pc, #320]	; (8003ed0 <HAL_I2C_Init+0x16c>)
 8003d8e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a50      	ldr	r2, [pc, #320]	; (8003ed4 <HAL_I2C_Init+0x170>)
 8003d94:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a4f      	ldr	r2, [pc, #316]	; (8003ed8 <HAL_I2C_Init+0x174>)
 8003d9a:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a4f      	ldr	r2, [pc, #316]	; (8003edc <HAL_I2C_Init+0x178>)
 8003da0:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a4e      	ldr	r2, [pc, #312]	; (8003ee0 <HAL_I2C_Init+0x17c>)
 8003da6:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a4e      	ldr	r2, [pc, #312]	; (8003ee4 <HAL_I2C_Init+0x180>)
 8003dac:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a4d      	ldr	r2, [pc, #308]	; (8003ee8 <HAL_I2C_Init+0x184>)
 8003db2:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a4d      	ldr	r2, [pc, #308]	; (8003eec <HAL_I2C_Init+0x188>)
 8003db8:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a4c      	ldr	r2, [pc, #304]	; (8003ef0 <HAL_I2C_Init+0x18c>)
 8003dbe:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a4c      	ldr	r2, [pc, #304]	; (8003ef4 <HAL_I2C_Init+0x190>)
 8003dc4:	671a      	str	r2, [r3, #112]	; 0x70

    if (hi2c->MspInitCallback == NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d102      	bne.n	8003dd4 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a49      	ldr	r2, [pc, #292]	; (8003ef8 <HAL_I2C_Init+0x194>)
 8003dd2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2224      	movs	r2, #36	; 0x24
 8003de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0201 	bic.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d107      	bne.n	8003e2a <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	e006      	b.n	8003e38 <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d104      	bne.n	8003e4a <HAL_I2C_Init+0xe6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69d9      	ldr	r1, [r3, #28]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1a      	ldr	r2, [r3, #32]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0201 	orr.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	08004121 	.word	0x08004121
 8003ed4:	08004133 	.word	0x08004133
 8003ed8:	08004145 	.word	0x08004145
 8003edc:	08004157 	.word	0x08004157
 8003ee0:	08004183 	.word	0x08004183
 8003ee4:	08008ecd 	.word	0x08008ecd
 8003ee8:	08008eed 	.word	0x08008eed
 8003eec:	08008f0d 	.word	0x08008f0d
 8003ef0:	08004195 	.word	0x08004195
 8003ef4:	08004169 	.word	0x08004169
 8003ef8:	08005b25 	.word	0x08005b25

08003efc <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08a      	sub	sp, #40	; 0x28
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	4608      	mov	r0, r1
 8003f06:	4611      	mov	r1, r2
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	817b      	strh	r3, [r7, #10]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	813b      	strh	r3, [r7, #8]
 8003f12:	4613      	mov	r3, r2
 8003f14:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	f040 80d5 	bne.w	80040ce <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_I2C_Mem_Read_DMA+0x34>
 8003f2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d105      	bne.n	8003f3c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0c9      	b.n	80040d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f4a:	d101      	bne.n	8003f50 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e0bf      	b.n	80040d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_I2C_Mem_Read_DMA+0x62>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e0b8      	b.n	80040d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f66:	f001 fc3b 	bl	80057e0 <HAL_GetTick>
 8003f6a:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2222      	movs	r2, #34	; 0x22
 8003f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2240      	movs	r2, #64	; 0x40
 8003f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4a51      	ldr	r2, [pc, #324]	; (80040d8 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8003f92:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4a51      	ldr	r2, [pc, #324]	; (80040dc <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8003f98:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2bff      	cmp	r3, #255	; 0xff
 8003fa2:	d906      	bls.n	8003fb2 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	22ff      	movs	r2, #255	; 0xff
 8003fa8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003faa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fae:	61fb      	str	r3, [r7, #28]
 8003fb0:	e007      	b.n	8003fc2 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003fbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fc0:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003fc2:	88f8      	ldrh	r0, [r7, #6]
 8003fc4:	893a      	ldrh	r2, [r7, #8]
 8003fc6:	8979      	ldrh	r1, [r7, #10]
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	2319      	movs	r3, #25
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 fbc8 	bl	8004768 <I2C_RequestMemoryRead>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d005      	beq.n	8003fea <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e072      	b.n	80040d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d020      	beq.n	8004034 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff6:	4a3a      	ldr	r2, [pc, #232]	; (80040e0 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8003ff8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffe:	4a39      	ldr	r2, [pc, #228]	; (80040e4 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8004000:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004006:	2200      	movs	r2, #0
 8004008:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferAbortCallback = NULL;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400e:	2200      	movs	r2, #0
 8004010:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3324      	adds	r3, #36	; 0x24
 800401c:	4619      	mov	r1, r3
 800401e:	6aba      	ldr	r2, [r7, #40]	; 0x28
                                       hi2c->XferSize);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004024:	f7fe fa67 	bl	80024f6 <HAL_DMA_Start_IT>
 8004028:	4603      	mov	r3, r0
 800402a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800402c:	7dfb      	ldrb	r3, [r7, #23]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d139      	bne.n	80040a6 <HAL_I2C_Mem_Read_DMA+0x1aa>
 8004032:	e013      	b.n	800405c <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004048:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e039      	b.n	80040d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004060:	b2da      	uxtb	r2, r3
 8004062:	8979      	ldrh	r1, [r7, #10]
 8004064:	4b20      	ldr	r3, [pc, #128]	; (80040e8 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f001 f9b6 	bl	80053dc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800408a:	2110      	movs	r1, #16
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f001 f9d1 	bl	8005434 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040a0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	e014      	b.n	80040d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ba:	f043 0210 	orr.w	r2, r3, #16
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 80040ce:	2302      	movs	r3, #2
  }
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3720      	adds	r7, #32
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	ffff0000 	.word	0xffff0000
 80040dc:	080043c3 	.word	0x080043c3
 80040e0:	080050f1 	.word	0x080050f1
 80040e4:	08005187 	.word	0x08005187
 80040e8:	80002400 	.word	0x80002400

080040ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	68f9      	ldr	r1, [r7, #12]
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	4798      	blx	r3
  }
}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr

08004156 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr

08004168 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	70fb      	strb	r3, [r7, #3]
 8004174:	4613      	mov	r3, r2
 8004176:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr

080041a6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <I2C_Slave_ISR_IT+0x24>
 80041dc:	2302      	movs	r3, #2
 80041de:	e0ec      	b.n	80043ba <I2C_Slave_ISR_IT+0x1fe>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	095b      	lsrs	r3, r3, #5
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d009      	beq.n	8004208 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004200:	6939      	ldr	r1, [r7, #16]
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 fcf6 	bl	8004bf4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	091b      	lsrs	r3, r3, #4
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d04d      	beq.n	80042b0 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	091b      	lsrs	r3, r3, #4
 8004218:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800421c:	2b00      	cmp	r3, #0
 800421e:	d047      	beq.n	80042b0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d128      	bne.n	800427c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b28      	cmp	r3, #40	; 0x28
 8004234:	d108      	bne.n	8004248 <I2C_Slave_ISR_IT+0x8c>
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800423c:	d104      	bne.n	8004248 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800423e:	6939      	ldr	r1, [r7, #16]
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 fde3 	bl	8004e0c <I2C_ITListenCplt>
 8004246:	e032      	b.n	80042ae <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b29      	cmp	r3, #41	; 0x29
 8004252:	d10e      	bne.n	8004272 <I2C_Slave_ISR_IT+0xb6>
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800425a:	d00a      	beq.n	8004272 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2210      	movs	r2, #16
 8004262:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 ff20 	bl	80050aa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 fb93 	bl	8004996 <I2C_ITSlaveSeqCplt>
 8004270:	e01d      	b.n	80042ae <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2210      	movs	r2, #16
 8004278:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800427a:	e096      	b.n	80043aa <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2210      	movs	r2, #16
 8004282:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004288:	f043 0204 	orr.w	r2, r3, #4
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d004      	beq.n	80042a0 <I2C_Slave_ISR_IT+0xe4>
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800429c:	f040 8085 	bne.w	80043aa <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a4:	4619      	mov	r1, r3
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 fe06 	bl	8004eb8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80042ac:	e07d      	b.n	80043aa <I2C_Slave_ISR_IT+0x1ee>
 80042ae:	e07c      	b.n	80043aa <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	089b      	lsrs	r3, r3, #2
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d030      	beq.n	800431e <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	089b      	lsrs	r3, r3, #2
 80042c0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d02a      	beq.n	800431e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d018      	beq.n	8004304 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d14f      	bne.n	80043ae <I2C_Slave_ISR_IT+0x1f2>
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004314:	d04b      	beq.n	80043ae <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 fb3d 	bl	8004996 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800431c:	e047      	b.n	80043ae <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	08db      	lsrs	r3, r3, #3
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	08db      	lsrs	r3, r3, #3
 800432e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004332:	2b00      	cmp	r3, #0
 8004334:	d004      	beq.n	8004340 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004336:	6939      	ldr	r1, [r7, #16]
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 fa69 	bl	8004810 <I2C_ITAddrCplt>
 800433e:	e037      	b.n	80043b0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	085b      	lsrs	r3, r3, #1
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d031      	beq.n	80043b0 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	085b      	lsrs	r3, r3, #1
 8004350:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004354:	2b00      	cmp	r3, #0
 8004356:	d02b      	beq.n	80043b0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d018      	beq.n	8004394 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	781a      	ldrb	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	851a      	strh	r2, [r3, #40]	; 0x28
 8004392:	e00d      	b.n	80043b0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800439a:	d002      	beq.n	80043a2 <I2C_Slave_ISR_IT+0x1e6>
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 faf7 	bl	8004996 <I2C_ITSlaveSeqCplt>
 80043a8:	e002      	b.n	80043b0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80043aa:	bf00      	nop
 80043ac:	e000      	b.n	80043b0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80043ae:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b088      	sub	sp, #32
 80043c6:	af02      	add	r7, sp, #8
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <I2C_Master_ISR_DMA+0x1a>
 80043d8:	2302      	movs	r3, #2
 80043da:	e0e1      	b.n	80045a0 <I2C_Master_ISR_DMA+0x1de>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	091b      	lsrs	r3, r3, #4
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d017      	beq.n	8004420 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	091b      	lsrs	r3, r3, #4
 80043f4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d011      	beq.n	8004420 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2210      	movs	r2, #16
 8004402:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004408:	f043 0204 	orr.w	r2, r3, #4
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004410:	2120      	movs	r1, #32
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f001 f80e 	bl	8005434 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 fe46 	bl	80050aa <I2C_Flush_TXDR>
 800441e:	e0ba      	b.n	8004596 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	09db      	lsrs	r3, r3, #7
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d072      	beq.n	8004512 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	099b      	lsrs	r3, r3, #6
 8004430:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004434:	2b00      	cmp	r3, #0
 8004436:	d06c      	beq.n	8004512 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004446:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d04e      	beq.n	80044f0 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	b29b      	uxth	r3, r3
 800445a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800445e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	2bff      	cmp	r3, #255	; 0xff
 8004468:	d906      	bls.n	8004478 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	22ff      	movs	r2, #255	; 0xff
 800446e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8004470:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	e010      	b.n	800449a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800448a:	d003      	beq.n	8004494 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	e002      	b.n	800449a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004494:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004498:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	8a79      	ldrh	r1, [r7, #18]
 80044a2:	2300      	movs	r3, #0
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 ff97 	bl	80053dc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b22      	cmp	r3, #34	; 0x22
 80044ca:	d108      	bne.n	80044de <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044da:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80044dc:	e05b      	b.n	8004596 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044ec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80044ee:	e052      	b.n	8004596 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044fe:	d003      	beq.n	8004508 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 fa09 	bl	8004918 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004506:	e046      	b.n	8004596 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004508:	2140      	movs	r1, #64	; 0x40
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fcd4 	bl	8004eb8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004510:	e041      	b.n	8004596 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	099b      	lsrs	r3, r3, #6
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d029      	beq.n	8004572 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	099b      	lsrs	r3, r3, #6
 8004522:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004526:	2b00      	cmp	r3, #0
 8004528:	d023      	beq.n	8004572 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d119      	bne.n	8004568 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004542:	d027      	beq.n	8004594 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800454c:	d108      	bne.n	8004560 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800455c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800455e:	e019      	b.n	8004594 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 f9d9 	bl	8004918 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004566:	e015      	b.n	8004594 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004568:	2140      	movs	r1, #64	; 0x40
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 fca4 	bl	8004eb8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004570:	e010      	b.n	8004594 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	095b      	lsrs	r3, r3, #5
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00b      	beq.n	8004596 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004586:	2b00      	cmp	r3, #0
 8004588:	d005      	beq.n	8004596 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800458a:	68b9      	ldr	r1, [r7, #8]
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 fa63 	bl	8004a58 <I2C_ITMasterCplt>
 8004592:	e000      	b.n	8004596 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004594:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <I2C_Slave_ISR_DMA+0x24>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e0c9      	b.n	8004760 <I2C_Slave_ISR_DMA+0x1b8>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	095b      	lsrs	r3, r3, #5
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d009      	beq.n	80045f4 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 fb00 	bl	8004bf4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	091b      	lsrs	r3, r3, #4
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 809a 	beq.w	8004736 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	091b      	lsrs	r3, r3, #4
 8004606:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8093 	beq.w	8004736 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	0b9b      	lsrs	r3, r3, #14
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d105      	bne.n	8004628 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	0bdb      	lsrs	r3, r3, #15
 8004620:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004624:	2b00      	cmp	r3, #0
 8004626:	d07f      	beq.n	8004728 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00d      	beq.n	800464c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	0bdb      	lsrs	r3, r3, #15
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d007      	beq.n	800464c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8004648:	2301      	movs	r3, #1
 800464a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00d      	beq.n	8004670 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	0b9b      	lsrs	r3, r3, #14
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d007      	beq.n	8004670 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800466c:	2301      	movs	r3, #1
 800466e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d128      	bne.n	80046c8 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b28      	cmp	r3, #40	; 0x28
 8004680:	d108      	bne.n	8004694 <I2C_Slave_ISR_DMA+0xec>
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004688:	d104      	bne.n	8004694 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800468a:	68b9      	ldr	r1, [r7, #8]
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 fbbd 	bl	8004e0c <I2C_ITListenCplt>
 8004692:	e048      	b.n	8004726 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b29      	cmp	r3, #41	; 0x29
 800469e:	d10e      	bne.n	80046be <I2C_Slave_ISR_DMA+0x116>
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046a6:	d00a      	beq.n	80046be <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2210      	movs	r2, #16
 80046ae:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fcfa 	bl	80050aa <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 f96d 	bl	8004996 <I2C_ITSlaveSeqCplt>
 80046bc:	e033      	b.n	8004726 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2210      	movs	r2, #16
 80046c4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80046c6:	e034      	b.n	8004732 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2210      	movs	r2, #16
 80046ce:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d4:	f043 0204 	orr.w	r2, r3, #4
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046e2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <I2C_Slave_ISR_DMA+0x14a>
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046f0:	d11f      	bne.n	8004732 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046f2:	7dfb      	ldrb	r3, [r7, #23]
 80046f4:	2b21      	cmp	r3, #33	; 0x21
 80046f6:	d002      	beq.n	80046fe <I2C_Slave_ISR_DMA+0x156>
 80046f8:	7dfb      	ldrb	r3, [r7, #23]
 80046fa:	2b29      	cmp	r3, #41	; 0x29
 80046fc:	d103      	bne.n	8004706 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2221      	movs	r2, #33	; 0x21
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
 8004704:	e008      	b.n	8004718 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004706:	7dfb      	ldrb	r3, [r7, #23]
 8004708:	2b22      	cmp	r3, #34	; 0x22
 800470a:	d002      	beq.n	8004712 <I2C_Slave_ISR_DMA+0x16a>
 800470c:	7dfb      	ldrb	r3, [r7, #23]
 800470e:	2b2a      	cmp	r3, #42	; 0x2a
 8004710:	d102      	bne.n	8004718 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2222      	movs	r2, #34	; 0x22
 8004716:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471c:	4619      	mov	r1, r3
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 fbca 	bl	8004eb8 <I2C_ITError>
      if (treatdmanack == 1U)
 8004724:	e005      	b.n	8004732 <I2C_Slave_ISR_DMA+0x18a>
 8004726:	e004      	b.n	8004732 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2210      	movs	r2, #16
 800472e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004730:	e011      	b.n	8004756 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8004732:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004734:	e00f      	b.n	8004756 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	08db      	lsrs	r3, r3, #3
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d009      	beq.n	8004756 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	08db      	lsrs	r3, r3, #3
 8004746:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800474e:	68b9      	ldr	r1, [r7, #8]
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f85d 	bl	8004810 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3720      	adds	r7, #32
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af02      	add	r7, sp, #8
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	4608      	mov	r0, r1
 8004772:	4611      	mov	r1, r2
 8004774:	461a      	mov	r2, r3
 8004776:	4603      	mov	r3, r0
 8004778:	817b      	strh	r3, [r7, #10]
 800477a:	460b      	mov	r3, r1
 800477c:	813b      	strh	r3, [r7, #8]
 800477e:	4613      	mov	r3, r2
 8004780:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	b2da      	uxtb	r2, r3
 8004786:	8979      	ldrh	r1, [r7, #10]
 8004788:	4b20      	ldr	r3, [pc, #128]	; (800480c <I2C_RequestMemoryRead+0xa4>)
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	2300      	movs	r3, #0
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 fe24 	bl	80053dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	69b9      	ldr	r1, [r7, #24]
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fd69 	bl	8005270 <I2C_WaitOnTXISFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e02c      	b.n	8004802 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047a8:	88fb      	ldrh	r3, [r7, #6]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d105      	bne.n	80047ba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047ae:	893b      	ldrh	r3, [r7, #8]
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	629a      	str	r2, [r3, #40]	; 0x28
 80047b8:	e015      	b.n	80047e6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047ba:	893b      	ldrh	r3, [r7, #8]
 80047bc:	0a1b      	lsrs	r3, r3, #8
 80047be:	b29b      	uxth	r3, r3
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	69b9      	ldr	r1, [r7, #24]
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 fd4f 	bl	8005270 <I2C_WaitOnTXISFlagUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e012      	b.n	8004802 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047dc:	893b      	ldrh	r3, [r7, #8]
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2200      	movs	r2, #0
 80047ee:	2140      	movs	r1, #64	; 0x40
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 fcfd 	bl	80051f0 <I2C_WaitOnFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	80002000 	.word	0x80002000

08004810 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004820:	b2db      	uxtb	r3, r3
 8004822:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004826:	2b28      	cmp	r3, #40	; 0x28
 8004828:	d16a      	bne.n	8004900 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	0c1b      	lsrs	r3, r3, #16
 8004832:	b2db      	uxtb	r3, r3
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	0c1b      	lsrs	r3, r3, #16
 8004842:	b29b      	uxth	r3, r3
 8004844:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004848:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	b29b      	uxth	r3, r3
 8004852:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004856:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	b29b      	uxth	r3, r3
 8004860:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004864:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d138      	bne.n	80048e0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800486e:	897b      	ldrh	r3, [r7, #10]
 8004870:	09db      	lsrs	r3, r3, #7
 8004872:	b29a      	uxth	r2, r3
 8004874:	89bb      	ldrh	r3, [r7, #12]
 8004876:	4053      	eors	r3, r2
 8004878:	b29b      	uxth	r3, r3
 800487a:	f003 0306 	and.w	r3, r3, #6
 800487e:	2b00      	cmp	r3, #0
 8004880:	d11c      	bne.n	80048bc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004882:	897b      	ldrh	r3, [r7, #10]
 8004884:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004894:	2b02      	cmp	r3, #2
 8004896:	d13b      	bne.n	8004910 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2208      	movs	r2, #8
 80048a4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b2:	89ba      	ldrh	r2, [r7, #12]
 80048b4:	7bf9      	ldrb	r1, [r7, #15]
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80048ba:	e029      	b.n	8004910 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80048bc:	893b      	ldrh	r3, [r7, #8]
 80048be:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80048c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fe17 	bl	80054f8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d6:	89ba      	ldrh	r2, [r7, #12]
 80048d8:	7bf9      	ldrb	r1, [r7, #15]
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	4798      	blx	r3
}
 80048de:	e017      	b.n	8004910 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80048e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fe07 	bl	80054f8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f6:	89ba      	ldrh	r2, [r7, #12]
 80048f8:	7bf9      	ldrb	r1, [r7, #15]
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	4798      	blx	r3
}
 80048fe:	e007      	b.n	8004910 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2208      	movs	r2, #8
 8004906:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004910:	bf00      	nop
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b21      	cmp	r3, #33	; 0x21
 8004932:	d116      	bne.n	8004962 <I2C_ITMasterSeqCplt+0x4a>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2211      	movs	r2, #17
 8004940:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004948:	2101      	movs	r1, #1
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fdd4 	bl	80054f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	4798      	blx	r3
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004960:	e015      	b.n	800498e <I2C_ITMasterSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2212      	movs	r2, #18
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004976:	2102      	movs	r1, #2
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fdbd 	bl	80054f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->MasterRxCpltCallback(hi2c);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	4798      	blx	r3
}
 800498e:	bf00      	nop
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b084      	sub	sp, #16
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	0b9b      	lsrs	r3, r3, #14
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d008      	beq.n	80049cc <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	e00d      	b.n	80049e8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	0bdb      	lsrs	r3, r3, #15
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d007      	beq.n	80049e8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049e6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b29      	cmp	r3, #41	; 0x29
 80049f2:	d113      	bne.n	8004a1c <I2C_ITSlaveSeqCplt+0x86>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2228      	movs	r2, #40	; 0x28
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2221      	movs	r2, #33	; 0x21
 8004a00:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a02:	2101      	movs	r1, #1
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fd77 	bl	80054f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a1a:	e018      	b.n	8004a4e <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b2a      	cmp	r3, #42	; 0x2a
 8004a26:	d112      	bne.n	8004a4e <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2228      	movs	r2, #40	; 0x28
 8004a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2222      	movs	r2, #34	; 0x22
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a36:	2102      	movs	r1, #2
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 fd5d 	bl	80054f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	4798      	blx	r3
}
 8004a4e:	bf00      	nop
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b21      	cmp	r3, #33	; 0x21
 8004a78:	d107      	bne.n	8004a8a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fd3b 	bl	80054f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2211      	movs	r2, #17
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
 8004a88:	e00c      	b.n	8004aa4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b22      	cmp	r3, #34	; 0x22
 8004a94:	d106      	bne.n	8004aa4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a96:	2102      	movs	r1, #2
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fd2d 	bl	80054f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2212      	movs	r2, #18
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6859      	ldr	r1, [r3, #4]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4b4f      	ldr	r3, [pc, #316]	; (8004bec <I2C_ITMasterCplt+0x194>)
 8004ab0:	400b      	ands	r3, r1
 8004ab2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a4c      	ldr	r2, [pc, #304]	; (8004bf0 <I2C_ITMasterCplt+0x198>)
 8004abe:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	091b      	lsrs	r3, r3, #4
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d009      	beq.n	8004ae0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2210      	movs	r2, #16
 8004ad2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad8:	f043 0204 	orr.w	r2, r3, #4
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b60      	cmp	r3, #96	; 0x60
 8004aea:	d10b      	bne.n	8004b04 <I2C_ITMasterCplt+0xac>
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	089b      	lsrs	r3, r3, #2
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004b02:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fad0 	bl	80050aa <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b60      	cmp	r3, #96	; 0x60
 8004b1a:	d002      	beq.n	8004b22 <I2C_ITMasterCplt+0xca>
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d006      	beq.n	8004b30 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b26:	4619      	mov	r1, r3
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f9c5 	bl	8004eb8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b2e:	e058      	b.n	8004be2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b21      	cmp	r3, #33	; 0x21
 8004b3a:	d126      	bne.n	8004b8a <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b40      	cmp	r3, #64	; 0x40
 8004b54:	d10c      	bne.n	8004b70 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemTxCpltCallback(hi2c);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	4798      	blx	r3
}
 8004b6e:	e038      	b.n	8004be2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterTxCpltCallback(hi2c);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	4798      	blx	r3
}
 8004b88:	e02b      	b.n	8004be2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b22      	cmp	r3, #34	; 0x22
 8004b94:	d125      	bne.n	8004be2 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b40      	cmp	r3, #64	; 0x40
 8004bae:	d10c      	bne.n	8004bca <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemRxCpltCallback(hi2c);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	4798      	blx	r3
}
 8004bc8:	e00b      	b.n	8004be2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterRxCpltCallback(hi2c);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	4798      	blx	r3
}
 8004be2:	bf00      	nop
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	fe00e800 	.word	0xfe00e800
 8004bf0:	ffff0000 	.word	0xffff0000

08004bf4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c10:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2220      	movs	r2, #32
 8004c18:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
 8004c1c:	2b21      	cmp	r3, #33	; 0x21
 8004c1e:	d002      	beq.n	8004c26 <I2C_ITSlaveCplt+0x32>
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	2b29      	cmp	r3, #41	; 0x29
 8004c24:	d108      	bne.n	8004c38 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004c26:	f248 0101 	movw	r1, #32769	; 0x8001
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fc64 	bl	80054f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2221      	movs	r2, #33	; 0x21
 8004c34:	631a      	str	r2, [r3, #48]	; 0x30
 8004c36:	e00d      	b.n	8004c54 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	2b22      	cmp	r3, #34	; 0x22
 8004c3c:	d002      	beq.n	8004c44 <I2C_ITSlaveCplt+0x50>
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
 8004c40:	2b2a      	cmp	r3, #42	; 0x2a
 8004c42:	d107      	bne.n	8004c54 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004c44:	f248 0102 	movw	r1, #32770	; 0x8002
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fc55 	bl	80054f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2222      	movs	r2, #34	; 0x22
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c62:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6859      	ldr	r1, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	4b65      	ldr	r3, [pc, #404]	; (8004e04 <I2C_ITSlaveCplt+0x210>)
 8004c70:	400b      	ands	r3, r1
 8004c72:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fa18 	bl	80050aa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	0b9b      	lsrs	r3, r3, #14
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d013      	beq.n	8004cae <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c94:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d020      	beq.n	8004ce0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cac:	e018      	b.n	8004ce0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	0bdb      	lsrs	r3, r3, #15
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d012      	beq.n	8004ce0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cc8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d006      	beq.n	8004ce0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	089b      	lsrs	r3, r3, #2
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d020      	beq.n	8004d2e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f023 0304 	bic.w	r3, r3, #4
 8004cf2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00c      	beq.n	8004d2e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3c:	f043 0204 	orr.w	r2, r3, #4
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d010      	beq.n	8004d7c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5e:	4619      	mov	r1, r3
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f8a9 	bl	8004eb8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b28      	cmp	r3, #40	; 0x28
 8004d70:	d144      	bne.n	8004dfc <I2C_ITSlaveCplt+0x208>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004d72:	6979      	ldr	r1, [r7, #20]
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f849 	bl	8004e0c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d7a:	e03f      	b.n	8004dfc <I2C_ITSlaveCplt+0x208>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d84:	d015      	beq.n	8004db2 <I2C_ITSlaveCplt+0x1be>
    I2C_ITSlaveSeqCplt(hi2c);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff fe05 	bl	8004996 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a1e      	ldr	r2, [pc, #120]	; (8004e08 <I2C_ITSlaveCplt+0x214>)
 8004d90:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ListenCpltCallback(hi2c);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	4798      	blx	r3
}
 8004db0:	e024      	b.n	8004dfc <I2C_ITSlaveCplt+0x208>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b22      	cmp	r3, #34	; 0x22
 8004dbc:	d10f      	bne.n	8004dde <I2C_ITSlaveCplt+0x1ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	4798      	blx	r3
}
 8004ddc:	e00e      	b.n	8004dfc <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	4798      	blx	r3
}
 8004dfc:	bf00      	nop
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	fe00e800 	.word	0xfe00e800
 8004e08:	ffff0000 	.word	0xffff0000

08004e0c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a26      	ldr	r2, [pc, #152]	; (8004eb4 <I2C_ITListenCplt+0xa8>)
 8004e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	089b      	lsrs	r3, r3, #2
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d022      	beq.n	8004e8a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d012      	beq.n	8004e8a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e82:	f043 0204 	orr.w	r2, r3, #4
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e8a:	f248 0103 	movw	r1, #32771	; 0x8003
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fb32 	bl	80054f8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2210      	movs	r2, #16
 8004e9a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	ffff0000 	.word	0xffff0000

08004eb8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a5d      	ldr	r2, [pc, #372]	; (800504c <I2C_ITError+0x194>)
 8004ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	2b28      	cmp	r3, #40	; 0x28
 8004eee:	d005      	beq.n	8004efc <I2C_ITError+0x44>
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	2b29      	cmp	r3, #41	; 0x29
 8004ef4:	d002      	beq.n	8004efc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
 8004ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8004efa:	d10b      	bne.n	8004f14 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004efc:	2103      	movs	r1, #3
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fafa 	bl	80054f8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2228      	movs	r2, #40	; 0x28
 8004f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a50      	ldr	r2, [pc, #320]	; (8005050 <I2C_ITError+0x198>)
 8004f10:	635a      	str	r2, [r3, #52]	; 0x34
 8004f12:	e011      	b.n	8004f38 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f14:	f248 0103 	movw	r1, #32771	; 0x8003
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 faed 	bl	80054f8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b60      	cmp	r3, #96	; 0x60
 8004f28:	d003      	beq.n	8004f32 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d039      	beq.n	8004fba <I2C_ITError+0x102>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b11      	cmp	r3, #17
 8004f4a:	d002      	beq.n	8004f52 <I2C_ITError+0x9a>
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b21      	cmp	r3, #33	; 0x21
 8004f50:	d133      	bne.n	8004fba <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f60:	d107      	bne.n	8004f72 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f70:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fd fc35 	bl	80027e6 <HAL_DMA_GetState>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d017      	beq.n	8004fb2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f86:	4a33      	ldr	r2, [pc, #204]	; (8005054 <I2C_ITError+0x19c>)
 8004f88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fd fb44 	bl	8002624 <HAL_DMA_Abort_IT>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d04d      	beq.n	800503e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fac:	4610      	mov	r0, r2
 8004fae:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004fb0:	e045      	b.n	800503e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f850 	bl	8005058 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004fb8:	e041      	b.n	800503e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d039      	beq.n	8005036 <I2C_ITError+0x17e>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b12      	cmp	r3, #18
 8004fc6:	d002      	beq.n	8004fce <I2C_ITError+0x116>
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2b22      	cmp	r3, #34	; 0x22
 8004fcc:	d133      	bne.n	8005036 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fdc:	d107      	bne.n	8004fee <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fec:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fd fbf7 	bl	80027e6 <HAL_DMA_GetState>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d017      	beq.n	800502e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005002:	4a14      	ldr	r2, [pc, #80]	; (8005054 <I2C_ITError+0x19c>)
 8005004:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005012:	4618      	mov	r0, r3
 8005014:	f7fd fb06 	bl	8002624 <HAL_DMA_Abort_IT>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d011      	beq.n	8005042 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005028:	4610      	mov	r0, r2
 800502a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800502c:	e009      	b.n	8005042 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f812 	bl	8005058 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005034:	e005      	b.n	8005042 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f80e 	bl	8005058 <I2C_TreatErrorCallback>
  }
}
 800503c:	e002      	b.n	8005044 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800503e:	bf00      	nop
 8005040:	e000      	b.n	8005044 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005042:	bf00      	nop
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	ffff0000 	.word	0xffff0000
 8005050:	080041bd 	.word	0x080041bd
 8005054:	080051b5 	.word	0x080051b5

08005058 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b60      	cmp	r3, #96	; 0x60
 800506a:	d10f      	bne.n	800508c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800508a:	e00a      	b.n	80050a2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	4798      	blx	r3
}
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d103      	bne.n	80050c8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2200      	movs	r2, #0
 80050c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d007      	beq.n	80050e6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699a      	ldr	r2, [r3, #24]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0201 	orr.w	r2, r2, #1
 80050e4:	619a      	str	r2, [r3, #24]
  }
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bc80      	pop	{r7}
 80050ee:	4770      	bx	lr

080050f0 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800510c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005112:	b29b      	uxth	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d104      	bne.n	8005122 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005118:	2120      	movs	r1, #32
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 f98a 	bl	8005434 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005120:	e02d      	b.n	800517e <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800512a:	441a      	add	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005134:	b29b      	uxth	r3, r3
 8005136:	2bff      	cmp	r3, #255	; 0xff
 8005138:	d903      	bls.n	8005142 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	22ff      	movs	r2, #255	; 0xff
 800513e:	851a      	strh	r2, [r3, #40]	; 0x28
 8005140:	e004      	b.n	800514c <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3324      	adds	r3, #36	; 0x24
 8005156:	4619      	mov	r1, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005162:	f7fd f9c8 	bl	80024f6 <HAL_DMA_Start_IT>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d004      	beq.n	8005176 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800516c:	2110      	movs	r1, #16
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f7ff fea2 	bl	8004eb8 <I2C_ITError>
}
 8005174:	e003      	b.n	800517e <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005176:	2140      	movs	r1, #64	; 0x40
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f95b 	bl	8005434 <I2C_Enable_IRQ>
}
 800517e:	bf00      	nop
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051a2:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80051a4:	2110      	movs	r1, #16
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f7ff fe86 	bl	8004eb8 <I2C_ITError>
}
 80051ac:	bf00      	nop
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	2200      	movs	r2, #0
 80051d0:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051de:	2200      	movs	r2, #0
 80051e0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f7ff ff38 	bl	8005058 <I2C_TreatErrorCallback>
}
 80051e8:	bf00      	nop
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	603b      	str	r3, [r7, #0]
 80051fc:	4613      	mov	r3, r2
 80051fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005200:	e022      	b.n	8005248 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005208:	d01e      	beq.n	8005248 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520a:	f000 fae9 	bl	80057e0 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d302      	bcc.n	8005220 <I2C_WaitOnFlagUntilTimeout+0x30>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d113      	bne.n	8005248 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005224:	f043 0220 	orr.w	r2, r3, #32
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e00f      	b.n	8005268 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	4013      	ands	r3, r2
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	429a      	cmp	r2, r3
 8005256:	bf0c      	ite	eq
 8005258:	2301      	moveq	r3, #1
 800525a:	2300      	movne	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	461a      	mov	r2, r3
 8005260:	79fb      	ldrb	r3, [r7, #7]
 8005262:	429a      	cmp	r2, r3
 8005264:	d0cd      	beq.n	8005202 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800527c:	e02c      	b.n	80052d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	68b9      	ldr	r1, [r7, #8]
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 f834 	bl	80052f0 <I2C_IsAcknowledgeFailed>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e02a      	b.n	80052e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005298:	d01e      	beq.n	80052d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800529a:	f000 faa1 	bl	80057e0 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d302      	bcc.n	80052b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d113      	bne.n	80052d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b4:	f043 0220 	orr.w	r2, r3, #32
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e007      	b.n	80052e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d1cb      	bne.n	800527e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	f003 0310 	and.w	r3, r3, #16
 8005306:	2b10      	cmp	r3, #16
 8005308:	d161      	bne.n	80053ce <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005314:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005318:	d02b      	beq.n	8005372 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005328:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800532a:	e022      	b.n	8005372 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005332:	d01e      	beq.n	8005372 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005334:	f000 fa54 	bl	80057e0 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	429a      	cmp	r2, r3
 8005342:	d302      	bcc.n	800534a <I2C_IsAcknowledgeFailed+0x5a>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d113      	bne.n	8005372 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534e:	f043 0220 	orr.w	r2, r3, #32
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e02e      	b.n	80053d0 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b20      	cmp	r3, #32
 800537e:	d1d5      	bne.n	800532c <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2210      	movs	r2, #16
 8005386:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2220      	movs	r2, #32
 800538e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f7ff fe8a 	bl	80050aa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6859      	ldr	r1, [r3, #4]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	4b0d      	ldr	r3, [pc, #52]	; (80053d8 <I2C_IsAcknowledgeFailed+0xe8>)
 80053a2:	400b      	ands	r3, r1
 80053a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053aa:	f043 0204 	orr.w	r2, r3, #4
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e000      	b.n	80053d0 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	fe00e800 	.word	0xfe00e800

080053dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	607b      	str	r3, [r7, #4]
 80053e6:	460b      	mov	r3, r1
 80053e8:	817b      	strh	r3, [r7, #10]
 80053ea:	4613      	mov	r3, r2
 80053ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	0d5b      	lsrs	r3, r3, #21
 80053f8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80053fc:	4b0c      	ldr	r3, [pc, #48]	; (8005430 <I2C_TransferConfig+0x54>)
 80053fe:	430b      	orrs	r3, r1
 8005400:	43db      	mvns	r3, r3
 8005402:	ea02 0103 	and.w	r1, r2, r3
 8005406:	897b      	ldrh	r3, [r7, #10]
 8005408:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800540c:	7a7b      	ldrb	r3, [r7, #9]
 800540e:	041b      	lsls	r3, r3, #16
 8005410:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	431a      	orrs	r2, r3
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	431a      	orrs	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005426:	bf00      	nop
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr
 8005430:	03ff63ff 	.word	0x03ff63ff

08005434 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005448:	4a29      	ldr	r2, [pc, #164]	; (80054f0 <I2C_Enable_IRQ+0xbc>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d004      	beq.n	8005458 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005452:	4a28      	ldr	r2, [pc, #160]	; (80054f4 <I2C_Enable_IRQ+0xc0>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d11d      	bne.n	8005494 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005458:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800545c:	2b00      	cmp	r3, #0
 800545e:	da03      	bge.n	8005468 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005466:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005468:	887b      	ldrh	r3, [r7, #2]
 800546a:	2b10      	cmp	r3, #16
 800546c:	d103      	bne.n	8005476 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005474:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005476:	887b      	ldrh	r3, [r7, #2]
 8005478:	2b20      	cmp	r3, #32
 800547a:	d103      	bne.n	8005484 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005482:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005484:	887b      	ldrh	r3, [r7, #2]
 8005486:	2b40      	cmp	r3, #64	; 0x40
 8005488:	d125      	bne.n	80054d6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005490:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005492:	e020      	b.n	80054d6 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005494:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005498:	2b00      	cmp	r3, #0
 800549a:	da03      	bge.n	80054a4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80054a2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80054a4:	887b      	ldrh	r3, [r7, #2]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80054b4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80054b6:	887b      	ldrh	r3, [r7, #2]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80054c6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80054c8:	887b      	ldrh	r3, [r7, #2]
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	d103      	bne.n	80054d6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f043 0320 	orr.w	r3, r3, #32
 80054d4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6819      	ldr	r1, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	601a      	str	r2, [r3, #0]
}
 80054e6:	bf00      	nop
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr
 80054f0:	080043c3 	.word	0x080043c3
 80054f4:	080045a9 	.word	0x080045a9

080054f8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005508:	887b      	ldrh	r3, [r7, #2]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00f      	beq.n	8005532 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005518:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005520:	b2db      	uxtb	r3, r3
 8005522:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005526:	2b28      	cmp	r3, #40	; 0x28
 8005528:	d003      	beq.n	8005532 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005530:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005532:	887b      	ldrh	r3, [r7, #2]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00f      	beq.n	800555c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005542:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800554a:	b2db      	uxtb	r3, r3
 800554c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005550:	2b28      	cmp	r3, #40	; 0x28
 8005552:	d003      	beq.n	800555c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800555a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800555c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005560:	2b00      	cmp	r3, #0
 8005562:	da03      	bge.n	800556c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800556a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800556c:	887b      	ldrh	r3, [r7, #2]
 800556e:	2b10      	cmp	r3, #16
 8005570:	d103      	bne.n	800557a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005578:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800557a:	887b      	ldrh	r3, [r7, #2]
 800557c:	2b20      	cmp	r3, #32
 800557e:	d103      	bne.n	8005588 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f043 0320 	orr.w	r3, r3, #32
 8005586:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005588:	887b      	ldrh	r3, [r7, #2]
 800558a:	2b40      	cmp	r3, #64	; 0x40
 800558c:	d103      	bne.n	8005596 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005594:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6819      	ldr	r1, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	43da      	mvns	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	400a      	ands	r2, r1
 80055a6:	601a      	str	r2, [r3, #0]
}
 80055a8:	bf00      	nop
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc80      	pop	{r7}
 80055b0:	4770      	bx	lr

080055b2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b20      	cmp	r3, #32
 80055c6:	d138      	bne.n	800563a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e032      	b.n	800563c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2224      	movs	r2, #36	; 0x24
 80055e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0201 	bic.w	r2, r2, #1
 80055f4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005604:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6819      	ldr	r1, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0201 	orr.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	e000      	b.n	800563c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800563a:	2302      	movs	r3, #2
  }
}
 800563c:	4618      	mov	r0, r3
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	bc80      	pop	{r7}
 8005644:	4770      	bx	lr

08005646 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005646:	b480      	push	{r7}
 8005648:	b085      	sub	sp, #20
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b20      	cmp	r3, #32
 800565a:	d139      	bne.n	80056d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005662:	2b01      	cmp	r3, #1
 8005664:	d101      	bne.n	800566a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005666:	2302      	movs	r3, #2
 8005668:	e033      	b.n	80056d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2224      	movs	r2, #36	; 0x24
 8005676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0201 	bic.w	r2, r2, #1
 8005688:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005698:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	021b      	lsls	r3, r3, #8
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0201 	orr.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	e000      	b.n	80056d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056d0:	2302      	movs	r3, #2
  }
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr

080056dc <HAL_GPIO_EXTI_Callback>:
#include "stm32f3xx_hal.h"
#include "avProj_Config.h"


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	4603      	mov	r3, r0
 80056e4:	80fb      	strh	r3, [r7, #6]
	/* Check if interrupt is triggered by PC13 */
	if(GPIO_Pin == BUTTON_Pin)
 80056e6:	88fb      	ldrh	r3, [r7, #6]
 80056e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ec:	d10e      	bne.n	800570c <HAL_GPIO_EXTI_Callback+0x30>
	{
		/* Check Pin state */
        if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80056ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056f2:	4808      	ldr	r0, [pc, #32]	; (8005714 <HAL_GPIO_EXTI_Callback+0x38>)
 80056f4:	f7fc fe72 	bl	80023dc <HAL_GPIO_ReadPin>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d103      	bne.n	8005706 <HAL_GPIO_EXTI_Callback+0x2a>
        {
            Rte_Write_PC13_Pin_State(1u);
 80056fe:	2001      	movs	r0, #1
 8005700:	f004 f98c 	bl	8009a1c <Rte_Write_PC13_Pin_State>
        else
        {
        	Rte_Write_PC13_Pin_State(0u);
        }
	}
}
 8005704:	e002      	b.n	800570c <HAL_GPIO_EXTI_Callback+0x30>
        	Rte_Write_PC13_Pin_State(0u);
 8005706:	2000      	movs	r0, #0
 8005708:	f004 f988 	bl	8009a1c <Rte_Write_PC13_Pin_State>
}
 800570c:	bf00      	nop
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	48000800 	.word	0x48000800

08005718 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800571c:	bf00      	nop
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr

08005724 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005728:	4b08      	ldr	r3, [pc, #32]	; (800574c <HAL_Init+0x28>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a07      	ldr	r2, [pc, #28]	; (800574c <HAL_Init+0x28>)
 800572e:	f043 0310 	orr.w	r3, r3, #16
 8005732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005734:	2003      	movs	r0, #3
 8005736:	f000 f929 	bl	800598c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800573a:	200f      	movs	r0, #15
 800573c:	f000 f808 	bl	8005750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005740:	f000 f966 	bl	8005a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	40022000 	.word	0x40022000

08005750 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005758:	4b15      	ldr	r3, [pc, #84]	; (80057b0 <HAL_InitTick+0x60>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	4b15      	ldr	r3, [pc, #84]	; (80057b4 <HAL_InitTick+0x64>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	4619      	mov	r1, r3
 8005762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005766:	fbb3 f3f1 	udiv	r3, r3, r1
 800576a:	fbb2 f3f3 	udiv	r3, r2, r3
 800576e:	4618      	mov	r0, r3
 8005770:	f000 f941 	bl	80059f6 <HAL_SYSTICK_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e014      	b.n	80057a8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b0f      	cmp	r3, #15
 8005782:	d810      	bhi.n	80057a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005784:	2200      	movs	r2, #0
 8005786:	6879      	ldr	r1, [r7, #4]
 8005788:	f04f 30ff 	mov.w	r0, #4294967295
 800578c:	f000 f909 	bl	80059a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005790:	2200      	movs	r2, #0
 8005792:	210f      	movs	r1, #15
 8005794:	f06f 0001 	mvn.w	r0, #1
 8005798:	f000 f903 	bl	80059a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800579c:	4a06      	ldr	r2, [pc, #24]	; (80057b8 <HAL_InitTick+0x68>)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	e000      	b.n	80057a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20000000 	.word	0x20000000
 80057b4:	20000008 	.word	0x20000008
 80057b8:	20000004 	.word	0x20000004

080057bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057c0:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <HAL_IncTick+0x1c>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	461a      	mov	r2, r3
 80057c6:	4b05      	ldr	r3, [pc, #20]	; (80057dc <HAL_IncTick+0x20>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4413      	add	r3, r2
 80057cc:	4a03      	ldr	r2, [pc, #12]	; (80057dc <HAL_IncTick+0x20>)
 80057ce:	6013      	str	r3, [r2, #0]
}
 80057d0:	bf00      	nop
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr
 80057d8:	20000008 	.word	0x20000008
 80057dc:	2000011c 	.word	0x2000011c

080057e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80057e4:	4b02      	ldr	r3, [pc, #8]	; (80057f0 <HAL_GetTick+0x10>)
 80057e6:	681b      	ldr	r3, [r3, #0]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr
 80057f0:	2000011c 	.word	0x2000011c

080057f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f003 0307 	and.w	r3, r3, #7
 8005802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005804:	4b0c      	ldr	r3, [pc, #48]	; (8005838 <__NVIC_SetPriorityGrouping+0x44>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005810:	4013      	ands	r3, r2
 8005812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800581c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005826:	4a04      	ldr	r2, [pc, #16]	; (8005838 <__NVIC_SetPriorityGrouping+0x44>)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	60d3      	str	r3, [r2, #12]
}
 800582c:	bf00      	nop
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	bc80      	pop	{r7}
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	e000ed00 	.word	0xe000ed00

0800583c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005840:	4b04      	ldr	r3, [pc, #16]	; (8005854 <__NVIC_GetPriorityGrouping+0x18>)
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	0a1b      	lsrs	r3, r3, #8
 8005846:	f003 0307 	and.w	r3, r3, #7
}
 800584a:	4618      	mov	r0, r3
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	e000ed00 	.word	0xe000ed00

08005858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	4603      	mov	r3, r0
 8005860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005866:	2b00      	cmp	r3, #0
 8005868:	db0b      	blt.n	8005882 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800586a:	79fb      	ldrb	r3, [r7, #7]
 800586c:	f003 021f 	and.w	r2, r3, #31
 8005870:	4906      	ldr	r1, [pc, #24]	; (800588c <__NVIC_EnableIRQ+0x34>)
 8005872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005876:	095b      	lsrs	r3, r3, #5
 8005878:	2001      	movs	r0, #1
 800587a:	fa00 f202 	lsl.w	r2, r0, r2
 800587e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005882:	bf00      	nop
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	bc80      	pop	{r7}
 800588a:	4770      	bx	lr
 800588c:	e000e100 	.word	0xe000e100

08005890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	4603      	mov	r3, r0
 8005898:	6039      	str	r1, [r7, #0]
 800589a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800589c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	db0a      	blt.n	80058ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	490c      	ldr	r1, [pc, #48]	; (80058dc <__NVIC_SetPriority+0x4c>)
 80058aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ae:	0112      	lsls	r2, r2, #4
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	440b      	add	r3, r1
 80058b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058b8:	e00a      	b.n	80058d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	4908      	ldr	r1, [pc, #32]	; (80058e0 <__NVIC_SetPriority+0x50>)
 80058c0:	79fb      	ldrb	r3, [r7, #7]
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	3b04      	subs	r3, #4
 80058c8:	0112      	lsls	r2, r2, #4
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	440b      	add	r3, r1
 80058ce:	761a      	strb	r2, [r3, #24]
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bc80      	pop	{r7}
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	e000e100 	.word	0xe000e100
 80058e0:	e000ed00 	.word	0xe000ed00

080058e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b089      	sub	sp, #36	; 0x24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f1c3 0307 	rsb	r3, r3, #7
 80058fe:	2b04      	cmp	r3, #4
 8005900:	bf28      	it	cs
 8005902:	2304      	movcs	r3, #4
 8005904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	3304      	adds	r3, #4
 800590a:	2b06      	cmp	r3, #6
 800590c:	d902      	bls.n	8005914 <NVIC_EncodePriority+0x30>
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	3b03      	subs	r3, #3
 8005912:	e000      	b.n	8005916 <NVIC_EncodePriority+0x32>
 8005914:	2300      	movs	r3, #0
 8005916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005918:	f04f 32ff 	mov.w	r2, #4294967295
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	43da      	mvns	r2, r3
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	401a      	ands	r2, r3
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800592c:	f04f 31ff 	mov.w	r1, #4294967295
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	fa01 f303 	lsl.w	r3, r1, r3
 8005936:	43d9      	mvns	r1, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800593c:	4313      	orrs	r3, r2
         );
}
 800593e:	4618      	mov	r0, r3
 8005940:	3724      	adds	r7, #36	; 0x24
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr

08005948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3b01      	subs	r3, #1
 8005954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005958:	d301      	bcc.n	800595e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800595a:	2301      	movs	r3, #1
 800595c:	e00f      	b.n	800597e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800595e:	4a0a      	ldr	r2, [pc, #40]	; (8005988 <SysTick_Config+0x40>)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	3b01      	subs	r3, #1
 8005964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005966:	210f      	movs	r1, #15
 8005968:	f04f 30ff 	mov.w	r0, #4294967295
 800596c:	f7ff ff90 	bl	8005890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005970:	4b05      	ldr	r3, [pc, #20]	; (8005988 <SysTick_Config+0x40>)
 8005972:	2200      	movs	r2, #0
 8005974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005976:	4b04      	ldr	r3, [pc, #16]	; (8005988 <SysTick_Config+0x40>)
 8005978:	2207      	movs	r2, #7
 800597a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	e000e010 	.word	0xe000e010

0800598c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7ff ff2d 	bl	80057f4 <__NVIC_SetPriorityGrouping>
}
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b086      	sub	sp, #24
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	4603      	mov	r3, r0
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	607a      	str	r2, [r7, #4]
 80059ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059b4:	f7ff ff42 	bl	800583c <__NVIC_GetPriorityGrouping>
 80059b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	68b9      	ldr	r1, [r7, #8]
 80059be:	6978      	ldr	r0, [r7, #20]
 80059c0:	f7ff ff90 	bl	80058e4 <NVIC_EncodePriority>
 80059c4:	4602      	mov	r2, r0
 80059c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059ca:	4611      	mov	r1, r2
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff ff5f 	bl	8005890 <__NVIC_SetPriority>
}
 80059d2:	bf00      	nop
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b082      	sub	sp, #8
 80059de:	af00      	add	r7, sp, #0
 80059e0:	4603      	mov	r3, r0
 80059e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff ff35 	bl	8005858 <__NVIC_EnableIRQ>
}
 80059ee:	bf00      	nop
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b082      	sub	sp, #8
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff ffa2 	bl	8005948 <SysTick_Config>
 8005a04:	4603      	mov	r3, r0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a16:	4b0e      	ldr	r3, [pc, #56]	; (8005a50 <HAL_MspInit+0x40>)
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	4a0d      	ldr	r2, [pc, #52]	; (8005a50 <HAL_MspInit+0x40>)
 8005a1c:	f043 0301 	orr.w	r3, r3, #1
 8005a20:	6193      	str	r3, [r2, #24]
 8005a22:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <HAL_MspInit+0x40>)
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	607b      	str	r3, [r7, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a2e:	4b08      	ldr	r3, [pc, #32]	; (8005a50 <HAL_MspInit+0x40>)
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	4a07      	ldr	r2, [pc, #28]	; (8005a50 <HAL_MspInit+0x40>)
 8005a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a38:	61d3      	str	r3, [r2, #28]
 8005a3a:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <HAL_MspInit+0x40>)
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a42:	603b      	str	r3, [r7, #0]
 8005a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bc80      	pop	{r7}
 8005a4e:	4770      	bx	lr
 8005a50:	40021000 	.word	0x40021000

08005a54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b08a      	sub	sp, #40	; 0x28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a5c:	f107 0314 	add.w	r3, r7, #20
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	605a      	str	r2, [r3, #4]
 8005a66:	609a      	str	r2, [r3, #8]
 8005a68:	60da      	str	r2, [r3, #12]
 8005a6a:	611a      	str	r2, [r3, #16]
	  if(hadc->Instance==ADC1)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a74:	d14c      	bne.n	8005b10 <HAL_ADC_MspInit+0xbc>
	  {
	  /* USER CODE BEGIN ADC1_MspInit 0 */

	  /* USER CODE END ADC1_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_ADC12_CLK_ENABLE();
 8005a76:	4b28      	ldr	r3, [pc, #160]	; (8005b18 <HAL_ADC_MspInit+0xc4>)
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	4a27      	ldr	r2, [pc, #156]	; (8005b18 <HAL_ADC_MspInit+0xc4>)
 8005a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a80:	6153      	str	r3, [r2, #20]
 8005a82:	4b25      	ldr	r3, [pc, #148]	; (8005b18 <HAL_ADC_MspInit+0xc4>)
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a8e:	4b22      	ldr	r3, [pc, #136]	; (8005b18 <HAL_ADC_MspInit+0xc4>)
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	4a21      	ldr	r2, [pc, #132]	; (8005b18 <HAL_ADC_MspInit+0xc4>)
 8005a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a98:	6153      	str	r3, [r2, #20]
 8005a9a:	4b1f      	ldr	r3, [pc, #124]	; (8005b18 <HAL_ADC_MspInit+0xc4>)
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
	    /**ADC1 GPIO Configuration
	    PA0     ------> ADC1_IN1
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ab2:	f107 0314 	add.w	r3, r7, #20
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005abc:	f7fc fb04 	bl	80020c8 <HAL_GPIO_Init>

	    /* ADC1 DMA Init */
	    /* ADC1 Init */
	    hdma_adc1.Instance = DMA1_Channel1;
 8005ac0:	4b16      	ldr	r3, [pc, #88]	; (8005b1c <HAL_ADC_MspInit+0xc8>)
 8005ac2:	4a17      	ldr	r2, [pc, #92]	; (8005b20 <HAL_ADC_MspInit+0xcc>)
 8005ac4:	601a      	str	r2, [r3, #0]
	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ac6:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <HAL_ADC_MspInit+0xc8>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	605a      	str	r2, [r3, #4]
	    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005acc:	4b13      	ldr	r3, [pc, #76]	; (8005b1c <HAL_ADC_MspInit+0xc8>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	609a      	str	r2, [r3, #8]
	    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005ad2:	4b12      	ldr	r3, [pc, #72]	; (8005b1c <HAL_ADC_MspInit+0xc8>)
 8005ad4:	2280      	movs	r2, #128	; 0x80
 8005ad6:	60da      	str	r2, [r3, #12]
	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005ad8:	4b10      	ldr	r3, [pc, #64]	; (8005b1c <HAL_ADC_MspInit+0xc8>)
 8005ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ade:	611a      	str	r2, [r3, #16]
	    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005ae0:	4b0e      	ldr	r3, [pc, #56]	; (8005b1c <HAL_ADC_MspInit+0xc8>)
 8005ae2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ae6:	615a      	str	r2, [r3, #20]
	    hdma_adc1.Init.Mode = DMA_NORMAL;
 8005ae8:	4b0c      	ldr	r3, [pc, #48]	; (8005b1c <HAL_ADC_MspInit+0xc8>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	619a      	str	r2, [r3, #24]
	    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005aee:	4b0b      	ldr	r3, [pc, #44]	; (8005b1c <HAL_ADC_MspInit+0xc8>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	61da      	str	r2, [r3, #28]
	    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005af4:	4809      	ldr	r0, [pc, #36]	; (8005b1c <HAL_ADC_MspInit+0xc8>)
 8005af6:	f7fc fcb7 	bl	8002468 <HAL_DMA_Init>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <HAL_ADC_MspInit+0xb0>
	    {
	    	Msp_Error_Handler();
 8005b00:	f000 f9a6 	bl	8005e50 <Msp_Error_Handler>
	    }

	    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a05      	ldr	r2, [pc, #20]	; (8005b1c <HAL_ADC_MspInit+0xc8>)
 8005b08:	639a      	str	r2, [r3, #56]	; 0x38
 8005b0a:	4a04      	ldr	r2, [pc, #16]	; (8005b1c <HAL_ADC_MspInit+0xc8>)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6253      	str	r3, [r2, #36]	; 0x24

	  /* USER CODE BEGIN ADC1_MspInit 1 */

	  /* USER CODE END ADC1_MspInit 1 */
	  }
}
 8005b10:	bf00      	nop
 8005b12:	3728      	adds	r7, #40	; 0x28
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	20000178 	.word	0x20000178
 8005b20:	40020008 	.word	0x40020008

08005b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08a      	sub	sp, #40	; 0x28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b2c:	f107 0314 	add.w	r3, r7, #20
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	605a      	str	r2, [r3, #4]
 8005b36:	609a      	str	r2, [r3, #8]
 8005b38:	60da      	str	r2, [r3, #12]
 8005b3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a41      	ldr	r2, [pc, #260]	; (8005c48 <HAL_I2C_MspInit+0x124>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d17c      	bne.n	8005c40 <HAL_I2C_MspInit+0x11c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b46:	4b41      	ldr	r3, [pc, #260]	; (8005c4c <HAL_I2C_MspInit+0x128>)
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	4a40      	ldr	r2, [pc, #256]	; (8005c4c <HAL_I2C_MspInit+0x128>)
 8005b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b50:	6153      	str	r3, [r2, #20]
 8005b52:	4b3e      	ldr	r3, [pc, #248]	; (8005c4c <HAL_I2C_MspInit+0x128>)
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005b5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b64:	2312      	movs	r3, #18
 8005b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005b70:	2304      	movs	r3, #4
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b74:	f107 0314 	add.w	r3, r7, #20
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4835      	ldr	r0, [pc, #212]	; (8005c50 <HAL_I2C_MspInit+0x12c>)
 8005b7c:	f7fc faa4 	bl	80020c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005b80:	4b32      	ldr	r3, [pc, #200]	; (8005c4c <HAL_I2C_MspInit+0x128>)
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	4a31      	ldr	r2, [pc, #196]	; (8005c4c <HAL_I2C_MspInit+0x128>)
 8005b86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b8a:	61d3      	str	r3, [r2, #28]
 8005b8c:	4b2f      	ldr	r3, [pc, #188]	; (8005c4c <HAL_I2C_MspInit+0x128>)
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8005b98:	4b2e      	ldr	r3, [pc, #184]	; (8005c54 <HAL_I2C_MspInit+0x130>)
 8005b9a:	4a2f      	ldr	r2, [pc, #188]	; (8005c58 <HAL_I2C_MspInit+0x134>)
 8005b9c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b9e:	4b2d      	ldr	r3, [pc, #180]	; (8005c54 <HAL_I2C_MspInit+0x130>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ba4:	4b2b      	ldr	r3, [pc, #172]	; (8005c54 <HAL_I2C_MspInit+0x130>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005baa:	4b2a      	ldr	r3, [pc, #168]	; (8005c54 <HAL_I2C_MspInit+0x130>)
 8005bac:	2280      	movs	r2, #128	; 0x80
 8005bae:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005bb0:	4b28      	ldr	r3, [pc, #160]	; (8005c54 <HAL_I2C_MspInit+0x130>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005bb6:	4b27      	ldr	r3, [pc, #156]	; (8005c54 <HAL_I2C_MspInit+0x130>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005bbc:	4b25      	ldr	r3, [pc, #148]	; (8005c54 <HAL_I2C_MspInit+0x130>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005bc2:	4b24      	ldr	r3, [pc, #144]	; (8005c54 <HAL_I2C_MspInit+0x130>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005bc8:	4822      	ldr	r0, [pc, #136]	; (8005c54 <HAL_I2C_MspInit+0x130>)
 8005bca:	f7fc fc4d 	bl	8002468 <HAL_DMA_Init>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <HAL_I2C_MspInit+0xb4>
    {
    	Msp_Error_Handler();
 8005bd4:	f000 f93c 	bl	8005e50 <Msp_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a1e      	ldr	r2, [pc, #120]	; (8005c54 <HAL_I2C_MspInit+0x130>)
 8005bdc:	63da      	str	r2, [r3, #60]	; 0x3c
 8005bde:	4a1d      	ldr	r2, [pc, #116]	; (8005c54 <HAL_I2C_MspInit+0x130>)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8005be4:	4b1d      	ldr	r3, [pc, #116]	; (8005c5c <HAL_I2C_MspInit+0x138>)
 8005be6:	4a1e      	ldr	r2, [pc, #120]	; (8005c60 <HAL_I2C_MspInit+0x13c>)
 8005be8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005bea:	4b1c      	ldr	r3, [pc, #112]	; (8005c5c <HAL_I2C_MspInit+0x138>)
 8005bec:	2210      	movs	r2, #16
 8005bee:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bf0:	4b1a      	ldr	r3, [pc, #104]	; (8005c5c <HAL_I2C_MspInit+0x138>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005bf6:	4b19      	ldr	r3, [pc, #100]	; (8005c5c <HAL_I2C_MspInit+0x138>)
 8005bf8:	2280      	movs	r2, #128	; 0x80
 8005bfa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005bfc:	4b17      	ldr	r3, [pc, #92]	; (8005c5c <HAL_I2C_MspInit+0x138>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c02:	4b16      	ldr	r3, [pc, #88]	; (8005c5c <HAL_I2C_MspInit+0x138>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005c08:	4b14      	ldr	r3, [pc, #80]	; (8005c5c <HAL_I2C_MspInit+0x138>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005c0e:	4b13      	ldr	r3, [pc, #76]	; (8005c5c <HAL_I2C_MspInit+0x138>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005c14:	4811      	ldr	r0, [pc, #68]	; (8005c5c <HAL_I2C_MspInit+0x138>)
 8005c16:	f7fc fc27 	bl	8002468 <HAL_DMA_Init>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <HAL_I2C_MspInit+0x100>
    {
    	Msp_Error_Handler();
 8005c20:	f000 f916 	bl	8005e50 <Msp_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a0d      	ldr	r2, [pc, #52]	; (8005c5c <HAL_I2C_MspInit+0x138>)
 8005c28:	639a      	str	r2, [r3, #56]	; 0x38
 8005c2a:	4a0c      	ldr	r2, [pc, #48]	; (8005c5c <HAL_I2C_MspInit+0x138>)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005c30:	2200      	movs	r2, #0
 8005c32:	2100      	movs	r1, #0
 8005c34:	201f      	movs	r0, #31
 8005c36:	f7ff feb4 	bl	80059a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005c3a:	201f      	movs	r0, #31
 8005c3c:	f7ff fecd 	bl	80059da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005c40:	bf00      	nop
 8005c42:	3728      	adds	r7, #40	; 0x28
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40005400 	.word	0x40005400
 8005c4c:	40021000 	.word	0x40021000
 8005c50:	48000400 	.word	0x48000400
 8005c54:	20000238 	.word	0x20000238
 8005c58:	40020080 	.word	0x40020080
 8005c5c:	2000027c 	.word	0x2000027c
 8005c60:	4002006c 	.word	0x4002006c

08005c64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08a      	sub	sp, #40	; 0x28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c6c:	f107 0314 	add.w	r3, r7, #20
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	605a      	str	r2, [r3, #4]
 8005c76:	609a      	str	r2, [r3, #8]
 8005c78:	60da      	str	r2, [r3, #12]
 8005c7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a1b      	ldr	r2, [pc, #108]	; (8005cf0 <HAL_SPI_MspInit+0x8c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d130      	bne.n	8005ce8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005c86:	4b1b      	ldr	r3, [pc, #108]	; (8005cf4 <HAL_SPI_MspInit+0x90>)
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	4a1a      	ldr	r2, [pc, #104]	; (8005cf4 <HAL_SPI_MspInit+0x90>)
 8005c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c90:	61d3      	str	r3, [r2, #28]
 8005c92:	4b18      	ldr	r3, [pc, #96]	; (8005cf4 <HAL_SPI_MspInit+0x90>)
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c9a:	613b      	str	r3, [r7, #16]
 8005c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c9e:	4b15      	ldr	r3, [pc, #84]	; (8005cf4 <HAL_SPI_MspInit+0x90>)
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	4a14      	ldr	r2, [pc, #80]	; (8005cf4 <HAL_SPI_MspInit+0x90>)
 8005ca4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ca8:	6153      	str	r3, [r2, #20]
 8005caa:	4b12      	ldr	r3, [pc, #72]	; (8005cf4 <HAL_SPI_MspInit+0x90>)
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005cb6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005cc8:	2306      	movs	r3, #6
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ccc:	f107 0314 	add.w	r3, r7, #20
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4809      	ldr	r0, [pc, #36]	; (8005cf8 <HAL_SPI_MspInit+0x94>)
 8005cd4:	f7fc f9f8 	bl	80020c8 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2100      	movs	r1, #0
 8005cdc:	2033      	movs	r0, #51	; 0x33
 8005cde:	f7ff fe60 	bl	80059a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8005ce2:	2033      	movs	r0, #51	; 0x33
 8005ce4:	f7ff fe79 	bl	80059da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005ce8:	bf00      	nop
 8005cea:	3728      	adds	r7, #40	; 0x28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40003c00 	.word	0x40003c00
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	48000800 	.word	0x48000800

08005cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a0d      	ldr	r2, [pc, #52]	; (8005d40 <HAL_TIM_Base_MspInit+0x44>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d113      	bne.n	8005d36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d0e:	4b0d      	ldr	r3, [pc, #52]	; (8005d44 <HAL_TIM_Base_MspInit+0x48>)
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	4a0c      	ldr	r2, [pc, #48]	; (8005d44 <HAL_TIM_Base_MspInit+0x48>)
 8005d14:	f043 0302 	orr.w	r3, r3, #2
 8005d18:	61d3      	str	r3, [r2, #28]
 8005d1a:	4b0a      	ldr	r3, [pc, #40]	; (8005d44 <HAL_TIM_Base_MspInit+0x48>)
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005d26:	2200      	movs	r2, #0
 8005d28:	2100      	movs	r1, #0
 8005d2a:	201d      	movs	r0, #29
 8005d2c:	f7ff fe39 	bl	80059a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005d30:	201d      	movs	r0, #29
 8005d32:	f7ff fe52 	bl	80059da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005d36:	bf00      	nop
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	40000400 	.word	0x40000400
 8005d44:	40021000 	.word	0x40021000

08005d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08c      	sub	sp, #48	; 0x30
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d50:	f107 031c 	add.w	r3, r7, #28
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	605a      	str	r2, [r3, #4]
 8005d5a:	609a      	str	r2, [r3, #8]
 8005d5c:	60da      	str	r2, [r3, #12]
 8005d5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a36      	ldr	r2, [pc, #216]	; (8005e40 <HAL_UART_MspInit+0xf8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d130      	bne.n	8005dcc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d6a:	4b36      	ldr	r3, [pc, #216]	; (8005e44 <HAL_UART_MspInit+0xfc>)
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	4a35      	ldr	r2, [pc, #212]	; (8005e44 <HAL_UART_MspInit+0xfc>)
 8005d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d74:	6193      	str	r3, [r2, #24]
 8005d76:	4b33      	ldr	r3, [pc, #204]	; (8005e44 <HAL_UART_MspInit+0xfc>)
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d7e:	61bb      	str	r3, [r7, #24]
 8005d80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d82:	4b30      	ldr	r3, [pc, #192]	; (8005e44 <HAL_UART_MspInit+0xfc>)
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	4a2f      	ldr	r2, [pc, #188]	; (8005e44 <HAL_UART_MspInit+0xfc>)
 8005d88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d8c:	6153      	str	r3, [r2, #20]
 8005d8e:	4b2d      	ldr	r3, [pc, #180]	; (8005e44 <HAL_UART_MspInit+0xfc>)
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005d9a:	2330      	movs	r3, #48	; 0x30
 8005d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d9e:	2302      	movs	r3, #2
 8005da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005da2:	2300      	movs	r3, #0
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005da6:	2303      	movs	r3, #3
 8005da8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005daa:	2307      	movs	r3, #7
 8005dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005dae:	f107 031c 	add.w	r3, r7, #28
 8005db2:	4619      	mov	r1, r3
 8005db4:	4824      	ldr	r0, [pc, #144]	; (8005e48 <HAL_UART_MspInit+0x100>)
 8005db6:	f7fc f987 	bl	80020c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005dba:	2200      	movs	r2, #0
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	2025      	movs	r0, #37	; 0x25
 8005dc0:	f7ff fdef 	bl	80059a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005dc4:	2025      	movs	r0, #37	; 0x25
 8005dc6:	f7ff fe08 	bl	80059da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005dca:	e035      	b.n	8005e38 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a1e      	ldr	r2, [pc, #120]	; (8005e4c <HAL_UART_MspInit+0x104>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d130      	bne.n	8005e38 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005dd6:	4b1b      	ldr	r3, [pc, #108]	; (8005e44 <HAL_UART_MspInit+0xfc>)
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	4a1a      	ldr	r2, [pc, #104]	; (8005e44 <HAL_UART_MspInit+0xfc>)
 8005ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005de0:	61d3      	str	r3, [r2, #28]
 8005de2:	4b18      	ldr	r3, [pc, #96]	; (8005e44 <HAL_UART_MspInit+0xfc>)
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dea:	613b      	str	r3, [r7, #16]
 8005dec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dee:	4b15      	ldr	r3, [pc, #84]	; (8005e44 <HAL_UART_MspInit+0xfc>)
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	4a14      	ldr	r2, [pc, #80]	; (8005e44 <HAL_UART_MspInit+0xfc>)
 8005df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005df8:	6153      	str	r3, [r2, #20]
 8005dfa:	4b12      	ldr	r3, [pc, #72]	; (8005e44 <HAL_UART_MspInit+0xfc>)
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005e06:	230c      	movs	r3, #12
 8005e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e12:	2303      	movs	r3, #3
 8005e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005e16:	2307      	movs	r3, #7
 8005e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e1a:	f107 031c 	add.w	r3, r7, #28
 8005e1e:	4619      	mov	r1, r3
 8005e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e24:	f7fc f950 	bl	80020c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	2026      	movs	r0, #38	; 0x26
 8005e2e:	f7ff fdb8 	bl	80059a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005e32:	2026      	movs	r0, #38	; 0x26
 8005e34:	f7ff fdd1 	bl	80059da <HAL_NVIC_EnableIRQ>
}
 8005e38:	bf00      	nop
 8005e3a:	3730      	adds	r7, #48	; 0x30
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40013800 	.word	0x40013800
 8005e44:	40021000 	.word	0x40021000
 8005e48:	48000800 	.word	0x48000800
 8005e4c:	40004400 	.word	0x40004400

08005e50 <Msp_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Msp_Error_Handler(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005e54:	b672      	cpsid	i
}
 8005e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005e58:	e7fe      	b.n	8005e58 <Msp_Error_Handler+0x8>
	...

08005e5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e6c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d102      	bne.n	8005e82 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f001 b83a 	b.w	8006ef6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 816f 	beq.w	8006176 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005e98:	4bb5      	ldr	r3, [pc, #724]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f003 030c 	and.w	r3, r3, #12
 8005ea0:	2b04      	cmp	r3, #4
 8005ea2:	d00c      	beq.n	8005ebe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ea4:	4bb2      	ldr	r3, [pc, #712]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f003 030c 	and.w	r3, r3, #12
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d15c      	bne.n	8005f6a <HAL_RCC_OscConfig+0x10e>
 8005eb0:	4baf      	ldr	r3, [pc, #700]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ebc:	d155      	bne.n	8005f6a <HAL_RCC_OscConfig+0x10e>
 8005ebe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ec2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005eca:	fa93 f3a3 	rbit	r3, r3
 8005ece:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005ed2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ed6:	fab3 f383 	clz	r3, r3
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	095b      	lsrs	r3, r3, #5
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	f043 0301 	orr.w	r3, r3, #1
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d102      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x94>
 8005eea:	4ba1      	ldr	r3, [pc, #644]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	e015      	b.n	8005f1c <HAL_RCC_OscConfig+0xc0>
 8005ef0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ef4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8005efc:	fa93 f3a3 	rbit	r3, r3
 8005f00:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8005f04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f08:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005f0c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005f10:	fa93 f3a3 	rbit	r3, r3
 8005f14:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005f18:	4b95      	ldr	r3, [pc, #596]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f20:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005f24:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8005f28:	fa92 f2a2 	rbit	r2, r2
 8005f2c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8005f30:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005f34:	fab2 f282 	clz	r2, r2
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	f042 0220 	orr.w	r2, r2, #32
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	f002 021f 	and.w	r2, r2, #31
 8005f44:	2101      	movs	r1, #1
 8005f46:	fa01 f202 	lsl.w	r2, r1, r2
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 8111 	beq.w	8006174 <HAL_RCC_OscConfig+0x318>
 8005f52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f040 8108 	bne.w	8006174 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	f000 bfc6 	b.w	8006ef6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f7a:	d106      	bne.n	8005f8a <HAL_RCC_OscConfig+0x12e>
 8005f7c:	4b7c      	ldr	r3, [pc, #496]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a7b      	ldr	r2, [pc, #492]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8005f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	e036      	b.n	8005ff8 <HAL_RCC_OscConfig+0x19c>
 8005f8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10c      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x158>
 8005f9a:	4b75      	ldr	r3, [pc, #468]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a74      	ldr	r2, [pc, #464]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8005fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	4b72      	ldr	r3, [pc, #456]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a71      	ldr	r2, [pc, #452]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8005fac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	e021      	b.n	8005ff8 <HAL_RCC_OscConfig+0x19c>
 8005fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005fb8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fc4:	d10c      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x184>
 8005fc6:	4b6a      	ldr	r3, [pc, #424]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a69      	ldr	r2, [pc, #420]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8005fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fd0:	6013      	str	r3, [r2, #0]
 8005fd2:	4b67      	ldr	r3, [pc, #412]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a66      	ldr	r2, [pc, #408]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8005fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	e00b      	b.n	8005ff8 <HAL_RCC_OscConfig+0x19c>
 8005fe0:	4b63      	ldr	r3, [pc, #396]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a62      	ldr	r2, [pc, #392]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8005fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	4b60      	ldr	r3, [pc, #384]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a5f      	ldr	r2, [pc, #380]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8005ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ff6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ff8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ffc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d059      	beq.n	80060bc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006008:	f7ff fbea 	bl	80057e0 <HAL_GetTick>
 800600c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006010:	e00a      	b.n	8006028 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006012:	f7ff fbe5 	bl	80057e0 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b64      	cmp	r3, #100	; 0x64
 8006020:	d902      	bls.n	8006028 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	f000 bf67 	b.w	8006ef6 <HAL_RCC_OscConfig+0x109a>
 8006028:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800602c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006030:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006034:	fa93 f3a3 	rbit	r3, r3
 8006038:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800603c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006040:	fab3 f383 	clz	r3, r3
 8006044:	b2db      	uxtb	r3, r3
 8006046:	095b      	lsrs	r3, r3, #5
 8006048:	b2db      	uxtb	r3, r3
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b01      	cmp	r3, #1
 8006052:	d102      	bne.n	800605a <HAL_RCC_OscConfig+0x1fe>
 8006054:	4b46      	ldr	r3, [pc, #280]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	e015      	b.n	8006086 <HAL_RCC_OscConfig+0x22a>
 800605a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800605e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006062:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8006066:	fa93 f3a3 	rbit	r3, r3
 800606a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800606e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006072:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006076:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800607a:	fa93 f3a3 	rbit	r3, r3
 800607e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006082:	4b3b      	ldr	r3, [pc, #236]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800608a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800608e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8006092:	fa92 f2a2 	rbit	r2, r2
 8006096:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800609a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800609e:	fab2 f282 	clz	r2, r2
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	f042 0220 	orr.w	r2, r2, #32
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	f002 021f 	and.w	r2, r2, #31
 80060ae:	2101      	movs	r1, #1
 80060b0:	fa01 f202 	lsl.w	r2, r1, r2
 80060b4:	4013      	ands	r3, r2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d0ab      	beq.n	8006012 <HAL_RCC_OscConfig+0x1b6>
 80060ba:	e05c      	b.n	8006176 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060bc:	f7ff fb90 	bl	80057e0 <HAL_GetTick>
 80060c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060c4:	e00a      	b.n	80060dc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060c6:	f7ff fb8b 	bl	80057e0 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b64      	cmp	r3, #100	; 0x64
 80060d4:	d902      	bls.n	80060dc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	f000 bf0d 	b.w	8006ef6 <HAL_RCC_OscConfig+0x109a>
 80060dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060e0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80060e8:	fa93 f3a3 	rbit	r3, r3
 80060ec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80060f0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060f4:	fab3 f383 	clz	r3, r3
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	f043 0301 	orr.w	r3, r3, #1
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b01      	cmp	r3, #1
 8006106:	d102      	bne.n	800610e <HAL_RCC_OscConfig+0x2b2>
 8006108:	4b19      	ldr	r3, [pc, #100]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	e015      	b.n	800613a <HAL_RCC_OscConfig+0x2de>
 800610e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006112:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006116:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800611a:	fa93 f3a3 	rbit	r3, r3
 800611e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8006122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006126:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800612a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800612e:	fa93 f3a3 	rbit	r3, r3
 8006132:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006136:	4b0e      	ldr	r3, [pc, #56]	; (8006170 <HAL_RCC_OscConfig+0x314>)
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800613e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8006142:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006146:	fa92 f2a2 	rbit	r2, r2
 800614a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800614e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006152:	fab2 f282 	clz	r2, r2
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	f042 0220 	orr.w	r2, r2, #32
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	f002 021f 	and.w	r2, r2, #31
 8006162:	2101      	movs	r1, #1
 8006164:	fa01 f202 	lsl.w	r2, r1, r2
 8006168:	4013      	ands	r3, r2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1ab      	bne.n	80060c6 <HAL_RCC_OscConfig+0x26a>
 800616e:	e002      	b.n	8006176 <HAL_RCC_OscConfig+0x31a>
 8006170:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800617a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 817f 	beq.w	800648a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800618c:	4ba7      	ldr	r3, [pc, #668]	; (800642c <HAL_RCC_OscConfig+0x5d0>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f003 030c 	and.w	r3, r3, #12
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00c      	beq.n	80061b2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006198:	4ba4      	ldr	r3, [pc, #656]	; (800642c <HAL_RCC_OscConfig+0x5d0>)
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f003 030c 	and.w	r3, r3, #12
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d173      	bne.n	800628c <HAL_RCC_OscConfig+0x430>
 80061a4:	4ba1      	ldr	r3, [pc, #644]	; (800642c <HAL_RCC_OscConfig+0x5d0>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80061ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b0:	d16c      	bne.n	800628c <HAL_RCC_OscConfig+0x430>
 80061b2:	2302      	movs	r3, #2
 80061b4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80061bc:	fa93 f3a3 	rbit	r3, r3
 80061c0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80061c4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061c8:	fab3 f383 	clz	r3, r3
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	f043 0301 	orr.w	r3, r3, #1
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d102      	bne.n	80061e2 <HAL_RCC_OscConfig+0x386>
 80061dc:	4b93      	ldr	r3, [pc, #588]	; (800642c <HAL_RCC_OscConfig+0x5d0>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	e013      	b.n	800620a <HAL_RCC_OscConfig+0x3ae>
 80061e2:	2302      	movs	r3, #2
 80061e4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80061ec:	fa93 f3a3 	rbit	r3, r3
 80061f0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80061f4:	2302      	movs	r3, #2
 80061f6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80061fa:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80061fe:	fa93 f3a3 	rbit	r3, r3
 8006202:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006206:	4b89      	ldr	r3, [pc, #548]	; (800642c <HAL_RCC_OscConfig+0x5d0>)
 8006208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620a:	2202      	movs	r2, #2
 800620c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8006210:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8006214:	fa92 f2a2 	rbit	r2, r2
 8006218:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800621c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006220:	fab2 f282 	clz	r2, r2
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	f042 0220 	orr.w	r2, r2, #32
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	f002 021f 	and.w	r2, r2, #31
 8006230:	2101      	movs	r1, #1
 8006232:	fa01 f202 	lsl.w	r2, r1, r2
 8006236:	4013      	ands	r3, r2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00a      	beq.n	8006252 <HAL_RCC_OscConfig+0x3f6>
 800623c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006240:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d002      	beq.n	8006252 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	f000 be52 	b.w	8006ef6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006252:	4b76      	ldr	r3, [pc, #472]	; (800642c <HAL_RCC_OscConfig+0x5d0>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800625a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800625e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	21f8      	movs	r1, #248	; 0xf8
 8006268:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800626c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8006270:	fa91 f1a1 	rbit	r1, r1
 8006274:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8006278:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800627c:	fab1 f181 	clz	r1, r1
 8006280:	b2c9      	uxtb	r1, r1
 8006282:	408b      	lsls	r3, r1
 8006284:	4969      	ldr	r1, [pc, #420]	; (800642c <HAL_RCC_OscConfig+0x5d0>)
 8006286:	4313      	orrs	r3, r2
 8006288:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800628a:	e0fe      	b.n	800648a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800628c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006290:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 8088 	beq.w	80063ae <HAL_RCC_OscConfig+0x552>
 800629e:	2301      	movs	r3, #1
 80062a0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062a4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80062a8:	fa93 f3a3 	rbit	r3, r3
 80062ac:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80062b0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062b4:	fab3 f383 	clz	r3, r3
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80062be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	461a      	mov	r2, r3
 80062c6:	2301      	movs	r3, #1
 80062c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ca:	f7ff fa89 	bl	80057e0 <HAL_GetTick>
 80062ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062d2:	e00a      	b.n	80062ea <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062d4:	f7ff fa84 	bl	80057e0 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d902      	bls.n	80062ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	f000 be06 	b.w	8006ef6 <HAL_RCC_OscConfig+0x109a>
 80062ea:	2302      	movs	r3, #2
 80062ec:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80062f4:	fa93 f3a3 	rbit	r3, r3
 80062f8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80062fc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006300:	fab3 f383 	clz	r3, r3
 8006304:	b2db      	uxtb	r3, r3
 8006306:	095b      	lsrs	r3, r3, #5
 8006308:	b2db      	uxtb	r3, r3
 800630a:	f043 0301 	orr.w	r3, r3, #1
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b01      	cmp	r3, #1
 8006312:	d102      	bne.n	800631a <HAL_RCC_OscConfig+0x4be>
 8006314:	4b45      	ldr	r3, [pc, #276]	; (800642c <HAL_RCC_OscConfig+0x5d0>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	e013      	b.n	8006342 <HAL_RCC_OscConfig+0x4e6>
 800631a:	2302      	movs	r3, #2
 800631c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006320:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006324:	fa93 f3a3 	rbit	r3, r3
 8006328:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800632c:	2302      	movs	r3, #2
 800632e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006332:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006336:	fa93 f3a3 	rbit	r3, r3
 800633a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800633e:	4b3b      	ldr	r3, [pc, #236]	; (800642c <HAL_RCC_OscConfig+0x5d0>)
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	2202      	movs	r2, #2
 8006344:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006348:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800634c:	fa92 f2a2 	rbit	r2, r2
 8006350:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8006354:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006358:	fab2 f282 	clz	r2, r2
 800635c:	b2d2      	uxtb	r2, r2
 800635e:	f042 0220 	orr.w	r2, r2, #32
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	f002 021f 	and.w	r2, r2, #31
 8006368:	2101      	movs	r1, #1
 800636a:	fa01 f202 	lsl.w	r2, r1, r2
 800636e:	4013      	ands	r3, r2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0af      	beq.n	80062d4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006374:	4b2d      	ldr	r3, [pc, #180]	; (800642c <HAL_RCC_OscConfig+0x5d0>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800637c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006380:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	21f8      	movs	r1, #248	; 0xf8
 800638a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800638e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8006392:	fa91 f1a1 	rbit	r1, r1
 8006396:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800639a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800639e:	fab1 f181 	clz	r1, r1
 80063a2:	b2c9      	uxtb	r1, r1
 80063a4:	408b      	lsls	r3, r1
 80063a6:	4921      	ldr	r1, [pc, #132]	; (800642c <HAL_RCC_OscConfig+0x5d0>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	600b      	str	r3, [r1, #0]
 80063ac:	e06d      	b.n	800648a <HAL_RCC_OscConfig+0x62e>
 80063ae:	2301      	movs	r3, #1
 80063b0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063b4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80063b8:	fa93 f3a3 	rbit	r3, r3
 80063bc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80063c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063c4:	fab3 f383 	clz	r3, r3
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80063ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	461a      	mov	r2, r3
 80063d6:	2300      	movs	r3, #0
 80063d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063da:	f7ff fa01 	bl	80057e0 <HAL_GetTick>
 80063de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063e2:	e00a      	b.n	80063fa <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063e4:	f7ff f9fc 	bl	80057e0 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d902      	bls.n	80063fa <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	f000 bd7e 	b.w	8006ef6 <HAL_RCC_OscConfig+0x109a>
 80063fa:	2302      	movs	r3, #2
 80063fc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006400:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006404:	fa93 f3a3 	rbit	r3, r3
 8006408:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800640c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006410:	fab3 f383 	clz	r3, r3
 8006414:	b2db      	uxtb	r3, r3
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	b2db      	uxtb	r3, r3
 800641a:	f043 0301 	orr.w	r3, r3, #1
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b01      	cmp	r3, #1
 8006422:	d105      	bne.n	8006430 <HAL_RCC_OscConfig+0x5d4>
 8006424:	4b01      	ldr	r3, [pc, #4]	; (800642c <HAL_RCC_OscConfig+0x5d0>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	e016      	b.n	8006458 <HAL_RCC_OscConfig+0x5fc>
 800642a:	bf00      	nop
 800642c:	40021000 	.word	0x40021000
 8006430:	2302      	movs	r3, #2
 8006432:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800643a:	fa93 f3a3 	rbit	r3, r3
 800643e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006442:	2302      	movs	r3, #2
 8006444:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006448:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800644c:	fa93 f3a3 	rbit	r3, r3
 8006450:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006454:	4bbf      	ldr	r3, [pc, #764]	; (8006754 <HAL_RCC_OscConfig+0x8f8>)
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006458:	2202      	movs	r2, #2
 800645a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800645e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006462:	fa92 f2a2 	rbit	r2, r2
 8006466:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800646a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800646e:	fab2 f282 	clz	r2, r2
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	f042 0220 	orr.w	r2, r2, #32
 8006478:	b2d2      	uxtb	r2, r2
 800647a:	f002 021f 	and.w	r2, r2, #31
 800647e:	2101      	movs	r1, #1
 8006480:	fa01 f202 	lsl.w	r2, r1, r2
 8006484:	4013      	ands	r3, r2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1ac      	bne.n	80063e4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800648a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800648e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0308 	and.w	r3, r3, #8
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 8113 	beq.w	80066c6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d07c      	beq.n	80065aa <HAL_RCC_OscConfig+0x74e>
 80064b0:	2301      	movs	r3, #1
 80064b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ba:	fa93 f3a3 	rbit	r3, r3
 80064be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80064c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064c6:	fab3 f383 	clz	r3, r3
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	4ba2      	ldr	r3, [pc, #648]	; (8006758 <HAL_RCC_OscConfig+0x8fc>)
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	461a      	mov	r2, r3
 80064d6:	2301      	movs	r3, #1
 80064d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064da:	f7ff f981 	bl	80057e0 <HAL_GetTick>
 80064de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064e2:	e00a      	b.n	80064fa <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064e4:	f7ff f97c 	bl	80057e0 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d902      	bls.n	80064fa <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	f000 bcfe 	b.w	8006ef6 <HAL_RCC_OscConfig+0x109a>
 80064fa:	2302      	movs	r3, #2
 80064fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006504:	fa93 f2a3 	rbit	r2, r3
 8006508:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800650c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006516:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800651a:	2202      	movs	r2, #2
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006522:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	fa93 f2a3 	rbit	r2, r3
 800652c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800653a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800653e:	2202      	movs	r2, #2
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006546:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	fa93 f2a3 	rbit	r2, r3
 8006550:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006554:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006558:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800655a:	4b7e      	ldr	r3, [pc, #504]	; (8006754 <HAL_RCC_OscConfig+0x8f8>)
 800655c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800655e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006562:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006566:	2102      	movs	r1, #2
 8006568:	6019      	str	r1, [r3, #0]
 800656a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800656e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	fa93 f1a3 	rbit	r1, r3
 8006578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800657c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006580:	6019      	str	r1, [r3, #0]
  return result;
 8006582:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006586:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	fab3 f383 	clz	r3, r3
 8006590:	b2db      	uxtb	r3, r3
 8006592:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006596:	b2db      	uxtb	r3, r3
 8006598:	f003 031f 	and.w	r3, r3, #31
 800659c:	2101      	movs	r1, #1
 800659e:	fa01 f303 	lsl.w	r3, r1, r3
 80065a2:	4013      	ands	r3, r2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d09d      	beq.n	80064e4 <HAL_RCC_OscConfig+0x688>
 80065a8:	e08d      	b.n	80066c6 <HAL_RCC_OscConfig+0x86a>
 80065aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80065b2:	2201      	movs	r2, #1
 80065b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	fa93 f2a3 	rbit	r2, r3
 80065c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065c8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80065cc:	601a      	str	r2, [r3, #0]
  return result;
 80065ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80065d6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065d8:	fab3 f383 	clz	r3, r3
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	461a      	mov	r2, r3
 80065e0:	4b5d      	ldr	r3, [pc, #372]	; (8006758 <HAL_RCC_OscConfig+0x8fc>)
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	461a      	mov	r2, r3
 80065e8:	2300      	movs	r3, #0
 80065ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ec:	f7ff f8f8 	bl	80057e0 <HAL_GetTick>
 80065f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065f4:	e00a      	b.n	800660c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065f6:	f7ff f8f3 	bl	80057e0 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d902      	bls.n	800660c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	f000 bc75 	b.w	8006ef6 <HAL_RCC_OscConfig+0x109a>
 800660c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006610:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006614:	2202      	movs	r2, #2
 8006616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006618:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800661c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	fa93 f2a3 	rbit	r2, r3
 8006626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800662a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006634:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006638:	2202      	movs	r2, #2
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006640:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	fa93 f2a3 	rbit	r2, r3
 800664a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800664e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006658:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800665c:	2202      	movs	r2, #2
 800665e:	601a      	str	r2, [r3, #0]
 8006660:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006664:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	fa93 f2a3 	rbit	r2, r3
 800666e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006672:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006676:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006678:	4b36      	ldr	r3, [pc, #216]	; (8006754 <HAL_RCC_OscConfig+0x8f8>)
 800667a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800667c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006680:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006684:	2102      	movs	r1, #2
 8006686:	6019      	str	r1, [r3, #0]
 8006688:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800668c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	fa93 f1a3 	rbit	r1, r3
 8006696:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800669a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800669e:	6019      	str	r1, [r3, #0]
  return result;
 80066a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	fab3 f383 	clz	r3, r3
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	f003 031f 	and.w	r3, r3, #31
 80066ba:	2101      	movs	r1, #1
 80066bc:	fa01 f303 	lsl.w	r3, r1, r3
 80066c0:	4013      	ands	r3, r2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d197      	bne.n	80065f6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0304 	and.w	r3, r3, #4
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 81a5 	beq.w	8006a26 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066dc:	2300      	movs	r3, #0
 80066de:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066e2:	4b1c      	ldr	r3, [pc, #112]	; (8006754 <HAL_RCC_OscConfig+0x8f8>)
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d116      	bne.n	800671c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066ee:	4b19      	ldr	r3, [pc, #100]	; (8006754 <HAL_RCC_OscConfig+0x8f8>)
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	4a18      	ldr	r2, [pc, #96]	; (8006754 <HAL_RCC_OscConfig+0x8f8>)
 80066f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f8:	61d3      	str	r3, [r2, #28]
 80066fa:	4b16      	ldr	r3, [pc, #88]	; (8006754 <HAL_RCC_OscConfig+0x8f8>)
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006706:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006710:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006714:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006716:	2301      	movs	r3, #1
 8006718:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800671c:	4b0f      	ldr	r3, [pc, #60]	; (800675c <HAL_RCC_OscConfig+0x900>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006724:	2b00      	cmp	r3, #0
 8006726:	d121      	bne.n	800676c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006728:	4b0c      	ldr	r3, [pc, #48]	; (800675c <HAL_RCC_OscConfig+0x900>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a0b      	ldr	r2, [pc, #44]	; (800675c <HAL_RCC_OscConfig+0x900>)
 800672e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006732:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006734:	f7ff f854 	bl	80057e0 <HAL_GetTick>
 8006738:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800673c:	e010      	b.n	8006760 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800673e:	f7ff f84f 	bl	80057e0 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b64      	cmp	r3, #100	; 0x64
 800674c:	d908      	bls.n	8006760 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e3d1      	b.n	8006ef6 <HAL_RCC_OscConfig+0x109a>
 8006752:	bf00      	nop
 8006754:	40021000 	.word	0x40021000
 8006758:	10908120 	.word	0x10908120
 800675c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006760:	4b8d      	ldr	r3, [pc, #564]	; (8006998 <HAL_RCC_OscConfig+0xb3c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0e8      	beq.n	800673e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800676c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006770:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d106      	bne.n	800678a <HAL_RCC_OscConfig+0x92e>
 800677c:	4b87      	ldr	r3, [pc, #540]	; (800699c <HAL_RCC_OscConfig+0xb40>)
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	4a86      	ldr	r2, [pc, #536]	; (800699c <HAL_RCC_OscConfig+0xb40>)
 8006782:	f043 0301 	orr.w	r3, r3, #1
 8006786:	6213      	str	r3, [r2, #32]
 8006788:	e035      	b.n	80067f6 <HAL_RCC_OscConfig+0x99a>
 800678a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800678e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10c      	bne.n	80067b4 <HAL_RCC_OscConfig+0x958>
 800679a:	4b80      	ldr	r3, [pc, #512]	; (800699c <HAL_RCC_OscConfig+0xb40>)
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	4a7f      	ldr	r2, [pc, #508]	; (800699c <HAL_RCC_OscConfig+0xb40>)
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	6213      	str	r3, [r2, #32]
 80067a6:	4b7d      	ldr	r3, [pc, #500]	; (800699c <HAL_RCC_OscConfig+0xb40>)
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	4a7c      	ldr	r2, [pc, #496]	; (800699c <HAL_RCC_OscConfig+0xb40>)
 80067ac:	f023 0304 	bic.w	r3, r3, #4
 80067b0:	6213      	str	r3, [r2, #32]
 80067b2:	e020      	b.n	80067f6 <HAL_RCC_OscConfig+0x99a>
 80067b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	2b05      	cmp	r3, #5
 80067c2:	d10c      	bne.n	80067de <HAL_RCC_OscConfig+0x982>
 80067c4:	4b75      	ldr	r3, [pc, #468]	; (800699c <HAL_RCC_OscConfig+0xb40>)
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	4a74      	ldr	r2, [pc, #464]	; (800699c <HAL_RCC_OscConfig+0xb40>)
 80067ca:	f043 0304 	orr.w	r3, r3, #4
 80067ce:	6213      	str	r3, [r2, #32]
 80067d0:	4b72      	ldr	r3, [pc, #456]	; (800699c <HAL_RCC_OscConfig+0xb40>)
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	4a71      	ldr	r2, [pc, #452]	; (800699c <HAL_RCC_OscConfig+0xb40>)
 80067d6:	f043 0301 	orr.w	r3, r3, #1
 80067da:	6213      	str	r3, [r2, #32]
 80067dc:	e00b      	b.n	80067f6 <HAL_RCC_OscConfig+0x99a>
 80067de:	4b6f      	ldr	r3, [pc, #444]	; (800699c <HAL_RCC_OscConfig+0xb40>)
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	4a6e      	ldr	r2, [pc, #440]	; (800699c <HAL_RCC_OscConfig+0xb40>)
 80067e4:	f023 0301 	bic.w	r3, r3, #1
 80067e8:	6213      	str	r3, [r2, #32]
 80067ea:	4b6c      	ldr	r3, [pc, #432]	; (800699c <HAL_RCC_OscConfig+0xb40>)
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	4a6b      	ldr	r2, [pc, #428]	; (800699c <HAL_RCC_OscConfig+0xb40>)
 80067f0:	f023 0304 	bic.w	r3, r3, #4
 80067f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 8081 	beq.w	800690a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006808:	f7fe ffea 	bl	80057e0 <HAL_GetTick>
 800680c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006810:	e00b      	b.n	800682a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006812:	f7fe ffe5 	bl	80057e0 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006822:	4293      	cmp	r3, r2
 8006824:	d901      	bls.n	800682a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e365      	b.n	8006ef6 <HAL_RCC_OscConfig+0x109a>
 800682a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800682e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006832:	2202      	movs	r2, #2
 8006834:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800683a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	fa93 f2a3 	rbit	r2, r3
 8006844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006848:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006852:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006856:	2202      	movs	r2, #2
 8006858:	601a      	str	r2, [r3, #0]
 800685a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800685e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	fa93 f2a3 	rbit	r2, r3
 8006868:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800686c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006870:	601a      	str	r2, [r3, #0]
  return result;
 8006872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006876:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800687a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800687c:	fab3 f383 	clz	r3, r3
 8006880:	b2db      	uxtb	r3, r3
 8006882:	095b      	lsrs	r3, r3, #5
 8006884:	b2db      	uxtb	r3, r3
 8006886:	f043 0302 	orr.w	r3, r3, #2
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d102      	bne.n	8006896 <HAL_RCC_OscConfig+0xa3a>
 8006890:	4b42      	ldr	r3, [pc, #264]	; (800699c <HAL_RCC_OscConfig+0xb40>)
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	e013      	b.n	80068be <HAL_RCC_OscConfig+0xa62>
 8006896:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800689a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800689e:	2202      	movs	r2, #2
 80068a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068a6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	fa93 f2a3 	rbit	r2, r3
 80068b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068b4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	4b38      	ldr	r3, [pc, #224]	; (800699c <HAL_RCC_OscConfig+0xb40>)
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80068c2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80068c6:	2102      	movs	r1, #2
 80068c8:	6011      	str	r1, [r2, #0]
 80068ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80068ce:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80068d2:	6812      	ldr	r2, [r2, #0]
 80068d4:	fa92 f1a2 	rbit	r1, r2
 80068d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80068dc:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80068e0:	6011      	str	r1, [r2, #0]
  return result;
 80068e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80068e6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80068ea:	6812      	ldr	r2, [r2, #0]
 80068ec:	fab2 f282 	clz	r2, r2
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	f002 021f 	and.w	r2, r2, #31
 80068fc:	2101      	movs	r1, #1
 80068fe:	fa01 f202 	lsl.w	r2, r1, r2
 8006902:	4013      	ands	r3, r2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d084      	beq.n	8006812 <HAL_RCC_OscConfig+0x9b6>
 8006908:	e083      	b.n	8006a12 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800690a:	f7fe ff69 	bl	80057e0 <HAL_GetTick>
 800690e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006912:	e00b      	b.n	800692c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006914:	f7fe ff64 	bl	80057e0 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	f241 3288 	movw	r2, #5000	; 0x1388
 8006924:	4293      	cmp	r3, r2
 8006926:	d901      	bls.n	800692c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e2e4      	b.n	8006ef6 <HAL_RCC_OscConfig+0x109a>
 800692c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006930:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006934:	2202      	movs	r2, #2
 8006936:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800693c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	fa93 f2a3 	rbit	r2, r3
 8006946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800694a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006954:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006958:	2202      	movs	r2, #2
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006960:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	fa93 f2a3 	rbit	r2, r3
 800696a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800696e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006972:	601a      	str	r2, [r3, #0]
  return result;
 8006974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006978:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800697c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800697e:	fab3 f383 	clz	r3, r3
 8006982:	b2db      	uxtb	r3, r3
 8006984:	095b      	lsrs	r3, r3, #5
 8006986:	b2db      	uxtb	r3, r3
 8006988:	f043 0302 	orr.w	r3, r3, #2
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b02      	cmp	r3, #2
 8006990:	d106      	bne.n	80069a0 <HAL_RCC_OscConfig+0xb44>
 8006992:	4b02      	ldr	r3, [pc, #8]	; (800699c <HAL_RCC_OscConfig+0xb40>)
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	e017      	b.n	80069c8 <HAL_RCC_OscConfig+0xb6c>
 8006998:	40007000 	.word	0x40007000
 800699c:	40021000 	.word	0x40021000
 80069a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80069a8:	2202      	movs	r2, #2
 80069aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	fa93 f2a3 	rbit	r2, r3
 80069ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069be:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	4bb3      	ldr	r3, [pc, #716]	; (8006c94 <HAL_RCC_OscConfig+0xe38>)
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80069cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80069d0:	2102      	movs	r1, #2
 80069d2:	6011      	str	r1, [r2, #0]
 80069d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80069d8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80069dc:	6812      	ldr	r2, [r2, #0]
 80069de:	fa92 f1a2 	rbit	r1, r2
 80069e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80069e6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80069ea:	6011      	str	r1, [r2, #0]
  return result;
 80069ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80069f0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80069f4:	6812      	ldr	r2, [r2, #0]
 80069f6:	fab2 f282 	clz	r2, r2
 80069fa:	b2d2      	uxtb	r2, r2
 80069fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a00:	b2d2      	uxtb	r2, r2
 8006a02:	f002 021f 	and.w	r2, r2, #31
 8006a06:	2101      	movs	r1, #1
 8006a08:	fa01 f202 	lsl.w	r2, r1, r2
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d180      	bne.n	8006914 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006a12:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d105      	bne.n	8006a26 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a1a:	4b9e      	ldr	r3, [pc, #632]	; (8006c94 <HAL_RCC_OscConfig+0xe38>)
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	4a9d      	ldr	r2, [pc, #628]	; (8006c94 <HAL_RCC_OscConfig+0xe38>)
 8006a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a24:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 825e 	beq.w	8006ef4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a38:	4b96      	ldr	r3, [pc, #600]	; (8006c94 <HAL_RCC_OscConfig+0xe38>)
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f003 030c 	and.w	r3, r3, #12
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	f000 821f 	beq.w	8006e84 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	f040 8170 	bne.w	8006d38 <HAL_RCC_OscConfig+0xedc>
 8006a58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a5c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006a60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a6a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	fa93 f2a3 	rbit	r2, r3
 8006a74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a78:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006a7c:	601a      	str	r2, [r3, #0]
  return result;
 8006a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a82:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006a86:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a88:	fab3 f383 	clz	r3, r3
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006a92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	461a      	mov	r2, r3
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a9e:	f7fe fe9f 	bl	80057e0 <HAL_GetTick>
 8006aa2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006aa6:	e009      	b.n	8006abc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aa8:	f7fe fe9a 	bl	80057e0 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d901      	bls.n	8006abc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e21c      	b.n	8006ef6 <HAL_RCC_OscConfig+0x109a>
 8006abc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ac0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006ac4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ac8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ace:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	fa93 f2a3 	rbit	r2, r3
 8006ad8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006adc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006ae0:	601a      	str	r2, [r3, #0]
  return result;
 8006ae2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ae6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006aea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006aec:	fab3 f383 	clz	r3, r3
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	095b      	lsrs	r3, r3, #5
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	f043 0301 	orr.w	r3, r3, #1
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d102      	bne.n	8006b06 <HAL_RCC_OscConfig+0xcaa>
 8006b00:	4b64      	ldr	r3, [pc, #400]	; (8006c94 <HAL_RCC_OscConfig+0xe38>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	e027      	b.n	8006b56 <HAL_RCC_OscConfig+0xcfa>
 8006b06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b0a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006b0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b18:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	fa93 f2a3 	rbit	r2, r3
 8006b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b26:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b30:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b3e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	fa93 f2a3 	rbit	r2, r3
 8006b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b4c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	4b50      	ldr	r3, [pc, #320]	; (8006c94 <HAL_RCC_OscConfig+0xe38>)
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006b5a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006b5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006b62:	6011      	str	r1, [r2, #0]
 8006b64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006b68:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006b6c:	6812      	ldr	r2, [r2, #0]
 8006b6e:	fa92 f1a2 	rbit	r1, r2
 8006b72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006b76:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8006b7a:	6011      	str	r1, [r2, #0]
  return result;
 8006b7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006b80:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8006b84:	6812      	ldr	r2, [r2, #0]
 8006b86:	fab2 f282 	clz	r2, r2
 8006b8a:	b2d2      	uxtb	r2, r2
 8006b8c:	f042 0220 	orr.w	r2, r2, #32
 8006b90:	b2d2      	uxtb	r2, r2
 8006b92:	f002 021f 	and.w	r2, r2, #31
 8006b96:	2101      	movs	r1, #1
 8006b98:	fa01 f202 	lsl.w	r2, r1, r2
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d182      	bne.n	8006aa8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ba2:	4b3c      	ldr	r3, [pc, #240]	; (8006c94 <HAL_RCC_OscConfig+0xe38>)
 8006ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba6:	f023 020f 	bic.w	r2, r3, #15
 8006baa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	4937      	ldr	r1, [pc, #220]	; (8006c94 <HAL_RCC_OscConfig+0xe38>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006bbc:	4b35      	ldr	r3, [pc, #212]	; (8006c94 <HAL_RCC_OscConfig+0xe38>)
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8006bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bc8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6a19      	ldr	r1, [r3, #32]
 8006bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	69db      	ldr	r3, [r3, #28]
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	492d      	ldr	r1, [pc, #180]	; (8006c94 <HAL_RCC_OscConfig+0xe38>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	604b      	str	r3, [r1, #4]
 8006be4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006be8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006bec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bf6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	fa93 f2a3 	rbit	r2, r3
 8006c00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c04:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006c08:	601a      	str	r2, [r3, #0]
  return result;
 8006c0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c0e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006c12:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c14:	fab3 f383 	clz	r3, r3
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006c1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	461a      	mov	r2, r3
 8006c26:	2301      	movs	r3, #1
 8006c28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c2a:	f7fe fdd9 	bl	80057e0 <HAL_GetTick>
 8006c2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c32:	e009      	b.n	8006c48 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c34:	f7fe fdd4 	bl	80057e0 <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e156      	b.n	8006ef6 <HAL_RCC_OscConfig+0x109a>
 8006c48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c4c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006c50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c5a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	fa93 f2a3 	rbit	r2, r3
 8006c64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c68:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006c6c:	601a      	str	r2, [r3, #0]
  return result;
 8006c6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c72:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006c76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c78:	fab3 f383 	clz	r3, r3
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	095b      	lsrs	r3, r3, #5
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	f043 0301 	orr.w	r3, r3, #1
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d105      	bne.n	8006c98 <HAL_RCC_OscConfig+0xe3c>
 8006c8c:	4b01      	ldr	r3, [pc, #4]	; (8006c94 <HAL_RCC_OscConfig+0xe38>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	e02a      	b.n	8006ce8 <HAL_RCC_OscConfig+0xe8c>
 8006c92:	bf00      	nop
 8006c94:	40021000 	.word	0x40021000
 8006c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c9c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006ca0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ca4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006caa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	fa93 f2a3 	rbit	r2, r3
 8006cb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cb8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cc2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006cc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cd0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	fa93 f2a3 	rbit	r2, r3
 8006cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cde:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	4b86      	ldr	r3, [pc, #536]	; (8006f00 <HAL_RCC_OscConfig+0x10a4>)
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006cec:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006cf0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006cf4:	6011      	str	r1, [r2, #0]
 8006cf6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006cfa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006cfe:	6812      	ldr	r2, [r2, #0]
 8006d00:	fa92 f1a2 	rbit	r1, r2
 8006d04:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006d08:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8006d0c:	6011      	str	r1, [r2, #0]
  return result;
 8006d0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006d12:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8006d16:	6812      	ldr	r2, [r2, #0]
 8006d18:	fab2 f282 	clz	r2, r2
 8006d1c:	b2d2      	uxtb	r2, r2
 8006d1e:	f042 0220 	orr.w	r2, r2, #32
 8006d22:	b2d2      	uxtb	r2, r2
 8006d24:	f002 021f 	and.w	r2, r2, #31
 8006d28:	2101      	movs	r1, #1
 8006d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8006d2e:	4013      	ands	r3, r2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f43f af7f 	beq.w	8006c34 <HAL_RCC_OscConfig+0xdd8>
 8006d36:	e0dd      	b.n	8006ef4 <HAL_RCC_OscConfig+0x1098>
 8006d38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d3c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006d40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d4a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	fa93 f2a3 	rbit	r2, r3
 8006d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d58:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006d5c:	601a      	str	r2, [r3, #0]
  return result;
 8006d5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d62:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006d66:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d68:	fab3 f383 	clz	r3, r3
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006d72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	461a      	mov	r2, r3
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d7e:	f7fe fd2f 	bl	80057e0 <HAL_GetTick>
 8006d82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d86:	e009      	b.n	8006d9c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d88:	f7fe fd2a 	bl	80057e0 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e0ac      	b.n	8006ef6 <HAL_RCC_OscConfig+0x109a>
 8006d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006da0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006da4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006da8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	fa93 f2a3 	rbit	r2, r3
 8006db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dbc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006dc0:	601a      	str	r2, [r3, #0]
  return result;
 8006dc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dc6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006dca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dcc:	fab3 f383 	clz	r3, r3
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	095b      	lsrs	r3, r3, #5
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	f043 0301 	orr.w	r3, r3, #1
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d102      	bne.n	8006de6 <HAL_RCC_OscConfig+0xf8a>
 8006de0:	4b47      	ldr	r3, [pc, #284]	; (8006f00 <HAL_RCC_OscConfig+0x10a4>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	e027      	b.n	8006e36 <HAL_RCC_OscConfig+0xfda>
 8006de6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dea:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006dee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006df2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006df8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	fa93 f2a3 	rbit	r2, r3
 8006e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e06:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e10:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006e14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e1e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	fa93 f2a3 	rbit	r2, r3
 8006e28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e2c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	4b33      	ldr	r3, [pc, #204]	; (8006f00 <HAL_RCC_OscConfig+0x10a4>)
 8006e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e36:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006e3a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006e3e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006e42:	6011      	str	r1, [r2, #0]
 8006e44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006e48:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006e4c:	6812      	ldr	r2, [r2, #0]
 8006e4e:	fa92 f1a2 	rbit	r1, r2
 8006e52:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006e56:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8006e5a:	6011      	str	r1, [r2, #0]
  return result;
 8006e5c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006e60:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8006e64:	6812      	ldr	r2, [r2, #0]
 8006e66:	fab2 f282 	clz	r2, r2
 8006e6a:	b2d2      	uxtb	r2, r2
 8006e6c:	f042 0220 	orr.w	r2, r2, #32
 8006e70:	b2d2      	uxtb	r2, r2
 8006e72:	f002 021f 	and.w	r2, r2, #31
 8006e76:	2101      	movs	r1, #1
 8006e78:	fa01 f202 	lsl.w	r2, r1, r2
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d182      	bne.n	8006d88 <HAL_RCC_OscConfig+0xf2c>
 8006e82:	e037      	b.n	8006ef4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d101      	bne.n	8006e98 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e02e      	b.n	8006ef6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006e98:	4b19      	ldr	r3, [pc, #100]	; (8006f00 <HAL_RCC_OscConfig+0x10a4>)
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8006ea0:	4b17      	ldr	r3, [pc, #92]	; (8006f00 <HAL_RCC_OscConfig+0x10a4>)
 8006ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006ea8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006eac:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8006eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006eb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d117      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006ec0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006ec4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ecc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d10b      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8006ed8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006edc:	f003 020f 	and.w	r2, r3, #15
 8006ee0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ee4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d001      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e000      	b.n	8006ef6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	40021000 	.word	0x40021000

08006f04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b09e      	sub	sp, #120	; 0x78
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e162      	b.n	80071e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f1c:	4b90      	ldr	r3, [pc, #576]	; (8007160 <HAL_RCC_ClockConfig+0x25c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0307 	and.w	r3, r3, #7
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d910      	bls.n	8006f4c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f2a:	4b8d      	ldr	r3, [pc, #564]	; (8007160 <HAL_RCC_ClockConfig+0x25c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f023 0207 	bic.w	r2, r3, #7
 8006f32:	498b      	ldr	r1, [pc, #556]	; (8007160 <HAL_RCC_ClockConfig+0x25c>)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f3a:	4b89      	ldr	r3, [pc, #548]	; (8007160 <HAL_RCC_ClockConfig+0x25c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0307 	and.w	r3, r3, #7
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d001      	beq.n	8006f4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e14a      	b.n	80071e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d008      	beq.n	8006f6a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f58:	4b82      	ldr	r3, [pc, #520]	; (8007164 <HAL_RCC_ClockConfig+0x260>)
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	497f      	ldr	r1, [pc, #508]	; (8007164 <HAL_RCC_ClockConfig+0x260>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 80dc 	beq.w	8007130 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d13c      	bne.n	8006ffa <HAL_RCC_ClockConfig+0xf6>
 8006f80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f84:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f88:	fa93 f3a3 	rbit	r3, r3
 8006f8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f90:	fab3 f383 	clz	r3, r3
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	095b      	lsrs	r3, r3, #5
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	f043 0301 	orr.w	r3, r3, #1
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d102      	bne.n	8006faa <HAL_RCC_ClockConfig+0xa6>
 8006fa4:	4b6f      	ldr	r3, [pc, #444]	; (8007164 <HAL_RCC_ClockConfig+0x260>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	e00f      	b.n	8006fca <HAL_RCC_ClockConfig+0xc6>
 8006faa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006fae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fb2:	fa93 f3a3 	rbit	r3, r3
 8006fb6:	667b      	str	r3, [r7, #100]	; 0x64
 8006fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006fbc:	663b      	str	r3, [r7, #96]	; 0x60
 8006fbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fc0:	fa93 f3a3 	rbit	r3, r3
 8006fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fc6:	4b67      	ldr	r3, [pc, #412]	; (8007164 <HAL_RCC_ClockConfig+0x260>)
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006fce:	65ba      	str	r2, [r7, #88]	; 0x58
 8006fd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fd2:	fa92 f2a2 	rbit	r2, r2
 8006fd6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006fd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fda:	fab2 f282 	clz	r2, r2
 8006fde:	b2d2      	uxtb	r2, r2
 8006fe0:	f042 0220 	orr.w	r2, r2, #32
 8006fe4:	b2d2      	uxtb	r2, r2
 8006fe6:	f002 021f 	and.w	r2, r2, #31
 8006fea:	2101      	movs	r1, #1
 8006fec:	fa01 f202 	lsl.w	r2, r1, r2
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d17b      	bne.n	80070ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e0f3      	b.n	80071e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d13c      	bne.n	800707c <HAL_RCC_ClockConfig+0x178>
 8007002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007006:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800700a:	fa93 f3a3 	rbit	r3, r3
 800700e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007012:	fab3 f383 	clz	r3, r3
 8007016:	b2db      	uxtb	r3, r3
 8007018:	095b      	lsrs	r3, r3, #5
 800701a:	b2db      	uxtb	r3, r3
 800701c:	f043 0301 	orr.w	r3, r3, #1
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b01      	cmp	r3, #1
 8007024:	d102      	bne.n	800702c <HAL_RCC_ClockConfig+0x128>
 8007026:	4b4f      	ldr	r3, [pc, #316]	; (8007164 <HAL_RCC_ClockConfig+0x260>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	e00f      	b.n	800704c <HAL_RCC_ClockConfig+0x148>
 800702c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007030:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007034:	fa93 f3a3 	rbit	r3, r3
 8007038:	647b      	str	r3, [r7, #68]	; 0x44
 800703a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800703e:	643b      	str	r3, [r7, #64]	; 0x40
 8007040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007042:	fa93 f3a3 	rbit	r3, r3
 8007046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007048:	4b46      	ldr	r3, [pc, #280]	; (8007164 <HAL_RCC_ClockConfig+0x260>)
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007050:	63ba      	str	r2, [r7, #56]	; 0x38
 8007052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007054:	fa92 f2a2 	rbit	r2, r2
 8007058:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800705a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800705c:	fab2 f282 	clz	r2, r2
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	f042 0220 	orr.w	r2, r2, #32
 8007066:	b2d2      	uxtb	r2, r2
 8007068:	f002 021f 	and.w	r2, r2, #31
 800706c:	2101      	movs	r1, #1
 800706e:	fa01 f202 	lsl.w	r2, r1, r2
 8007072:	4013      	ands	r3, r2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d13a      	bne.n	80070ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e0b2      	b.n	80071e2 <HAL_RCC_ClockConfig+0x2de>
 800707c:	2302      	movs	r3, #2
 800707e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007082:	fa93 f3a3 	rbit	r3, r3
 8007086:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800708a:	fab3 f383 	clz	r3, r3
 800708e:	b2db      	uxtb	r3, r3
 8007090:	095b      	lsrs	r3, r3, #5
 8007092:	b2db      	uxtb	r3, r3
 8007094:	f043 0301 	orr.w	r3, r3, #1
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b01      	cmp	r3, #1
 800709c:	d102      	bne.n	80070a4 <HAL_RCC_ClockConfig+0x1a0>
 800709e:	4b31      	ldr	r3, [pc, #196]	; (8007164 <HAL_RCC_ClockConfig+0x260>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	e00d      	b.n	80070c0 <HAL_RCC_ClockConfig+0x1bc>
 80070a4:	2302      	movs	r3, #2
 80070a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070aa:	fa93 f3a3 	rbit	r3, r3
 80070ae:	627b      	str	r3, [r7, #36]	; 0x24
 80070b0:	2302      	movs	r3, #2
 80070b2:	623b      	str	r3, [r7, #32]
 80070b4:	6a3b      	ldr	r3, [r7, #32]
 80070b6:	fa93 f3a3 	rbit	r3, r3
 80070ba:	61fb      	str	r3, [r7, #28]
 80070bc:	4b29      	ldr	r3, [pc, #164]	; (8007164 <HAL_RCC_ClockConfig+0x260>)
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	2202      	movs	r2, #2
 80070c2:	61ba      	str	r2, [r7, #24]
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	fa92 f2a2 	rbit	r2, r2
 80070ca:	617a      	str	r2, [r7, #20]
  return result;
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	fab2 f282 	clz	r2, r2
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	f042 0220 	orr.w	r2, r2, #32
 80070d8:	b2d2      	uxtb	r2, r2
 80070da:	f002 021f 	and.w	r2, r2, #31
 80070de:	2101      	movs	r1, #1
 80070e0:	fa01 f202 	lsl.w	r2, r1, r2
 80070e4:	4013      	ands	r3, r2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e079      	b.n	80071e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070ee:	4b1d      	ldr	r3, [pc, #116]	; (8007164 <HAL_RCC_ClockConfig+0x260>)
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f023 0203 	bic.w	r2, r3, #3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	491a      	ldr	r1, [pc, #104]	; (8007164 <HAL_RCC_ClockConfig+0x260>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007100:	f7fe fb6e 	bl	80057e0 <HAL_GetTick>
 8007104:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007106:	e00a      	b.n	800711e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007108:	f7fe fb6a 	bl	80057e0 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	f241 3288 	movw	r2, #5000	; 0x1388
 8007116:	4293      	cmp	r3, r2
 8007118:	d901      	bls.n	800711e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e061      	b.n	80071e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800711e:	4b11      	ldr	r3, [pc, #68]	; (8007164 <HAL_RCC_ClockConfig+0x260>)
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f003 020c 	and.w	r2, r3, #12
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	429a      	cmp	r2, r3
 800712e:	d1eb      	bne.n	8007108 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007130:	4b0b      	ldr	r3, [pc, #44]	; (8007160 <HAL_RCC_ClockConfig+0x25c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0307 	and.w	r3, r3, #7
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	429a      	cmp	r2, r3
 800713c:	d214      	bcs.n	8007168 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800713e:	4b08      	ldr	r3, [pc, #32]	; (8007160 <HAL_RCC_ClockConfig+0x25c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f023 0207 	bic.w	r2, r3, #7
 8007146:	4906      	ldr	r1, [pc, #24]	; (8007160 <HAL_RCC_ClockConfig+0x25c>)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	4313      	orrs	r3, r2
 800714c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800714e:	4b04      	ldr	r3, [pc, #16]	; (8007160 <HAL_RCC_ClockConfig+0x25c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	429a      	cmp	r2, r3
 800715a:	d005      	beq.n	8007168 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e040      	b.n	80071e2 <HAL_RCC_ClockConfig+0x2de>
 8007160:	40022000 	.word	0x40022000
 8007164:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d008      	beq.n	8007186 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007174:	4b1d      	ldr	r3, [pc, #116]	; (80071ec <HAL_RCC_ClockConfig+0x2e8>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	491a      	ldr	r1, [pc, #104]	; (80071ec <HAL_RCC_ClockConfig+0x2e8>)
 8007182:	4313      	orrs	r3, r2
 8007184:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0308 	and.w	r3, r3, #8
 800718e:	2b00      	cmp	r3, #0
 8007190:	d009      	beq.n	80071a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007192:	4b16      	ldr	r3, [pc, #88]	; (80071ec <HAL_RCC_ClockConfig+0x2e8>)
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	00db      	lsls	r3, r3, #3
 80071a0:	4912      	ldr	r1, [pc, #72]	; (80071ec <HAL_RCC_ClockConfig+0x2e8>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80071a6:	f000 f829 	bl	80071fc <HAL_RCC_GetSysClockFreq>
 80071aa:	4601      	mov	r1, r0
 80071ac:	4b0f      	ldr	r3, [pc, #60]	; (80071ec <HAL_RCC_ClockConfig+0x2e8>)
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071b4:	22f0      	movs	r2, #240	; 0xf0
 80071b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	fa92 f2a2 	rbit	r2, r2
 80071be:	60fa      	str	r2, [r7, #12]
  return result;
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	fab2 f282 	clz	r2, r2
 80071c6:	b2d2      	uxtb	r2, r2
 80071c8:	40d3      	lsrs	r3, r2
 80071ca:	4a09      	ldr	r2, [pc, #36]	; (80071f0 <HAL_RCC_ClockConfig+0x2ec>)
 80071cc:	5cd3      	ldrb	r3, [r2, r3]
 80071ce:	fa21 f303 	lsr.w	r3, r1, r3
 80071d2:	4a08      	ldr	r2, [pc, #32]	; (80071f4 <HAL_RCC_ClockConfig+0x2f0>)
 80071d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80071d6:	4b08      	ldr	r3, [pc, #32]	; (80071f8 <HAL_RCC_ClockConfig+0x2f4>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fe fab8 	bl	8005750 <HAL_InitTick>
  
  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3778      	adds	r7, #120	; 0x78
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	40021000 	.word	0x40021000
 80071f0:	0800a414 	.word	0x0800a414
 80071f4:	20000000 	.word	0x20000000
 80071f8:	20000004 	.word	0x20000004

080071fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b08b      	sub	sp, #44	; 0x2c
 8007200:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	61fb      	str	r3, [r7, #28]
 8007206:	2300      	movs	r3, #0
 8007208:	61bb      	str	r3, [r7, #24]
 800720a:	2300      	movs	r3, #0
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
 800720e:	2300      	movs	r3, #0
 8007210:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007216:	4b2a      	ldr	r3, [pc, #168]	; (80072c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	f003 030c 	and.w	r3, r3, #12
 8007222:	2b04      	cmp	r3, #4
 8007224:	d002      	beq.n	800722c <HAL_RCC_GetSysClockFreq+0x30>
 8007226:	2b08      	cmp	r3, #8
 8007228:	d003      	beq.n	8007232 <HAL_RCC_GetSysClockFreq+0x36>
 800722a:	e03f      	b.n	80072ac <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800722c:	4b25      	ldr	r3, [pc, #148]	; (80072c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800722e:	623b      	str	r3, [r7, #32]
      break;
 8007230:	e03f      	b.n	80072b2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007238:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800723c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	fa92 f2a2 	rbit	r2, r2
 8007244:	607a      	str	r2, [r7, #4]
  return result;
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	fab2 f282 	clz	r2, r2
 800724c:	b2d2      	uxtb	r2, r2
 800724e:	40d3      	lsrs	r3, r2
 8007250:	4a1d      	ldr	r2, [pc, #116]	; (80072c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007252:	5cd3      	ldrb	r3, [r2, r3]
 8007254:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007256:	4b1a      	ldr	r3, [pc, #104]	; (80072c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725a:	f003 030f 	and.w	r3, r3, #15
 800725e:	220f      	movs	r2, #15
 8007260:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	fa92 f2a2 	rbit	r2, r2
 8007268:	60fa      	str	r2, [r7, #12]
  return result;
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	fab2 f282 	clz	r2, r2
 8007270:	b2d2      	uxtb	r2, r2
 8007272:	40d3      	lsrs	r3, r2
 8007274:	4a15      	ldr	r2, [pc, #84]	; (80072cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8007276:	5cd3      	ldrb	r3, [r2, r3]
 8007278:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d008      	beq.n	8007296 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007284:	4a0f      	ldr	r2, [pc, #60]	; (80072c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	fbb2 f2f3 	udiv	r2, r2, r3
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	fb02 f303 	mul.w	r3, r2, r3
 8007292:	627b      	str	r3, [r7, #36]	; 0x24
 8007294:	e007      	b.n	80072a6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007296:	4a0b      	ldr	r2, [pc, #44]	; (80072c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	fbb2 f2f3 	udiv	r2, r2, r3
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	fb02 f303 	mul.w	r3, r2, r3
 80072a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	623b      	str	r3, [r7, #32]
      break;
 80072aa:	e002      	b.n	80072b2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80072ac:	4b05      	ldr	r3, [pc, #20]	; (80072c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80072ae:	623b      	str	r3, [r7, #32]
      break;
 80072b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072b2:	6a3b      	ldr	r3, [r7, #32]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	372c      	adds	r7, #44	; 0x2c
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bc80      	pop	{r7}
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	40021000 	.word	0x40021000
 80072c4:	007a1200 	.word	0x007a1200
 80072c8:	0800a42c 	.word	0x0800a42c
 80072cc:	0800a43c 	.word	0x0800a43c

080072d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072d0:	b480      	push	{r7}
 80072d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072d4:	4b02      	ldr	r3, [pc, #8]	; (80072e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80072d6:	681b      	ldr	r3, [r3, #0]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	46bd      	mov	sp, r7
 80072dc:	bc80      	pop	{r7}
 80072de:	4770      	bx	lr
 80072e0:	20000000 	.word	0x20000000

080072e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80072ea:	f7ff fff1 	bl	80072d0 <HAL_RCC_GetHCLKFreq>
 80072ee:	4601      	mov	r1, r0
 80072f0:	4b0b      	ldr	r3, [pc, #44]	; (8007320 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072f8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80072fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	fa92 f2a2 	rbit	r2, r2
 8007304:	603a      	str	r2, [r7, #0]
  return result;
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	fab2 f282 	clz	r2, r2
 800730c:	b2d2      	uxtb	r2, r2
 800730e:	40d3      	lsrs	r3, r2
 8007310:	4a04      	ldr	r2, [pc, #16]	; (8007324 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007312:	5cd3      	ldrb	r3, [r2, r3]
 8007314:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007318:	4618      	mov	r0, r3
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	40021000 	.word	0x40021000
 8007324:	0800a424 	.word	0x0800a424

08007328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800732e:	f7ff ffcf 	bl	80072d0 <HAL_RCC_GetHCLKFreq>
 8007332:	4601      	mov	r1, r0
 8007334:	4b0b      	ldr	r3, [pc, #44]	; (8007364 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800733c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007340:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	fa92 f2a2 	rbit	r2, r2
 8007348:	603a      	str	r2, [r7, #0]
  return result;
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	fab2 f282 	clz	r2, r2
 8007350:	b2d2      	uxtb	r2, r2
 8007352:	40d3      	lsrs	r3, r2
 8007354:	4a04      	ldr	r2, [pc, #16]	; (8007368 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007356:	5cd3      	ldrb	r3, [r2, r3]
 8007358:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	40021000 	.word	0x40021000
 8007368:	0800a424 	.word	0x0800a424

0800736c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b092      	sub	sp, #72	; 0x48
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800737c:	2300      	movs	r3, #0
 800737e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 80d4 	beq.w	8007538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007390:	4b4e      	ldr	r3, [pc, #312]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10e      	bne.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800739c:	4b4b      	ldr	r3, [pc, #300]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800739e:	69db      	ldr	r3, [r3, #28]
 80073a0:	4a4a      	ldr	r2, [pc, #296]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073a6:	61d3      	str	r3, [r2, #28]
 80073a8:	4b48      	ldr	r3, [pc, #288]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073b0:	60bb      	str	r3, [r7, #8]
 80073b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073b4:	2301      	movs	r3, #1
 80073b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073ba:	4b45      	ldr	r3, [pc, #276]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d118      	bne.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073c6:	4b42      	ldr	r3, [pc, #264]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a41      	ldr	r2, [pc, #260]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073d2:	f7fe fa05 	bl	80057e0 <HAL_GetTick>
 80073d6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073d8:	e008      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073da:	f7fe fa01 	bl	80057e0 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b64      	cmp	r3, #100	; 0x64
 80073e6:	d901      	bls.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e1d6      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073ec:	4b38      	ldr	r3, [pc, #224]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d0f0      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073f8:	4b34      	ldr	r3, [pc, #208]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073fa:	6a1b      	ldr	r3, [r3, #32]
 80073fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007400:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 8084 	beq.w	8007512 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007412:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007414:	429a      	cmp	r2, r3
 8007416:	d07c      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007418:	4b2c      	ldr	r3, [pc, #176]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007426:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742a:	fa93 f3a3 	rbit	r3, r3
 800742e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007432:	fab3 f383 	clz	r3, r3
 8007436:	b2db      	uxtb	r3, r3
 8007438:	461a      	mov	r2, r3
 800743a:	4b26      	ldr	r3, [pc, #152]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800743c:	4413      	add	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	461a      	mov	r2, r3
 8007442:	2301      	movs	r3, #1
 8007444:	6013      	str	r3, [r2, #0]
 8007446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800744a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800744c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744e:	fa93 f3a3 	rbit	r3, r3
 8007452:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007456:	fab3 f383 	clz	r3, r3
 800745a:	b2db      	uxtb	r3, r3
 800745c:	461a      	mov	r2, r3
 800745e:	4b1d      	ldr	r3, [pc, #116]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007460:	4413      	add	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	461a      	mov	r2, r3
 8007466:	2300      	movs	r3, #0
 8007468:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800746a:	4a18      	ldr	r2, [pc, #96]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800746c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800746e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	d04b      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800747a:	f7fe f9b1 	bl	80057e0 <HAL_GetTick>
 800747e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007480:	e00a      	b.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007482:	f7fe f9ad 	bl	80057e0 <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007490:	4293      	cmp	r3, r2
 8007492:	d901      	bls.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e180      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007498:	2302      	movs	r3, #2
 800749a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749e:	fa93 f3a3 	rbit	r3, r3
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24
 80074a4:	2302      	movs	r3, #2
 80074a6:	623b      	str	r3, [r7, #32]
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	fa93 f3a3 	rbit	r3, r3
 80074ae:	61fb      	str	r3, [r7, #28]
  return result;
 80074b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074b2:	fab3 f383 	clz	r3, r3
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	095b      	lsrs	r3, r3, #5
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	f043 0302 	orr.w	r3, r3, #2
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d108      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80074c6:	4b01      	ldr	r3, [pc, #4]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	e00d      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80074cc:	40021000 	.word	0x40021000
 80074d0:	40007000 	.word	0x40007000
 80074d4:	10908100 	.word	0x10908100
 80074d8:	2302      	movs	r3, #2
 80074da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	fa93 f3a3 	rbit	r3, r3
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	4b9a      	ldr	r3, [pc, #616]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	2202      	movs	r2, #2
 80074ea:	613a      	str	r2, [r7, #16]
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	fa92 f2a2 	rbit	r2, r2
 80074f2:	60fa      	str	r2, [r7, #12]
  return result;
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	fab2 f282 	clz	r2, r2
 80074fa:	b2d2      	uxtb	r2, r2
 80074fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007500:	b2d2      	uxtb	r2, r2
 8007502:	f002 021f 	and.w	r2, r2, #31
 8007506:	2101      	movs	r1, #1
 8007508:	fa01 f202 	lsl.w	r2, r1, r2
 800750c:	4013      	ands	r3, r2
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0b7      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007512:	4b8f      	ldr	r3, [pc, #572]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	498c      	ldr	r1, [pc, #560]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007520:	4313      	orrs	r3, r2
 8007522:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007524:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007528:	2b01      	cmp	r3, #1
 800752a:	d105      	bne.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800752c:	4b88      	ldr	r3, [pc, #544]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	4a87      	ldr	r2, [pc, #540]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007536:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	2b00      	cmp	r3, #0
 8007542:	d008      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007544:	4b82      	ldr	r3, [pc, #520]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007548:	f023 0203 	bic.w	r2, r3, #3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	497f      	ldr	r1, [pc, #508]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007552:	4313      	orrs	r3, r2
 8007554:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d008      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007562:	4b7b      	ldr	r3, [pc, #492]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007566:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	4978      	ldr	r1, [pc, #480]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007570:	4313      	orrs	r3, r2
 8007572:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b00      	cmp	r3, #0
 800757e:	d008      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007580:	4b73      	ldr	r3, [pc, #460]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007584:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	4970      	ldr	r1, [pc, #448]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800758e:	4313      	orrs	r3, r2
 8007590:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0320 	and.w	r3, r3, #32
 800759a:	2b00      	cmp	r3, #0
 800759c:	d008      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800759e:	4b6c      	ldr	r3, [pc, #432]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80075a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a2:	f023 0210 	bic.w	r2, r3, #16
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	4969      	ldr	r1, [pc, #420]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d008      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80075bc:	4b64      	ldr	r3, [pc, #400]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c8:	4961      	ldr	r1, [pc, #388]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d008      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075da:	4b5d      	ldr	r3, [pc, #372]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80075dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075de:	f023 0220 	bic.w	r2, r3, #32
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	495a      	ldr	r1, [pc, #360]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d008      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075f8:	4b55      	ldr	r3, [pc, #340]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80075fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	4952      	ldr	r1, [pc, #328]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007606:	4313      	orrs	r3, r2
 8007608:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0308 	and.w	r3, r3, #8
 8007612:	2b00      	cmp	r3, #0
 8007614:	d008      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007616:	4b4e      	ldr	r3, [pc, #312]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	494b      	ldr	r1, [pc, #300]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007624:	4313      	orrs	r3, r2
 8007626:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0310 	and.w	r3, r3, #16
 8007630:	2b00      	cmp	r3, #0
 8007632:	d008      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007634:	4b46      	ldr	r3, [pc, #280]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007638:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	4943      	ldr	r1, [pc, #268]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007642:	4313      	orrs	r3, r2
 8007644:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800764e:	2b00      	cmp	r3, #0
 8007650:	d008      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007652:	4b3f      	ldr	r3, [pc, #252]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765e:	493c      	ldr	r1, [pc, #240]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007660:	4313      	orrs	r3, r2
 8007662:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800766c:	2b00      	cmp	r3, #0
 800766e:	d008      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007670:	4b37      	ldr	r3, [pc, #220]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007674:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767c:	4934      	ldr	r1, [pc, #208]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800767e:	4313      	orrs	r3, r2
 8007680:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800768a:	2b00      	cmp	r3, #0
 800768c:	d008      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800768e:	4b30      	ldr	r3, [pc, #192]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007692:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769a:	492d      	ldr	r1, [pc, #180]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800769c:	4313      	orrs	r3, r2
 800769e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d008      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80076ac:	4b28      	ldr	r3, [pc, #160]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80076ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b8:	4925      	ldr	r1, [pc, #148]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d008      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80076ca:	4b21      	ldr	r3, [pc, #132]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80076cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ce:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d6:	491e      	ldr	r1, [pc, #120]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d008      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80076e8:	4b19      	ldr	r3, [pc, #100]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80076ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f4:	4916      	ldr	r1, [pc, #88]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d008      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8007706:	4b12      	ldr	r3, [pc, #72]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007712:	490f      	ldr	r1, [pc, #60]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007714:	4313      	orrs	r3, r2
 8007716:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d008      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007724:	4b0a      	ldr	r3, [pc, #40]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007728:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007730:	4907      	ldr	r1, [pc, #28]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007732:	4313      	orrs	r3, r2
 8007734:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00c      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8007742:	4b03      	ldr	r3, [pc, #12]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007746:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	e002      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800774e:	bf00      	nop
 8007750:	40021000 	.word	0x40021000
 8007754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007756:	4913      	ldr	r1, [pc, #76]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007758:	4313      	orrs	r3, r2
 800775a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d008      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8007768:	4b0e      	ldr	r3, [pc, #56]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800776a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007774:	490b      	ldr	r1, [pc, #44]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007776:	4313      	orrs	r3, r2
 8007778:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d008      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8007786:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007792:	4904      	ldr	r1, [pc, #16]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007794:	4313      	orrs	r3, r2
 8007796:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3748      	adds	r7, #72	; 0x48
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	40021000 	.word	0x40021000

080077a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80077a8:	b480      	push	{r7}
 80077aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80077ac:	e7fe      	b.n	80077ac <NMI_Handler+0x4>

080077ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80077ae:	b480      	push	{r7}
 80077b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80077b2:	e7fe      	b.n	80077b2 <HardFault_Handler+0x4>

080077b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80077b4:	b480      	push	{r7}
 80077b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80077b8:	e7fe      	b.n	80077b8 <MemManage_Handler+0x4>

080077ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80077ba:	b480      	push	{r7}
 80077bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80077be:	e7fe      	b.n	80077be <BusFault_Handler+0x4>

080077c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80077c0:	b480      	push	{r7}
 80077c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80077c4:	e7fe      	b.n	80077c4 <UsageFault_Handler+0x4>

080077c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80077c6:	b480      	push	{r7}
 80077c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80077ca:	bf00      	nop
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bc80      	pop	{r7}
 80077d0:	4770      	bx	lr

080077d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80077d2:	b480      	push	{r7}
 80077d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80077d6:	bf00      	nop
 80077d8:	46bd      	mov	sp, r7
 80077da:	bc80      	pop	{r7}
 80077dc:	4770      	bx	lr
	...

080077e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80077e4:	4802      	ldr	r0, [pc, #8]	; (80077f0 <DMA1_Channel1_IRQHandler+0x10>)
 80077e6:	f7fa ff5b 	bl	80026a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80077ea:	bf00      	nop
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	20000178 	.word	0x20000178

080077f4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80077f8:	4802      	ldr	r0, [pc, #8]	; (8007804 <DMA1_Channel6_IRQHandler+0x10>)
 80077fa:	f7fa ff51 	bl	80026a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80077fe:	bf00      	nop
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	2000027c 	.word	0x2000027c

08007808 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800780c:	4802      	ldr	r0, [pc, #8]	; (8007818 <DMA1_Channel7_IRQHandler+0x10>)
 800780e:	f7fa ff47 	bl	80026a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8007812:	bf00      	nop
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	20000238 	.word	0x20000238

0800781c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007820:	4802      	ldr	r0, [pc, #8]	; (800782c <TIM3_IRQHandler+0x10>)
 8007822:	f7fb fa7f 	bl	8002d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007826:	bf00      	nop
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	200000cc 	.word	0x200000cc

08007830 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8007834:	4802      	ldr	r0, [pc, #8]	; (8007840 <I2C1_EV_IRQHandler+0x10>)
 8007836:	f7fc fc59 	bl	80040ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800783a:	bf00      	nop
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	200001bc 	.word	0x200001bc

08007844 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007848:	4802      	ldr	r0, [pc, #8]	; (8007854 <USART1_IRQHandler+0x10>)
 800784a:	f000 fb79 	bl	8007f40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800784e:	bf00      	nop
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	2000034c 	.word	0x2000034c

08007858 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800785c:	4802      	ldr	r0, [pc, #8]	; (8007868 <USART2_IRQHandler+0x10>)
 800785e:	f000 fb6f 	bl	8007f40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007862:	bf00      	nop
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	200003d0 	.word	0x200003d0

0800786c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8007870:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007874:	f7fa fde0 	bl	8002438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007878:	bf00      	nop
 800787a:	bd80      	pop	{r7, pc}

0800787c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8007880:	4802      	ldr	r0, [pc, #8]	; (800788c <SPI3_IRQHandler+0x10>)
 8007882:	f000 f91d 	bl	8007ac0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8007886:	bf00      	nop
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	200002c0 	.word	0x200002c0

08007890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007898:	4a14      	ldr	r2, [pc, #80]	; (80078ec <_sbrk+0x5c>)
 800789a:	4b15      	ldr	r3, [pc, #84]	; (80078f0 <_sbrk+0x60>)
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80078a4:	4b13      	ldr	r3, [pc, #76]	; (80078f4 <_sbrk+0x64>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d102      	bne.n	80078b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80078ac:	4b11      	ldr	r3, [pc, #68]	; (80078f4 <_sbrk+0x64>)
 80078ae:	4a12      	ldr	r2, [pc, #72]	; (80078f8 <_sbrk+0x68>)
 80078b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80078b2:	4b10      	ldr	r3, [pc, #64]	; (80078f4 <_sbrk+0x64>)
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4413      	add	r3, r2
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d207      	bcs.n	80078d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80078c0:	f002 f8fa 	bl	8009ab8 <__errno>
 80078c4:	4603      	mov	r3, r0
 80078c6:	220c      	movs	r2, #12
 80078c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80078ca:	f04f 33ff 	mov.w	r3, #4294967295
 80078ce:	e009      	b.n	80078e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80078d0:	4b08      	ldr	r3, [pc, #32]	; (80078f4 <_sbrk+0x64>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80078d6:	4b07      	ldr	r3, [pc, #28]	; (80078f4 <_sbrk+0x64>)
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4413      	add	r3, r2
 80078de:	4a05      	ldr	r2, [pc, #20]	; (80078f4 <_sbrk+0x64>)
 80078e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80078e2:	68fb      	ldr	r3, [r7, #12]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	20010000 	.word	0x20010000
 80078f0:	00000400 	.word	0x00000400
 80078f4:	20000120 	.word	0x20000120
 80078f8:	20001498 	.word	0x20001498

080078fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e0c1      	b.n	8007a92 <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007912:	2b00      	cmp	r3, #0
 8007914:	d108      	bne.n	8007928 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800791e:	d009      	beq.n	8007934 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	61da      	str	r2, [r3, #28]
 8007926:	e005      	b.n	8007934 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d12a      	bne.n	800799c <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a52      	ldr	r2, [pc, #328]	; (8007a9c <HAL_SPI_Init+0x1a0>)
 8007952:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a52      	ldr	r2, [pc, #328]	; (8007aa0 <HAL_SPI_Init+0x1a4>)
 8007958:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a51      	ldr	r2, [pc, #324]	; (8007aa4 <HAL_SPI_Init+0x1a8>)
 800795e:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a51      	ldr	r2, [pc, #324]	; (8007aa8 <HAL_SPI_Init+0x1ac>)
 8007964:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a50      	ldr	r2, [pc, #320]	; (8007aac <HAL_SPI_Init+0x1b0>)
 800796a:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a50      	ldr	r2, [pc, #320]	; (8007ab0 <HAL_SPI_Init+0x1b4>)
 8007970:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a4f      	ldr	r2, [pc, #316]	; (8007ab4 <HAL_SPI_Init+0x1b8>)
 8007976:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a4f      	ldr	r2, [pc, #316]	; (8007ab8 <HAL_SPI_Init+0x1bc>)
 800797c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007986:	2b00      	cmp	r3, #0
 8007988:	d103      	bne.n	8007992 <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a4b      	ldr	r2, [pc, #300]	; (8007abc <HAL_SPI_Init+0x1c0>)
 800798e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2202      	movs	r2, #2
 80079a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079bc:	d902      	bls.n	80079c4 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80079be:	2300      	movs	r3, #0
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	e002      	b.n	80079ca <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80079c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80079d2:	d007      	beq.n	80079e4 <HAL_SPI_Init+0xe8>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079dc:	d002      	beq.n	80079e4 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80079f4:	431a      	orrs	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	431a      	orrs	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a12:	431a      	orrs	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	69db      	ldr	r3, [r3, #28]
 8007a18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a26:	ea42 0103 	orr.w	r1, r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	430a      	orrs	r2, r1
 8007a38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	0c1b      	lsrs	r3, r3, #16
 8007a40:	f003 0204 	and.w	r2, r3, #4
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	f003 0310 	and.w	r3, r3, #16
 8007a4c:	431a      	orrs	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a52:	f003 0308 	and.w	r3, r3, #8
 8007a56:	431a      	orrs	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007a60:	ea42 0103 	orr.w	r1, r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	69da      	ldr	r2, [r3, #28]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	08007cc1 	.word	0x08007cc1
 8007aa0:	08007cd3 	.word	0x08007cd3
 8007aa4:	08007ce5 	.word	0x08007ce5
 8007aa8:	08007cf7 	.word	0x08007cf7
 8007aac:	08007d09 	.word	0x08007d09
 8007ab0:	08007d1b 	.word	0x08007d1b
 8007ab4:	08007d2d 	.word	0x08007d2d
 8007ab8:	08007d3f 	.word	0x08007d3f
 8007abc:	08005c65 	.word	0x08005c65

08007ac0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b088      	sub	sp, #32
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	099b      	lsrs	r3, r3, #6
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10f      	bne.n	8007b04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00a      	beq.n	8007b04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	099b      	lsrs	r3, r3, #6
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d004      	beq.n	8007b04 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	4798      	blx	r3
    return;
 8007b02:	e0d8      	b.n	8007cb6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	085b      	lsrs	r3, r3, #1
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00a      	beq.n	8007b26 <HAL_SPI_IRQHandler+0x66>
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	09db      	lsrs	r3, r3, #7
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d004      	beq.n	8007b26 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	4798      	blx	r3
    return;
 8007b24:	e0c7      	b.n	8007cb6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	095b      	lsrs	r3, r3, #5
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10c      	bne.n	8007b4c <HAL_SPI_IRQHandler+0x8c>
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	099b      	lsrs	r3, r3, #6
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d106      	bne.n	8007b4c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	0a1b      	lsrs	r3, r3, #8
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 80b5 	beq.w	8007cb6 <HAL_SPI_IRQHandler+0x1f6>
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	095b      	lsrs	r3, r3, #5
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 80ae 	beq.w	8007cb6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	099b      	lsrs	r3, r3, #6
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d023      	beq.n	8007bae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d011      	beq.n	8007b96 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b76:	f043 0204 	orr.w	r2, r3, #4
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b7e:	2300      	movs	r3, #0
 8007b80:	617b      	str	r3, [r7, #20]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	617b      	str	r3, [r7, #20]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	617b      	str	r3, [r7, #20]
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	e00b      	b.n	8007bae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b96:	2300      	movs	r3, #0
 8007b98:	613b      	str	r3, [r7, #16]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	613b      	str	r3, [r7, #16]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	613b      	str	r3, [r7, #16]
 8007baa:	693b      	ldr	r3, [r7, #16]
        return;
 8007bac:	e083      	b.n	8007cb6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	095b      	lsrs	r3, r3, #5
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d014      	beq.n	8007be4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bbe:	f043 0201 	orr.w	r2, r3, #1
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	0a1b      	lsrs	r3, r3, #8
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00c      	beq.n	8007c0a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bf4:	f043 0208 	orr.w	r2, r3, #8
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	60bb      	str	r3, [r7, #8]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	60bb      	str	r3, [r7, #8]
 8007c08:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d050      	beq.n	8007cb4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c20:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	f003 0302 	and.w	r3, r3, #2
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d104      	bne.n	8007c3e <HAL_SPI_IRQHandler+0x17e>
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d034      	beq.n	8007ca8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 0203 	bic.w	r2, r2, #3
 8007c4c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d011      	beq.n	8007c7a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c5a:	4a18      	ldr	r2, [pc, #96]	; (8007cbc <HAL_SPI_IRQHandler+0x1fc>)
 8007c5c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fa fcde 	bl	8002624 <HAL_DMA_Abort_IT>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d005      	beq.n	8007c7a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d017      	beq.n	8007cb2 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c86:	4a0d      	ldr	r2, [pc, #52]	; (8007cbc <HAL_SPI_IRQHandler+0x1fc>)
 8007c88:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fa fcc8 	bl	8002624 <HAL_DMA_Abort_IT>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00b      	beq.n	8007cb2 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007ca6:	e004      	b.n	8007cb2 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007cb0:	e000      	b.n	8007cb4 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8007cb2:	bf00      	nop
    return;
 8007cb4:	bf00      	nop
  }
}
 8007cb6:	3720      	adds	r7, #32
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	08007d51 	.word	0x08007d51

08007cc0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bc80      	pop	{r7}
 8007cd0:	4770      	bx	lr

08007cd2 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007cda:	bf00      	nop
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bc80      	pop	{r7}
 8007ce2:	4770      	bx	lr

08007ce4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bc80      	pop	{r7}
 8007cf4:	4770      	bx	lr

08007cf6 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b083      	sub	sp, #12
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007cfe:	bf00      	nop
 8007d00:	370c      	adds	r7, #12
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bc80      	pop	{r7}
 8007d06:	4770      	bx	lr

08007d08 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bc80      	pop	{r7}
 8007d18:	4770      	bx	lr

08007d1a <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bc80      	pop	{r7}
 8007d2a:	4770      	bx	lr

08007d2c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bc80      	pop	{r7}
 8007d3c:	4770      	bx	lr

08007d3e <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b083      	sub	sp, #12
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8007d46:	bf00      	nop
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bc80      	pop	{r7}
 8007d4e:	4770      	bx	lr

08007d50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d74:	bf00      	nop
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e040      	b.n	8007e10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d106      	bne.n	8007da4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7fd ffd2 	bl	8005d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2224      	movs	r2, #36	; 0x24
 8007da8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 0201 	bic.w	r2, r2, #1
 8007db8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fbbc 	bl	8008538 <UART_SetConfig>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d101      	bne.n	8007dca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e022      	b.n	8007e10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d002      	beq.n	8007dd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fd86 	bl	80088e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007de6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689a      	ldr	r2, [r3, #8]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007df6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f042 0201 	orr.w	r2, r2, #1
 8007e06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fe0c 	bl	8008a26 <UART_CheckIdleState>
 8007e0e:	4603      	mov	r3, r0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b08a      	sub	sp, #40	; 0x28
 8007e1c:	af02      	add	r7, sp, #8
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	603b      	str	r3, [r7, #0]
 8007e24:	4613      	mov	r3, r2
 8007e26:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e2c:	2b20      	cmp	r3, #32
 8007e2e:	f040 8082 	bne.w	8007f36 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <HAL_UART_Transmit+0x26>
 8007e38:	88fb      	ldrh	r3, [r7, #6]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e07a      	b.n	8007f38 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d101      	bne.n	8007e50 <HAL_UART_Transmit+0x38>
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	e073      	b.n	8007f38 <HAL_UART_Transmit+0x120>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2221      	movs	r2, #33	; 0x21
 8007e64:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e66:	f7fd fcbb 	bl	80057e0 <HAL_GetTick>
 8007e6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	88fa      	ldrh	r2, [r7, #6]
 8007e70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	88fa      	ldrh	r2, [r7, #6]
 8007e78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e84:	d108      	bne.n	8007e98 <HAL_UART_Transmit+0x80>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d104      	bne.n	8007e98 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	61bb      	str	r3, [r7, #24]
 8007e96:	e003      	b.n	8007ea0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007ea8:	e02d      	b.n	8007f06 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2180      	movs	r1, #128	; 0x80
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f000 fdff 	bl	8008ab8 <UART_WaitOnFlagUntilTimeout>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e039      	b.n	8007f38 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10b      	bne.n	8007ee2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	881a      	ldrh	r2, [r3, #0]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ed6:	b292      	uxth	r2, r2
 8007ed8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	3302      	adds	r3, #2
 8007ede:	61bb      	str	r3, [r7, #24]
 8007ee0:	e008      	b.n	8007ef4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	781a      	ldrb	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	b292      	uxth	r2, r2
 8007eec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	3b01      	subs	r3, #1
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1cb      	bne.n	8007eaa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	2140      	movs	r1, #64	; 0x40
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f000 fdcb 	bl	8008ab8 <UART_WaitOnFlagUntilTimeout>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d001      	beq.n	8007f2c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e005      	b.n	8007f38 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	e000      	b.n	8007f38 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007f36:	2302      	movs	r3, #2
  }
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3720      	adds	r7, #32
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b0ba      	sub	sp, #232	; 0xe8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	69db      	ldr	r3, [r3, #28]
 8007f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007f6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8007f6e:	4013      	ands	r3, r2
 8007f70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007f74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d115      	bne.n	8007fa8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f80:	f003 0320 	and.w	r3, r3, #32
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00f      	beq.n	8007fa8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f8c:	f003 0320 	and.w	r3, r3, #32
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d009      	beq.n	8007fa8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f000 82a3 	beq.w	80084e4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	4798      	blx	r3
      }
      return;
 8007fa6:	e29d      	b.n	80084e4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007fa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 8117 	beq.w	80081e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d106      	bne.n	8007fcc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007fbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007fc2:	4b85      	ldr	r3, [pc, #532]	; (80081d8 <HAL_UART_IRQHandler+0x298>)
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 810a 	beq.w	80081e0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d011      	beq.n	8007ffc <HAL_UART_IRQHandler+0xbc>
 8007fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00b      	beq.n	8007ffc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ff2:	f043 0201 	orr.w	r2, r3, #1
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008000:	f003 0302 	and.w	r3, r3, #2
 8008004:	2b00      	cmp	r3, #0
 8008006:	d011      	beq.n	800802c <HAL_UART_IRQHandler+0xec>
 8008008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00b      	beq.n	800802c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2202      	movs	r2, #2
 800801a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008022:	f043 0204 	orr.w	r2, r3, #4
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800802c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b00      	cmp	r3, #0
 8008036:	d011      	beq.n	800805c <HAL_UART_IRQHandler+0x11c>
 8008038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00b      	beq.n	800805c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2204      	movs	r2, #4
 800804a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008052:	f043 0202 	orr.w	r2, r3, #2
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800805c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008060:	f003 0308 	and.w	r3, r3, #8
 8008064:	2b00      	cmp	r3, #0
 8008066:	d017      	beq.n	8008098 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800806c:	f003 0320 	and.w	r3, r3, #32
 8008070:	2b00      	cmp	r3, #0
 8008072:	d105      	bne.n	8008080 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008078:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00b      	beq.n	8008098 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2208      	movs	r2, #8
 8008086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800808e:	f043 0208 	orr.w	r2, r3, #8
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800809c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d012      	beq.n	80080ca <HAL_UART_IRQHandler+0x18a>
 80080a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00c      	beq.n	80080ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080c0:	f043 0220 	orr.w	r2, r3, #32
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 8209 	beq.w	80084e8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80080d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080da:	f003 0320 	and.w	r3, r3, #32
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00d      	beq.n	80080fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80080e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080e6:	f003 0320 	and.w	r3, r3, #32
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d007      	beq.n	80080fe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d003      	beq.n	80080fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008104:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008112:	2b40      	cmp	r3, #64	; 0x40
 8008114:	d005      	beq.n	8008122 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800811a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800811e:	2b00      	cmp	r3, #0
 8008120:	d04f      	beq.n	80081c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fd8c 	bl	8008c40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008132:	2b40      	cmp	r3, #64	; 0x40
 8008134:	d141      	bne.n	80081ba <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3308      	adds	r3, #8
 800813c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008140:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008144:	e853 3f00 	ldrex	r3, [r3]
 8008148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800814c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008154:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3308      	adds	r3, #8
 800815e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008162:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008166:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800816e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008172:	e841 2300 	strex	r3, r2, [r1]
 8008176:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800817a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1d9      	bne.n	8008136 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008186:	2b00      	cmp	r3, #0
 8008188:	d013      	beq.n	80081b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800818e:	4a13      	ldr	r2, [pc, #76]	; (80081dc <HAL_UART_IRQHandler+0x29c>)
 8008190:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008196:	4618      	mov	r0, r3
 8008198:	f7fa fa44 	bl	8002624 <HAL_DMA_Abort_IT>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d017      	beq.n	80081d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80081ac:	4610      	mov	r0, r2
 80081ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b0:	e00f      	b.n	80081d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f9ab 	bl	800850e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b8:	e00b      	b.n	80081d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f9a7 	bl	800850e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c0:	e007      	b.n	80081d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f9a3 	bl	800850e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80081d0:	e18a      	b.n	80084e8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d2:	bf00      	nop
    return;
 80081d4:	e188      	b.n	80084e8 <HAL_UART_IRQHandler+0x5a8>
 80081d6:	bf00      	nop
 80081d8:	04000120 	.word	0x04000120
 80081dc:	08008d05 	.word	0x08008d05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	f040 8143 	bne.w	8008470 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80081ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ee:	f003 0310 	and.w	r3, r3, #16
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 813c 	beq.w	8008470 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80081f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081fc:	f003 0310 	and.w	r3, r3, #16
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 8135 	beq.w	8008470 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2210      	movs	r2, #16
 800820c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008218:	2b40      	cmp	r3, #64	; 0x40
 800821a:	f040 80b1 	bne.w	8008380 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800822a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800822e:	2b00      	cmp	r3, #0
 8008230:	f000 815c 	beq.w	80084ec <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800823a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800823e:	429a      	cmp	r2, r3
 8008240:	f080 8154 	bcs.w	80084ec <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800824a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	2b20      	cmp	r3, #32
 8008256:	f000 8085 	beq.w	8008364 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008262:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008266:	e853 3f00 	ldrex	r3, [r3]
 800826a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800826e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008272:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008276:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008284:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008288:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008290:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008294:	e841 2300 	strex	r3, r2, [r1]
 8008298:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800829c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1da      	bne.n	800825a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3308      	adds	r3, #8
 80082aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082ae:	e853 3f00 	ldrex	r3, [r3]
 80082b2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80082b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082b6:	f023 0301 	bic.w	r3, r3, #1
 80082ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3308      	adds	r3, #8
 80082c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80082c8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80082cc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80082d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082d4:	e841 2300 	strex	r3, r2, [r1]
 80082d8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80082da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1e1      	bne.n	80082a4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3308      	adds	r3, #8
 80082e6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082ea:	e853 3f00 	ldrex	r3, [r3]
 80082ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80082f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3308      	adds	r3, #8
 8008300:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008304:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008306:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008308:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800830a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800830c:	e841 2300 	strex	r3, r2, [r1]
 8008310:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008312:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1e3      	bne.n	80082e0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2220      	movs	r2, #32
 800831c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008334:	f023 0310 	bic.w	r3, r3, #16
 8008338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	461a      	mov	r2, r3
 8008342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008346:	65bb      	str	r3, [r7, #88]	; 0x58
 8008348:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800834c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800834e:	e841 2300 	strex	r3, r2, [r1]
 8008352:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1e4      	bne.n	8008324 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835e:	4618      	mov	r0, r3
 8008360:	f7fa f928 	bl	80025b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008370:	b29b      	uxth	r3, r3
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	b29b      	uxth	r3, r3
 8008376:	4619      	mov	r1, r3
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f8d1 	bl	8008520 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800837e:	e0b5      	b.n	80084ec <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800838c:	b29b      	uxth	r3, r3
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800839a:	b29b      	uxth	r3, r3
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 80a7 	beq.w	80084f0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80083a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f000 80a2 	beq.w	80084f0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	461a      	mov	r2, r3
 80083ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083ce:	647b      	str	r3, [r7, #68]	; 0x44
 80083d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083d6:	e841 2300 	strex	r3, r2, [r1]
 80083da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1e4      	bne.n	80083ac <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3308      	adds	r3, #8
 80083e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ec:	e853 3f00 	ldrex	r3, [r3]
 80083f0:	623b      	str	r3, [r7, #32]
   return(result);
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	f023 0301 	bic.w	r3, r3, #1
 80083f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	3308      	adds	r3, #8
 8008402:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008406:	633a      	str	r2, [r7, #48]	; 0x30
 8008408:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800840c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800840e:	e841 2300 	strex	r3, r2, [r1]
 8008412:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1e3      	bne.n	80083e2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2220      	movs	r2, #32
 800841e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	e853 3f00 	ldrex	r3, [r3]
 8008438:	60fb      	str	r3, [r7, #12]
   return(result);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f023 0310 	bic.w	r3, r3, #16
 8008440:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	461a      	mov	r2, r3
 800844a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800844e:	61fb      	str	r3, [r7, #28]
 8008450:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008452:	69b9      	ldr	r1, [r7, #24]
 8008454:	69fa      	ldr	r2, [r7, #28]
 8008456:	e841 2300 	strex	r3, r2, [r1]
 800845a:	617b      	str	r3, [r7, #20]
   return(result);
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1e4      	bne.n	800842c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008462:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f859 	bl	8008520 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800846e:	e03f      	b.n	80084f0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00e      	beq.n	800849a <HAL_UART_IRQHandler+0x55a>
 800847c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d008      	beq.n	800849a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008490:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fc76 	bl	8008d84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008498:	e02d      	b.n	80084f6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800849a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800849e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00e      	beq.n	80084c4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80084a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d008      	beq.n	80084c4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d01c      	beq.n	80084f4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	4798      	blx	r3
    }
    return;
 80084c2:	e017      	b.n	80084f4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80084c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d012      	beq.n	80084f6 <HAL_UART_IRQHandler+0x5b6>
 80084d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00c      	beq.n	80084f6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fc27 	bl	8008d30 <UART_EndTransmit_IT>
    return;
 80084e2:	e008      	b.n	80084f6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80084e4:	bf00      	nop
 80084e6:	e006      	b.n	80084f6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80084e8:	bf00      	nop
 80084ea:	e004      	b.n	80084f6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80084ec:	bf00      	nop
 80084ee:	e002      	b.n	80084f6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80084f0:	bf00      	nop
 80084f2:	e000      	b.n	80084f6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80084f4:	bf00      	nop
  }

}
 80084f6:	37e8      	adds	r7, #232	; 0xe8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	bc80      	pop	{r7}
 800850c:	4770      	bx	lr

0800850e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800850e:	b480      	push	{r7}
 8008510:	b083      	sub	sp, #12
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	bc80      	pop	{r7}
 800851e:	4770      	bx	lr

08008520 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	460b      	mov	r3, r1
 800852a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	bc80      	pop	{r7}
 8008534:	4770      	bx	lr
	...

08008538 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b088      	sub	sp, #32
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	689a      	ldr	r2, [r3, #8]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	431a      	orrs	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	431a      	orrs	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	4313      	orrs	r3, r2
 800855a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	4b92      	ldr	r3, [pc, #584]	; (80087ac <UART_SetConfig+0x274>)
 8008564:	4013      	ands	r3, r2
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	6812      	ldr	r2, [r2, #0]
 800856a:	6979      	ldr	r1, [r7, #20]
 800856c:	430b      	orrs	r3, r1
 800856e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68da      	ldr	r2, [r3, #12]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	430a      	orrs	r2, r1
 8008584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a1b      	ldr	r3, [r3, #32]
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	4313      	orrs	r3, r2
 8008594:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a80      	ldr	r2, [pc, #512]	; (80087b0 <UART_SetConfig+0x278>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d120      	bne.n	80085f6 <UART_SetConfig+0xbe>
 80085b4:	4b7f      	ldr	r3, [pc, #508]	; (80087b4 <UART_SetConfig+0x27c>)
 80085b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b8:	f003 0303 	and.w	r3, r3, #3
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d817      	bhi.n	80085f0 <UART_SetConfig+0xb8>
 80085c0:	a201      	add	r2, pc, #4	; (adr r2, 80085c8 <UART_SetConfig+0x90>)
 80085c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c6:	bf00      	nop
 80085c8:	080085d9 	.word	0x080085d9
 80085cc:	080085e5 	.word	0x080085e5
 80085d0:	080085eb 	.word	0x080085eb
 80085d4:	080085df 	.word	0x080085df
 80085d8:	2301      	movs	r3, #1
 80085da:	77fb      	strb	r3, [r7, #31]
 80085dc:	e0b5      	b.n	800874a <UART_SetConfig+0x212>
 80085de:	2302      	movs	r3, #2
 80085e0:	77fb      	strb	r3, [r7, #31]
 80085e2:	e0b2      	b.n	800874a <UART_SetConfig+0x212>
 80085e4:	2304      	movs	r3, #4
 80085e6:	77fb      	strb	r3, [r7, #31]
 80085e8:	e0af      	b.n	800874a <UART_SetConfig+0x212>
 80085ea:	2308      	movs	r3, #8
 80085ec:	77fb      	strb	r3, [r7, #31]
 80085ee:	e0ac      	b.n	800874a <UART_SetConfig+0x212>
 80085f0:	2310      	movs	r3, #16
 80085f2:	77fb      	strb	r3, [r7, #31]
 80085f4:	e0a9      	b.n	800874a <UART_SetConfig+0x212>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a6f      	ldr	r2, [pc, #444]	; (80087b8 <UART_SetConfig+0x280>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d124      	bne.n	800864a <UART_SetConfig+0x112>
 8008600:	4b6c      	ldr	r3, [pc, #432]	; (80087b4 <UART_SetConfig+0x27c>)
 8008602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008604:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008608:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800860c:	d011      	beq.n	8008632 <UART_SetConfig+0xfa>
 800860e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008612:	d817      	bhi.n	8008644 <UART_SetConfig+0x10c>
 8008614:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008618:	d011      	beq.n	800863e <UART_SetConfig+0x106>
 800861a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800861e:	d811      	bhi.n	8008644 <UART_SetConfig+0x10c>
 8008620:	2b00      	cmp	r3, #0
 8008622:	d003      	beq.n	800862c <UART_SetConfig+0xf4>
 8008624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008628:	d006      	beq.n	8008638 <UART_SetConfig+0x100>
 800862a:	e00b      	b.n	8008644 <UART_SetConfig+0x10c>
 800862c:	2300      	movs	r3, #0
 800862e:	77fb      	strb	r3, [r7, #31]
 8008630:	e08b      	b.n	800874a <UART_SetConfig+0x212>
 8008632:	2302      	movs	r3, #2
 8008634:	77fb      	strb	r3, [r7, #31]
 8008636:	e088      	b.n	800874a <UART_SetConfig+0x212>
 8008638:	2304      	movs	r3, #4
 800863a:	77fb      	strb	r3, [r7, #31]
 800863c:	e085      	b.n	800874a <UART_SetConfig+0x212>
 800863e:	2308      	movs	r3, #8
 8008640:	77fb      	strb	r3, [r7, #31]
 8008642:	e082      	b.n	800874a <UART_SetConfig+0x212>
 8008644:	2310      	movs	r3, #16
 8008646:	77fb      	strb	r3, [r7, #31]
 8008648:	e07f      	b.n	800874a <UART_SetConfig+0x212>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a5b      	ldr	r2, [pc, #364]	; (80087bc <UART_SetConfig+0x284>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d124      	bne.n	800869e <UART_SetConfig+0x166>
 8008654:	4b57      	ldr	r3, [pc, #348]	; (80087b4 <UART_SetConfig+0x27c>)
 8008656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008658:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800865c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008660:	d011      	beq.n	8008686 <UART_SetConfig+0x14e>
 8008662:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008666:	d817      	bhi.n	8008698 <UART_SetConfig+0x160>
 8008668:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800866c:	d011      	beq.n	8008692 <UART_SetConfig+0x15a>
 800866e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008672:	d811      	bhi.n	8008698 <UART_SetConfig+0x160>
 8008674:	2b00      	cmp	r3, #0
 8008676:	d003      	beq.n	8008680 <UART_SetConfig+0x148>
 8008678:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800867c:	d006      	beq.n	800868c <UART_SetConfig+0x154>
 800867e:	e00b      	b.n	8008698 <UART_SetConfig+0x160>
 8008680:	2300      	movs	r3, #0
 8008682:	77fb      	strb	r3, [r7, #31]
 8008684:	e061      	b.n	800874a <UART_SetConfig+0x212>
 8008686:	2302      	movs	r3, #2
 8008688:	77fb      	strb	r3, [r7, #31]
 800868a:	e05e      	b.n	800874a <UART_SetConfig+0x212>
 800868c:	2304      	movs	r3, #4
 800868e:	77fb      	strb	r3, [r7, #31]
 8008690:	e05b      	b.n	800874a <UART_SetConfig+0x212>
 8008692:	2308      	movs	r3, #8
 8008694:	77fb      	strb	r3, [r7, #31]
 8008696:	e058      	b.n	800874a <UART_SetConfig+0x212>
 8008698:	2310      	movs	r3, #16
 800869a:	77fb      	strb	r3, [r7, #31]
 800869c:	e055      	b.n	800874a <UART_SetConfig+0x212>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a47      	ldr	r2, [pc, #284]	; (80087c0 <UART_SetConfig+0x288>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d124      	bne.n	80086f2 <UART_SetConfig+0x1ba>
 80086a8:	4b42      	ldr	r3, [pc, #264]	; (80087b4 <UART_SetConfig+0x27c>)
 80086aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80086b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086b4:	d011      	beq.n	80086da <UART_SetConfig+0x1a2>
 80086b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086ba:	d817      	bhi.n	80086ec <UART_SetConfig+0x1b4>
 80086bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086c0:	d011      	beq.n	80086e6 <UART_SetConfig+0x1ae>
 80086c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086c6:	d811      	bhi.n	80086ec <UART_SetConfig+0x1b4>
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <UART_SetConfig+0x19c>
 80086cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086d0:	d006      	beq.n	80086e0 <UART_SetConfig+0x1a8>
 80086d2:	e00b      	b.n	80086ec <UART_SetConfig+0x1b4>
 80086d4:	2300      	movs	r3, #0
 80086d6:	77fb      	strb	r3, [r7, #31]
 80086d8:	e037      	b.n	800874a <UART_SetConfig+0x212>
 80086da:	2302      	movs	r3, #2
 80086dc:	77fb      	strb	r3, [r7, #31]
 80086de:	e034      	b.n	800874a <UART_SetConfig+0x212>
 80086e0:	2304      	movs	r3, #4
 80086e2:	77fb      	strb	r3, [r7, #31]
 80086e4:	e031      	b.n	800874a <UART_SetConfig+0x212>
 80086e6:	2308      	movs	r3, #8
 80086e8:	77fb      	strb	r3, [r7, #31]
 80086ea:	e02e      	b.n	800874a <UART_SetConfig+0x212>
 80086ec:	2310      	movs	r3, #16
 80086ee:	77fb      	strb	r3, [r7, #31]
 80086f0:	e02b      	b.n	800874a <UART_SetConfig+0x212>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a33      	ldr	r2, [pc, #204]	; (80087c4 <UART_SetConfig+0x28c>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d124      	bne.n	8008746 <UART_SetConfig+0x20e>
 80086fc:	4b2d      	ldr	r3, [pc, #180]	; (80087b4 <UART_SetConfig+0x27c>)
 80086fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008700:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008704:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008708:	d011      	beq.n	800872e <UART_SetConfig+0x1f6>
 800870a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800870e:	d817      	bhi.n	8008740 <UART_SetConfig+0x208>
 8008710:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008714:	d011      	beq.n	800873a <UART_SetConfig+0x202>
 8008716:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800871a:	d811      	bhi.n	8008740 <UART_SetConfig+0x208>
 800871c:	2b00      	cmp	r3, #0
 800871e:	d003      	beq.n	8008728 <UART_SetConfig+0x1f0>
 8008720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008724:	d006      	beq.n	8008734 <UART_SetConfig+0x1fc>
 8008726:	e00b      	b.n	8008740 <UART_SetConfig+0x208>
 8008728:	2300      	movs	r3, #0
 800872a:	77fb      	strb	r3, [r7, #31]
 800872c:	e00d      	b.n	800874a <UART_SetConfig+0x212>
 800872e:	2302      	movs	r3, #2
 8008730:	77fb      	strb	r3, [r7, #31]
 8008732:	e00a      	b.n	800874a <UART_SetConfig+0x212>
 8008734:	2304      	movs	r3, #4
 8008736:	77fb      	strb	r3, [r7, #31]
 8008738:	e007      	b.n	800874a <UART_SetConfig+0x212>
 800873a:	2308      	movs	r3, #8
 800873c:	77fb      	strb	r3, [r7, #31]
 800873e:	e004      	b.n	800874a <UART_SetConfig+0x212>
 8008740:	2310      	movs	r3, #16
 8008742:	77fb      	strb	r3, [r7, #31]
 8008744:	e001      	b.n	800874a <UART_SetConfig+0x212>
 8008746:	2310      	movs	r3, #16
 8008748:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	69db      	ldr	r3, [r3, #28]
 800874e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008752:	d16c      	bne.n	800882e <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8008754:	7ffb      	ldrb	r3, [r7, #31]
 8008756:	2b08      	cmp	r3, #8
 8008758:	d838      	bhi.n	80087cc <UART_SetConfig+0x294>
 800875a:	a201      	add	r2, pc, #4	; (adr r2, 8008760 <UART_SetConfig+0x228>)
 800875c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008760:	08008785 	.word	0x08008785
 8008764:	0800878d 	.word	0x0800878d
 8008768:	08008795 	.word	0x08008795
 800876c:	080087cd 	.word	0x080087cd
 8008770:	0800879b 	.word	0x0800879b
 8008774:	080087cd 	.word	0x080087cd
 8008778:	080087cd 	.word	0x080087cd
 800877c:	080087cd 	.word	0x080087cd
 8008780:	080087a3 	.word	0x080087a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008784:	f7fe fdae 	bl	80072e4 <HAL_RCC_GetPCLK1Freq>
 8008788:	61b8      	str	r0, [r7, #24]
        break;
 800878a:	e024      	b.n	80087d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800878c:	f7fe fdcc 	bl	8007328 <HAL_RCC_GetPCLK2Freq>
 8008790:	61b8      	str	r0, [r7, #24]
        break;
 8008792:	e020      	b.n	80087d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008794:	4b0c      	ldr	r3, [pc, #48]	; (80087c8 <UART_SetConfig+0x290>)
 8008796:	61bb      	str	r3, [r7, #24]
        break;
 8008798:	e01d      	b.n	80087d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800879a:	f7fe fd2f 	bl	80071fc <HAL_RCC_GetSysClockFreq>
 800879e:	61b8      	str	r0, [r7, #24]
        break;
 80087a0:	e019      	b.n	80087d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087a6:	61bb      	str	r3, [r7, #24]
        break;
 80087a8:	e015      	b.n	80087d6 <UART_SetConfig+0x29e>
 80087aa:	bf00      	nop
 80087ac:	efff69f3 	.word	0xefff69f3
 80087b0:	40013800 	.word	0x40013800
 80087b4:	40021000 	.word	0x40021000
 80087b8:	40004400 	.word	0x40004400
 80087bc:	40004800 	.word	0x40004800
 80087c0:	40004c00 	.word	0x40004c00
 80087c4:	40005000 	.word	0x40005000
 80087c8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	77bb      	strb	r3, [r7, #30]
        break;
 80087d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d075      	beq.n	80088c8 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	005a      	lsls	r2, r3, #1
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	085b      	lsrs	r3, r3, #1
 80087e6:	441a      	add	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	2b0f      	cmp	r3, #15
 80087f8:	d916      	bls.n	8008828 <UART_SetConfig+0x2f0>
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008800:	d212      	bcs.n	8008828 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	b29b      	uxth	r3, r3
 8008806:	f023 030f 	bic.w	r3, r3, #15
 800880a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	085b      	lsrs	r3, r3, #1
 8008810:	b29b      	uxth	r3, r3
 8008812:	f003 0307 	and.w	r3, r3, #7
 8008816:	b29a      	uxth	r2, r3
 8008818:	89fb      	ldrh	r3, [r7, #14]
 800881a:	4313      	orrs	r3, r2
 800881c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	89fa      	ldrh	r2, [r7, #14]
 8008824:	60da      	str	r2, [r3, #12]
 8008826:	e04f      	b.n	80088c8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	77bb      	strb	r3, [r7, #30]
 800882c:	e04c      	b.n	80088c8 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800882e:	7ffb      	ldrb	r3, [r7, #31]
 8008830:	2b08      	cmp	r3, #8
 8008832:	d828      	bhi.n	8008886 <UART_SetConfig+0x34e>
 8008834:	a201      	add	r2, pc, #4	; (adr r2, 800883c <UART_SetConfig+0x304>)
 8008836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883a:	bf00      	nop
 800883c:	08008861 	.word	0x08008861
 8008840:	08008869 	.word	0x08008869
 8008844:	08008871 	.word	0x08008871
 8008848:	08008887 	.word	0x08008887
 800884c:	08008877 	.word	0x08008877
 8008850:	08008887 	.word	0x08008887
 8008854:	08008887 	.word	0x08008887
 8008858:	08008887 	.word	0x08008887
 800885c:	0800887f 	.word	0x0800887f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008860:	f7fe fd40 	bl	80072e4 <HAL_RCC_GetPCLK1Freq>
 8008864:	61b8      	str	r0, [r7, #24]
        break;
 8008866:	e013      	b.n	8008890 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008868:	f7fe fd5e 	bl	8007328 <HAL_RCC_GetPCLK2Freq>
 800886c:	61b8      	str	r0, [r7, #24]
        break;
 800886e:	e00f      	b.n	8008890 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008870:	4b1b      	ldr	r3, [pc, #108]	; (80088e0 <UART_SetConfig+0x3a8>)
 8008872:	61bb      	str	r3, [r7, #24]
        break;
 8008874:	e00c      	b.n	8008890 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008876:	f7fe fcc1 	bl	80071fc <HAL_RCC_GetSysClockFreq>
 800887a:	61b8      	str	r0, [r7, #24]
        break;
 800887c:	e008      	b.n	8008890 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800887e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008882:	61bb      	str	r3, [r7, #24]
        break;
 8008884:	e004      	b.n	8008890 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8008886:	2300      	movs	r3, #0
 8008888:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	77bb      	strb	r3, [r7, #30]
        break;
 800888e:	bf00      	nop
    }

    if (pclk != 0U)
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d018      	beq.n	80088c8 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	085a      	lsrs	r2, r3, #1
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	441a      	add	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	2b0f      	cmp	r3, #15
 80088b0:	d908      	bls.n	80088c4 <UART_SetConfig+0x38c>
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088b8:	d204      	bcs.n	80088c4 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	60da      	str	r2, [r3, #12]
 80088c2:	e001      	b.n	80088c8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80088d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3720      	adds	r7, #32
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	007a1200 	.word	0x007a1200

080088e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	f003 0301 	and.w	r3, r3, #1
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00a      	beq.n	800890e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008912:	f003 0302 	and.w	r3, r3, #2
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00a      	beq.n	8008930 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	430a      	orrs	r2, r1
 800892e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	f003 0304 	and.w	r3, r3, #4
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00a      	beq.n	8008952 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	430a      	orrs	r2, r1
 8008950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008956:	f003 0308 	and.w	r3, r3, #8
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	430a      	orrs	r2, r1
 8008972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008978:	f003 0310 	and.w	r3, r3, #16
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00a      	beq.n	8008996 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	430a      	orrs	r2, r1
 8008994:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	f003 0320 	and.w	r3, r3, #32
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00a      	beq.n	80089b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	430a      	orrs	r2, r1
 80089b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d01a      	beq.n	80089fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	430a      	orrs	r2, r1
 80089d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089e2:	d10a      	bne.n	80089fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	430a      	orrs	r2, r1
 80089f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00a      	beq.n	8008a1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	605a      	str	r2, [r3, #4]
  }
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bc80      	pop	{r7}
 8008a24:	4770      	bx	lr

08008a26 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b086      	sub	sp, #24
 8008a2a:	af02      	add	r7, sp, #8
 8008a2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a36:	f7fc fed3 	bl	80057e0 <HAL_GetTick>
 8008a3a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0308 	and.w	r3, r3, #8
 8008a46:	2b08      	cmp	r3, #8
 8008a48:	d10e      	bne.n	8008a68 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f82d 	bl	8008ab8 <UART_WaitOnFlagUntilTimeout>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d001      	beq.n	8008a68 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e023      	b.n	8008ab0 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 0304 	and.w	r3, r3, #4
 8008a72:	2b04      	cmp	r3, #4
 8008a74:	d10e      	bne.n	8008a94 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f817 	bl	8008ab8 <UART_WaitOnFlagUntilTimeout>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	e00d      	b.n	8008ab0 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2220      	movs	r2, #32
 8008a98:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2220      	movs	r2, #32
 8008a9e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b09c      	sub	sp, #112	; 0x70
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	603b      	str	r3, [r7, #0]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ac8:	e0a5      	b.n	8008c16 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad0:	f000 80a1 	beq.w	8008c16 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ad4:	f7fc fe84 	bl	80057e0 <HAL_GetTick>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d302      	bcc.n	8008aea <UART_WaitOnFlagUntilTimeout+0x32>
 8008ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d13e      	bne.n	8008b68 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008af2:	e853 3f00 	ldrex	r3, [r3]
 8008af6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008afa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008afe:	667b      	str	r3, [r7, #100]	; 0x64
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	461a      	mov	r2, r3
 8008b06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b0a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b10:	e841 2300 	strex	r3, r2, [r1]
 8008b14:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1e6      	bne.n	8008aea <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3308      	adds	r3, #8
 8008b22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b26:	e853 3f00 	ldrex	r3, [r3]
 8008b2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2e:	f023 0301 	bic.w	r3, r3, #1
 8008b32:	663b      	str	r3, [r7, #96]	; 0x60
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	3308      	adds	r3, #8
 8008b3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b3c:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b3e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b44:	e841 2300 	strex	r3, r2, [r1]
 8008b48:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1e5      	bne.n	8008b1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2220      	movs	r2, #32
 8008b54:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2220      	movs	r2, #32
 8008b5a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e067      	b.n	8008c38 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0304 	and.w	r3, r3, #4
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d04f      	beq.n	8008c16 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	69db      	ldr	r3, [r3, #28]
 8008b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b84:	d147      	bne.n	8008c16 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b8e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b98:	e853 3f00 	ldrex	r3, [r3]
 8008b9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ba4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bae:	637b      	str	r3, [r7, #52]	; 0x34
 8008bb0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e6      	bne.n	8008b90 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3308      	adds	r3, #8
 8008bc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	e853 3f00 	ldrex	r3, [r3]
 8008bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	f023 0301 	bic.w	r3, r3, #1
 8008bd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	3308      	adds	r3, #8
 8008be0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008be2:	623a      	str	r2, [r7, #32]
 8008be4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be6:	69f9      	ldr	r1, [r7, #28]
 8008be8:	6a3a      	ldr	r2, [r7, #32]
 8008bea:	e841 2300 	strex	r3, r2, [r1]
 8008bee:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1e5      	bne.n	8008bc2 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2220      	movs	r2, #32
 8008bfa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2220      	movs	r2, #32
 8008c00:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2220      	movs	r2, #32
 8008c06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	e010      	b.n	8008c38 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	69da      	ldr	r2, [r3, #28]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	4013      	ands	r3, r2
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	bf0c      	ite	eq
 8008c26:	2301      	moveq	r3, #1
 8008c28:	2300      	movne	r3, #0
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	79fb      	ldrb	r3, [r7, #7]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	f43f af4a 	beq.w	8008aca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3770      	adds	r7, #112	; 0x70
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b095      	sub	sp, #84	; 0x54
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c50:	e853 3f00 	ldrex	r3, [r3]
 8008c54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	461a      	mov	r2, r3
 8008c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c66:	643b      	str	r3, [r7, #64]	; 0x40
 8008c68:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c6e:	e841 2300 	strex	r3, r2, [r1]
 8008c72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1e6      	bne.n	8008c48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3308      	adds	r3, #8
 8008c80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c82:	6a3b      	ldr	r3, [r7, #32]
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	f023 0301 	bic.w	r3, r3, #1
 8008c90:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3308      	adds	r3, #8
 8008c98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ca2:	e841 2300 	strex	r3, r2, [r1]
 8008ca6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1e5      	bne.n	8008c7a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d118      	bne.n	8008ce8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	e853 3f00 	ldrex	r3, [r3]
 8008cc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	f023 0310 	bic.w	r3, r3, #16
 8008cca:	647b      	str	r3, [r7, #68]	; 0x44
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cd4:	61bb      	str	r3, [r7, #24]
 8008cd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd8:	6979      	ldr	r1, [r7, #20]
 8008cda:	69ba      	ldr	r2, [r7, #24]
 8008cdc:	e841 2300 	strex	r3, r2, [r1]
 8008ce0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1e6      	bne.n	8008cb6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2220      	movs	r2, #32
 8008cec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008cfa:	bf00      	nop
 8008cfc:	3754      	adds	r7, #84	; 0x54
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bc80      	pop	{r7}
 8008d02:	4770      	bx	lr

08008d04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f7ff fbf3 	bl	800850e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d28:	bf00      	nop
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b088      	sub	sp, #32
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	e853 3f00 	ldrex	r3, [r3]
 8008d44:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d4c:	61fb      	str	r3, [r7, #28]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	61bb      	str	r3, [r7, #24]
 8008d58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5a:	6979      	ldr	r1, [r7, #20]
 8008d5c:	69ba      	ldr	r2, [r7, #24]
 8008d5e:	e841 2300 	strex	r3, r2, [r1]
 8008d62:	613b      	str	r3, [r7, #16]
   return(result);
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1e6      	bne.n	8008d38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2220      	movs	r2, #32
 8008d6e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7ff fbc0 	bl	80084fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d7c:	bf00      	nop
 8008d7e:	3720      	adds	r7, #32
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bc80      	pop	{r7}
 8008d94:	4770      	bx	lr
	...

08008d98 <Ea_Init>:
/**
  * @brief	Ea module initialization function
  * @return	None
  */
void Ea_Init(void)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Ea_InitDone_b = TRUE;
 8008d9c:	4b03      	ldr	r3, [pc, #12]	; (8008dac <Ea_Init+0x14>)
 8008d9e:	2201      	movs	r2, #1
 8008da0:	701a      	strb	r2, [r3, #0]
}
 8008da2:	bf00      	nop
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bc80      	pop	{r7}
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	20000124 	.word	0x20000124

08008db0 <Ea_Read>:
  * @param	BlockId		ID of the block to be read
  * @param  data		Pointer to the buffer where read data is stored
  * @return	None
  */
void Ea_Read(uint16 Block_Id, uint8 *data)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af02      	add	r7, sp, #8
 8008db6:	4603      	mov	r3, r0
 8008db8:	6039      	str	r1, [r7, #0]
 8008dba:	80fb      	strh	r3, [r7, #6]
	if(Block_Id < EA_FRAM_MAX_BLOCKS)
 8008dbc:	88fb      	ldrh	r3, [r7, #6]
 8008dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dc2:	d20b      	bcs.n	8008ddc <Ea_Read+0x2c>
	{
		HAL_I2C_Mem_Read_DMA(&hi2c1, (uint16_t)EA_FRAM_HW_ADDR, EA_FRAM_ADDRESS_OFFSET(Block_Id), I2C_MEMADD_SIZE_16BIT, data, EA_FRAM_BLOCK_SIZE);
 8008dc4:	88fb      	ldrh	r3, [r7, #6]
 8008dc6:	015b      	lsls	r3, r3, #5
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	2320      	movs	r3, #32
 8008dcc:	9301      	str	r3, [sp, #4]
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	21a0      	movs	r1, #160	; 0xa0
 8008dd6:	4803      	ldr	r0, [pc, #12]	; (8008de4 <Ea_Read+0x34>)
 8008dd8:	f7fb f890 	bl	8003efc <HAL_I2C_Mem_Read_DMA>
	}
}
 8008ddc:	bf00      	nop
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	200001bc 	.word	0x200001bc

08008de8 <NvM_Init>:
/**
  * @brief	NvM module initialization function
  * @return	None
  */
void NvM_Init(void)
{
 8008de8:	b480      	push	{r7}
 8008dea:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_NvM_InitDone_b = TRUE;
 8008dec:	4b03      	ldr	r3, [pc, #12]	; (8008dfc <NvM_Init+0x14>)
 8008dee:	2201      	movs	r2, #1
 8008df0:	701a      	strb	r2, [r3, #0]
}
 8008df2:	bf00      	nop
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bc80      	pop	{r7}
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	20000125 	.word	0x20000125

08008e00 <NvM_MainFunction>:
/**
  * @brief	NvM module main function (runs in task)
  * @return	None
  */
void NvM_MainFunction(void)
{
 8008e00:	b480      	push	{r7}
 8008e02:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_NvM_InitDone_b)
	{

	}
}
 8008e04:	bf00      	nop
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bc80      	pop	{r7}
 8008e0a:	4770      	bx	lr

08008e0c <NvM_ReadBlock>:
  * @param	BlockId		ID of the block to be read
  * @param  NvM_SrcPtr	Pointer to the data to be read
  * @return	None
  */
void NvM_ReadBlock(uint16 BlockId, uint8 *NvM_SrcPtr)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	4603      	mov	r3, r0
 8008e14:	6039      	str	r1, [r7, #0]
 8008e16:	80fb      	strh	r3, [r7, #6]
	/* Call FRAM block read function */
	Ea_Read(BlockId, NvM_SrcPtr);
 8008e18:	88fb      	ldrh	r3, [r7, #6]
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7ff ffc7 	bl	8008db0 <Ea_Read>
}
 8008e22:	bf00      	nop
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <BswM_Init>:
static void MX_SPI3_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);

void BswM_Init(void)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	af00      	add	r7, sp, #0
	/* Init MCal drivers */
	SystemClock_Config();
 8008e2e:	f000 f87d 	bl	8008f2c <SystemClock_Config>
	MX_DMA_Init();
 8008e32:	f000 f8e1 	bl	8008ff8 <MX_DMA_Init>
	MX_GPIO_Init();
 8008e36:	f000 fa5b 	bl	80092f0 <MX_GPIO_Init>
	MX_ADC1_Init();
 8008e3a:	f000 f90b 	bl	8009054 <MX_ADC1_Init>
	MX_I2C1_Init();
 8008e3e:	f000 f979 	bl	8009134 <MX_I2C1_Init>
	MX_SPI3_Init();
 8008e42:	f000 f9b7 	bl	80091b4 <MX_SPI3_Init>
	MX_USART1_UART_Init();
 8008e46:	f000 f9f3 	bl	8009230 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8008e4a:	f000 fa21 	bl	8009290 <MX_USART2_UART_Init>
	Gpt_Init();
 8008e4e:	f7f9 fd3d 	bl	80028cc <Gpt_Init>

	/* Init system services */
	Tm_Init();
 8008e52:	f000 fd07 	bl	8009864 <Tm_Init>

}
 8008e56:	bf00      	nop
 8008e58:	bd80      	pop	{r7, pc}
	...

08008e5c <BswM_MainFunction>:

void BswM_MainFunction(void)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	af00      	add	r7, sp, #0
	/* Start ADC AN1 conversion */
	HAL_ADC_Start_DMA(&hadc1, (uint32 *)adc_val, adc_len);
 8008e60:	4b04      	ldr	r3, [pc, #16]	; (8008e74 <BswM_MainFunction+0x18>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	461a      	mov	r2, r3
 8008e66:	4904      	ldr	r1, [pc, #16]	; (8008e78 <BswM_MainFunction+0x1c>)
 8008e68:	4804      	ldr	r0, [pc, #16]	; (8008e7c <BswM_MainFunction+0x20>)
 8008e6a:	f7f8 fb05 	bl	8001478 <HAL_ADC_Start_DMA>

}
 8008e6e:	bf00      	nop
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	2000000c 	.word	0x2000000c
 8008e78:	20000454 	.word	0x20000454
 8008e7c:	20000128 	.word	0x20000128

08008e80 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
	/* Convert ADC value to Voltage (mV) */
	ADC_AN0_Voltage = (uint16)((adc_val[0]*3300u)/4095u);
 8008e88:	4b0d      	ldr	r3, [pc, #52]	; (8008ec0 <HAL_ADC_ConvCpltCallback+0x40>)
 8008e8a:	881b      	ldrh	r3, [r3, #0]
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	461a      	mov	r2, r3
 8008e90:	f640 43e4 	movw	r3, #3300	; 0xce4
 8008e94:	fb03 f202 	mul.w	r2, r3, r2
 8008e98:	4b0a      	ldr	r3, [pc, #40]	; (8008ec4 <HAL_ADC_ConvCpltCallback+0x44>)
 8008e9a:	fba3 1302 	umull	r1, r3, r3, r2
 8008e9e:	1ad2      	subs	r2, r2, r3
 8008ea0:	0852      	lsrs	r2, r2, #1
 8008ea2:	4413      	add	r3, r2
 8008ea4:	0adb      	lsrs	r3, r3, #11
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	4b07      	ldr	r3, [pc, #28]	; (8008ec8 <HAL_ADC_ConvCpltCallback+0x48>)
 8008eaa:	801a      	strh	r2, [r3, #0]
	Rte_Write_ADC_AN0_Voltage_u16(ADC_AN0_Voltage);
 8008eac:	4b06      	ldr	r3, [pc, #24]	; (8008ec8 <HAL_ADC_ConvCpltCallback+0x48>)
 8008eae:	881b      	ldrh	r3, [r3, #0]
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 fddc 	bl	8009a70 <Rte_Write_AN0_Voltage_u16>
}
 8008eb8:	bf00      	nop
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	20000454 	.word	0x20000454
 8008ec4:	00100101 	.word	0x00100101
 8008ec8:	20000456 	.word	0x20000456

08008ecc <HAL_I2C_MemTxCpltCallback>:


/* USER CODE BEGIN 4 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
	I2cTxCnt++;
 8008ed4:	4b04      	ldr	r3, [pc, #16]	; (8008ee8 <HAL_I2C_MemTxCpltCallback+0x1c>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	4a03      	ldr	r2, [pc, #12]	; (8008ee8 <HAL_I2C_MemTxCpltCallback+0x1c>)
 8008edc:	6013      	str	r3, [r2, #0]
}
 8008ede:	bf00      	nop
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bc80      	pop	{r7}
 8008ee6:	4770      	bx	lr
 8008ee8:	2000045c 	.word	0x2000045c

08008eec <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
	I2cRxCnt++;
 8008ef4:	4b04      	ldr	r3, [pc, #16]	; (8008f08 <HAL_I2C_MemRxCpltCallback+0x1c>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	4a03      	ldr	r2, [pc, #12]	; (8008f08 <HAL_I2C_MemRxCpltCallback+0x1c>)
 8008efc:	6013      	str	r3, [r2, #0]
}
 8008efe:	bf00      	nop
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bc80      	pop	{r7}
 8008f06:	4770      	bx	lr
 8008f08:	20000458 	.word	0x20000458

08008f0c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave don't acknowledge it's address, Master restarts communication.
    * 2- When Master don't acknowledge the last data transferred, Slave don't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f7fb f946 	bl	80041a6 <HAL_I2C_GetError>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b04      	cmp	r3, #4
 8008f1e:	d001      	beq.n	8008f24 <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 8008f20:	f000 fa3a 	bl	8009398 <Error_Handler>
  }
}
 8008f24:	bf00      	nop
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b0a6      	sub	sp, #152	; 0x98
 8008f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008f32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008f36:	2228      	movs	r2, #40	; 0x28
 8008f38:	2100      	movs	r1, #0
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 fde6 	bl	8009b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008f40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008f44:	2200      	movs	r2, #0
 8008f46:	601a      	str	r2, [r3, #0]
 8008f48:	605a      	str	r2, [r3, #4]
 8008f4a:	609a      	str	r2, [r3, #8]
 8008f4c:	60da      	str	r2, [r3, #12]
 8008f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008f50:	1d3b      	adds	r3, r7, #4
 8008f52:	2258      	movs	r2, #88	; 0x58
 8008f54:	2100      	movs	r1, #0
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 fdd8 	bl	8009b0c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008f60:	2301      	movs	r3, #1
 8008f62:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008f64:	2310      	movs	r3, #16
 8008f66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008f70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008f78:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008f7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8008f80:	2300      	movs	r3, #0
 8008f82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008f86:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fc ff66 	bl	8005e5c <HAL_RCC_OscConfig>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8008f96:	f000 f9ff 	bl	8009398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008f9a:	230f      	movs	r3, #15
 8008f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008f9e:	2302      	movs	r3, #2
 8008fa0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008faa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008fac:	2300      	movs	r3, #0
 8008fae:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008fb0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008fb4:	2102      	movs	r1, #2
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fd ffa4 	bl	8006f04 <HAL_RCC_ClockConfig>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d001      	beq.n	8008fc6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8008fc2:	f000 f9e9 	bl	8009398 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8008fc6:	23a3      	movs	r3, #163	; 0xa3
 8008fc8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8008fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8008fd8:	2310      	movs	r3, #16
 8008fda:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008fdc:	1d3b      	adds	r3, r7, #4
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fe f9c4 	bl	800736c <HAL_RCCEx_PeriphCLKConfig>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8008fea:	f000 f9d5 	bl	8009398 <Error_Handler>
  }
}
 8008fee:	bf00      	nop
 8008ff0:	3798      	adds	r7, #152	; 0x98
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
	...

08008ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 8008ffe:	4b14      	ldr	r3, [pc, #80]	; (8009050 <MX_DMA_Init+0x58>)
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	4a13      	ldr	r2, [pc, #76]	; (8009050 <MX_DMA_Init+0x58>)
 8009004:	f043 0301 	orr.w	r3, r3, #1
 8009008:	6153      	str	r3, [r2, #20]
 800900a:	4b11      	ldr	r3, [pc, #68]	; (8009050 <MX_DMA_Init+0x58>)
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	607b      	str	r3, [r7, #4]
 8009014:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA1_Channel1_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8009016:	2200      	movs	r2, #0
 8009018:	2100      	movs	r1, #0
 800901a:	200b      	movs	r0, #11
 800901c:	f7fc fcc1 	bl	80059a2 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009020:	200b      	movs	r0, #11
 8009022:	f7fc fcda 	bl	80059da <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel6_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8009026:	2200      	movs	r2, #0
 8009028:	2100      	movs	r1, #0
 800902a:	2010      	movs	r0, #16
 800902c:	f7fc fcb9 	bl	80059a2 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8009030:	2010      	movs	r0, #16
 8009032:	f7fc fcd2 	bl	80059da <HAL_NVIC_EnableIRQ>
	  /* DMA1_Channel7_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8009036:	2200      	movs	r2, #0
 8009038:	2100      	movs	r1, #0
 800903a:	2011      	movs	r0, #17
 800903c:	f7fc fcb1 	bl	80059a2 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8009040:	2011      	movs	r0, #17
 8009042:	f7fc fcca 	bl	80059da <HAL_NVIC_EnableIRQ>
}
 8009046:	bf00      	nop
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	40021000 	.word	0x40021000

08009054 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b08a      	sub	sp, #40	; 0x28
 8009058:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_MultiModeTypeDef multimode = {0};
 800905a:	f107 031c 	add.w	r3, r7, #28
 800905e:	2200      	movs	r2, #0
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	605a      	str	r2, [r3, #4]
 8009064:	609a      	str	r2, [r3, #8]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8009066:	1d3b      	adds	r3, r7, #4
 8009068:	2200      	movs	r2, #0
 800906a:	601a      	str	r2, [r3, #0]
 800906c:	605a      	str	r2, [r3, #4]
 800906e:	609a      	str	r2, [r3, #8]
 8009070:	60da      	str	r2, [r3, #12]
 8009072:	611a      	str	r2, [r3, #16]
 8009074:	615a      	str	r2, [r3, #20]

	  /* USER CODE END ADC1_Init 1 */

	  /** Common config
	  */
	  hadc1.Instance = ADC1;
 8009076:	4b2e      	ldr	r3, [pc, #184]	; (8009130 <MX_ADC1_Init+0xdc>)
 8009078:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800907c:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800907e:	4b2c      	ldr	r3, [pc, #176]	; (8009130 <MX_ADC1_Init+0xdc>)
 8009080:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009084:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009086:	4b2a      	ldr	r3, [pc, #168]	; (8009130 <MX_ADC1_Init+0xdc>)
 8009088:	2200      	movs	r2, #0
 800908a:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800908c:	4b28      	ldr	r3, [pc, #160]	; (8009130 <MX_ADC1_Init+0xdc>)
 800908e:	2200      	movs	r2, #0
 8009090:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8009092:	4b27      	ldr	r3, [pc, #156]	; (8009130 <MX_ADC1_Init+0xdc>)
 8009094:	2200      	movs	r2, #0
 8009096:	765a      	strb	r2, [r3, #25]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009098:	4b25      	ldr	r3, [pc, #148]	; (8009130 <MX_ADC1_Init+0xdc>)
 800909a:	2200      	movs	r2, #0
 800909c:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80090a0:	4b23      	ldr	r3, [pc, #140]	; (8009130 <MX_ADC1_Init+0xdc>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80090a6:	4b22      	ldr	r3, [pc, #136]	; (8009130 <MX_ADC1_Init+0xdc>)
 80090a8:	2201      	movs	r2, #1
 80090aa:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80090ac:	4b20      	ldr	r3, [pc, #128]	; (8009130 <MX_ADC1_Init+0xdc>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 80090b2:	4b1f      	ldr	r3, [pc, #124]	; (8009130 <MX_ADC1_Init+0xdc>)
 80090b4:	2201      	movs	r2, #1
 80090b6:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 80090b8:	4b1d      	ldr	r3, [pc, #116]	; (8009130 <MX_ADC1_Init+0xdc>)
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80090c0:	4b1b      	ldr	r3, [pc, #108]	; (8009130 <MX_ADC1_Init+0xdc>)
 80090c2:	2204      	movs	r2, #4
 80090c4:	615a      	str	r2, [r3, #20]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 80090c6:	4b1a      	ldr	r3, [pc, #104]	; (8009130 <MX_ADC1_Init+0xdc>)
 80090c8:	2200      	movs	r2, #0
 80090ca:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80090cc:	4b18      	ldr	r3, [pc, #96]	; (8009130 <MX_ADC1_Init+0xdc>)
 80090ce:	2200      	movs	r2, #0
 80090d0:	635a      	str	r2, [r3, #52]	; 0x34
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80090d2:	4817      	ldr	r0, [pc, #92]	; (8009130 <MX_ADC1_Init+0xdc>)
 80090d4:	f7f7 ffd6 	bl	8001084 <HAL_ADC_Init>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <MX_ADC1_Init+0x8e>
	  {
	    Error_Handler();
 80090de:	f000 f95b 	bl	8009398 <Error_Handler>
	  }

	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 80090e2:	2300      	movs	r3, #0
 80090e4:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80090e6:	f107 031c 	add.w	r3, r7, #28
 80090ea:	4619      	mov	r1, r3
 80090ec:	4810      	ldr	r0, [pc, #64]	; (8009130 <MX_ADC1_Init+0xdc>)
 80090ee:	f7f8 fdcb 	bl	8001c88 <HAL_ADCEx_MultiModeConfigChannel>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <MX_ADC1_Init+0xa8>
	  {
	    Error_Handler();
 80090f8:	f000 f94e 	bl	8009398 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 80090fc:	2301      	movs	r3, #1
 80090fe:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009100:	2301      	movs	r3, #1
 8009102:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009104:	2300      	movs	r3, #0
 8009106:	613b      	str	r3, [r7, #16]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8009108:	2300      	movs	r3, #0
 800910a:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800910c:	2300      	movs	r3, #0
 800910e:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009114:	1d3b      	adds	r3, r7, #4
 8009116:	4619      	mov	r1, r3
 8009118:	4805      	ldr	r0, [pc, #20]	; (8009130 <MX_ADC1_Init+0xdc>)
 800911a:	f7f8 fac9 	bl	80016b0 <HAL_ADC_ConfigChannel>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d001      	beq.n	8009128 <MX_ADC1_Init+0xd4>
	  {
	    Error_Handler();
 8009124:	f000 f938 	bl	8009398 <Error_Handler>
	  }
	  /* USER CODE BEGIN ADC1_Init 2 */

	  /* USER CODE END ADC1_Init 2 */

}
 8009128:	bf00      	nop
 800912a:	3728      	adds	r7, #40	; 0x28
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	20000128 	.word	0x20000128

08009134 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	af00      	add	r7, sp, #0
	  /* USER CODE END I2C1_Init 0 */

	  /* USER CODE BEGIN I2C1_Init 1 */

	  /* USER CODE END I2C1_Init 1 */
	  hi2c1.Instance = I2C1;
 8009138:	4b1b      	ldr	r3, [pc, #108]	; (80091a8 <MX_I2C1_Init+0x74>)
 800913a:	4a1c      	ldr	r2, [pc, #112]	; (80091ac <MX_I2C1_Init+0x78>)
 800913c:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0x00702681;
 800913e:	4b1a      	ldr	r3, [pc, #104]	; (80091a8 <MX_I2C1_Init+0x74>)
 8009140:	4a1b      	ldr	r2, [pc, #108]	; (80091b0 <MX_I2C1_Init+0x7c>)
 8009142:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 8009144:	4b18      	ldr	r3, [pc, #96]	; (80091a8 <MX_I2C1_Init+0x74>)
 8009146:	2200      	movs	r2, #0
 8009148:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800914a:	4b17      	ldr	r3, [pc, #92]	; (80091a8 <MX_I2C1_Init+0x74>)
 800914c:	2201      	movs	r2, #1
 800914e:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009150:	4b15      	ldr	r3, [pc, #84]	; (80091a8 <MX_I2C1_Init+0x74>)
 8009152:	2200      	movs	r2, #0
 8009154:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 8009156:	4b14      	ldr	r3, [pc, #80]	; (80091a8 <MX_I2C1_Init+0x74>)
 8009158:	2200      	movs	r2, #0
 800915a:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800915c:	4b12      	ldr	r3, [pc, #72]	; (80091a8 <MX_I2C1_Init+0x74>)
 800915e:	2200      	movs	r2, #0
 8009160:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009162:	4b11      	ldr	r3, [pc, #68]	; (80091a8 <MX_I2C1_Init+0x74>)
 8009164:	2200      	movs	r2, #0
 8009166:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009168:	4b0f      	ldr	r3, [pc, #60]	; (80091a8 <MX_I2C1_Init+0x74>)
 800916a:	2200      	movs	r2, #0
 800916c:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800916e:	480e      	ldr	r0, [pc, #56]	; (80091a8 <MX_I2C1_Init+0x74>)
 8009170:	f7fa fdf8 	bl	8003d64 <HAL_I2C_Init>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <MX_I2C1_Init+0x4a>
	  {
	    Error_Handler();
 800917a:	f000 f90d 	bl	8009398 <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800917e:	2100      	movs	r1, #0
 8009180:	4809      	ldr	r0, [pc, #36]	; (80091a8 <MX_I2C1_Init+0x74>)
 8009182:	f7fc fa16 	bl	80055b2 <HAL_I2CEx_ConfigAnalogFilter>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <MX_I2C1_Init+0x5c>
	  {
	    Error_Handler();
 800918c:	f000 f904 	bl	8009398 <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8009190:	2100      	movs	r1, #0
 8009192:	4805      	ldr	r0, [pc, #20]	; (80091a8 <MX_I2C1_Init+0x74>)
 8009194:	f7fc fa57 	bl	8005646 <HAL_I2CEx_ConfigDigitalFilter>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <MX_I2C1_Init+0x6e>
	  {
	    Error_Handler();
 800919e:	f000 f8fb 	bl	8009398 <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C1_Init 2 */

	  /* USER CODE END I2C1_Init 2 */
}
 80091a2:	bf00      	nop
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	200001bc 	.word	0x200001bc
 80091ac:	40005400 	.word	0x40005400
 80091b0:	00702681 	.word	0x00702681

080091b4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80091b8:	4b1b      	ldr	r3, [pc, #108]	; (8009228 <MX_SPI3_Init+0x74>)
 80091ba:	4a1c      	ldr	r2, [pc, #112]	; (800922c <MX_SPI3_Init+0x78>)
 80091bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80091be:	4b1a      	ldr	r3, [pc, #104]	; (8009228 <MX_SPI3_Init+0x74>)
 80091c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80091c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80091c6:	4b18      	ldr	r3, [pc, #96]	; (8009228 <MX_SPI3_Init+0x74>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80091cc:	4b16      	ldr	r3, [pc, #88]	; (8009228 <MX_SPI3_Init+0x74>)
 80091ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80091d2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80091d4:	4b14      	ldr	r3, [pc, #80]	; (8009228 <MX_SPI3_Init+0x74>)
 80091d6:	2200      	movs	r2, #0
 80091d8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80091da:	4b13      	ldr	r3, [pc, #76]	; (8009228 <MX_SPI3_Init+0x74>)
 80091dc:	2200      	movs	r2, #0
 80091de:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80091e0:	4b11      	ldr	r3, [pc, #68]	; (8009228 <MX_SPI3_Init+0x74>)
 80091e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091e6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80091e8:	4b0f      	ldr	r3, [pc, #60]	; (8009228 <MX_SPI3_Init+0x74>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80091ee:	4b0e      	ldr	r3, [pc, #56]	; (8009228 <MX_SPI3_Init+0x74>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80091f4:	4b0c      	ldr	r3, [pc, #48]	; (8009228 <MX_SPI3_Init+0x74>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091fa:	4b0b      	ldr	r3, [pc, #44]	; (8009228 <MX_SPI3_Init+0x74>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8009200:	4b09      	ldr	r3, [pc, #36]	; (8009228 <MX_SPI3_Init+0x74>)
 8009202:	2207      	movs	r2, #7
 8009204:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009206:	4b08      	ldr	r3, [pc, #32]	; (8009228 <MX_SPI3_Init+0x74>)
 8009208:	2200      	movs	r2, #0
 800920a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800920c:	4b06      	ldr	r3, [pc, #24]	; (8009228 <MX_SPI3_Init+0x74>)
 800920e:	2208      	movs	r2, #8
 8009210:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8009212:	4805      	ldr	r0, [pc, #20]	; (8009228 <MX_SPI3_Init+0x74>)
 8009214:	f7fe fb72 	bl	80078fc <HAL_SPI_Init>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800921e:	f000 f8bb 	bl	8009398 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8009222:	bf00      	nop
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	200002c0 	.word	0x200002c0
 800922c:	40003c00 	.word	0x40003c00

08009230 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009234:	4b14      	ldr	r3, [pc, #80]	; (8009288 <MX_USART1_UART_Init+0x58>)
 8009236:	4a15      	ldr	r2, [pc, #84]	; (800928c <MX_USART1_UART_Init+0x5c>)
 8009238:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800923a:	4b13      	ldr	r3, [pc, #76]	; (8009288 <MX_USART1_UART_Init+0x58>)
 800923c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8009240:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009242:	4b11      	ldr	r3, [pc, #68]	; (8009288 <MX_USART1_UART_Init+0x58>)
 8009244:	2200      	movs	r2, #0
 8009246:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009248:	4b0f      	ldr	r3, [pc, #60]	; (8009288 <MX_USART1_UART_Init+0x58>)
 800924a:	2200      	movs	r2, #0
 800924c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800924e:	4b0e      	ldr	r3, [pc, #56]	; (8009288 <MX_USART1_UART_Init+0x58>)
 8009250:	2200      	movs	r2, #0
 8009252:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009254:	4b0c      	ldr	r3, [pc, #48]	; (8009288 <MX_USART1_UART_Init+0x58>)
 8009256:	220c      	movs	r2, #12
 8009258:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800925a:	4b0b      	ldr	r3, [pc, #44]	; (8009288 <MX_USART1_UART_Init+0x58>)
 800925c:	2200      	movs	r2, #0
 800925e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009260:	4b09      	ldr	r3, [pc, #36]	; (8009288 <MX_USART1_UART_Init+0x58>)
 8009262:	2200      	movs	r2, #0
 8009264:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009266:	4b08      	ldr	r3, [pc, #32]	; (8009288 <MX_USART1_UART_Init+0x58>)
 8009268:	2200      	movs	r2, #0
 800926a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800926c:	4b06      	ldr	r3, [pc, #24]	; (8009288 <MX_USART1_UART_Init+0x58>)
 800926e:	2200      	movs	r2, #0
 8009270:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009272:	4805      	ldr	r0, [pc, #20]	; (8009288 <MX_USART1_UART_Init+0x58>)
 8009274:	f7fe fd82 	bl	8007d7c <HAL_UART_Init>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d001      	beq.n	8009282 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800927e:	f000 f88b 	bl	8009398 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009282:	bf00      	nop
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	2000034c 	.word	0x2000034c
 800928c:	40013800 	.word	0x40013800

08009290 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009294:	4b14      	ldr	r3, [pc, #80]	; (80092e8 <MX_USART2_UART_Init+0x58>)
 8009296:	4a15      	ldr	r2, [pc, #84]	; (80092ec <MX_USART2_UART_Init+0x5c>)
 8009298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800929a:	4b13      	ldr	r3, [pc, #76]	; (80092e8 <MX_USART2_UART_Init+0x58>)
 800929c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80092a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80092a2:	4b11      	ldr	r3, [pc, #68]	; (80092e8 <MX_USART2_UART_Init+0x58>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80092a8:	4b0f      	ldr	r3, [pc, #60]	; (80092e8 <MX_USART2_UART_Init+0x58>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80092ae:	4b0e      	ldr	r3, [pc, #56]	; (80092e8 <MX_USART2_UART_Init+0x58>)
 80092b0:	2200      	movs	r2, #0
 80092b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80092b4:	4b0c      	ldr	r3, [pc, #48]	; (80092e8 <MX_USART2_UART_Init+0x58>)
 80092b6:	220c      	movs	r2, #12
 80092b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80092ba:	4b0b      	ldr	r3, [pc, #44]	; (80092e8 <MX_USART2_UART_Init+0x58>)
 80092bc:	2200      	movs	r2, #0
 80092be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80092c0:	4b09      	ldr	r3, [pc, #36]	; (80092e8 <MX_USART2_UART_Init+0x58>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80092c6:	4b08      	ldr	r3, [pc, #32]	; (80092e8 <MX_USART2_UART_Init+0x58>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80092cc:	4b06      	ldr	r3, [pc, #24]	; (80092e8 <MX_USART2_UART_Init+0x58>)
 80092ce:	2200      	movs	r2, #0
 80092d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80092d2:	4805      	ldr	r0, [pc, #20]	; (80092e8 <MX_USART2_UART_Init+0x58>)
 80092d4:	f7fe fd52 	bl	8007d7c <HAL_UART_Init>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d001      	beq.n	80092e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80092de:	f000 f85b 	bl	8009398 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80092e2:	bf00      	nop
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	200003d0 	.word	0x200003d0
 80092ec:	40004400 	.word	0x40004400

080092f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b088      	sub	sp, #32
 80092f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092f6:	f107 030c 	add.w	r3, r7, #12
 80092fa:	2200      	movs	r2, #0
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	605a      	str	r2, [r3, #4]
 8009300:	609a      	str	r2, [r3, #8]
 8009302:	60da      	str	r2, [r3, #12]
 8009304:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009306:	4b22      	ldr	r3, [pc, #136]	; (8009390 <MX_GPIO_Init+0xa0>)
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	4a21      	ldr	r2, [pc, #132]	; (8009390 <MX_GPIO_Init+0xa0>)
 800930c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009310:	6153      	str	r3, [r2, #20]
 8009312:	4b1f      	ldr	r3, [pc, #124]	; (8009390 <MX_GPIO_Init+0xa0>)
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800931a:	60bb      	str	r3, [r7, #8]
 800931c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800931e:	4b1c      	ldr	r3, [pc, #112]	; (8009390 <MX_GPIO_Init+0xa0>)
 8009320:	695b      	ldr	r3, [r3, #20]
 8009322:	4a1b      	ldr	r2, [pc, #108]	; (8009390 <MX_GPIO_Init+0xa0>)
 8009324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009328:	6153      	str	r3, [r2, #20]
 800932a:	4b19      	ldr	r3, [pc, #100]	; (8009390 <MX_GPIO_Init+0xa0>)
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009332:	607b      	str	r3, [r7, #4]
 8009334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009336:	4b16      	ldr	r3, [pc, #88]	; (8009390 <MX_GPIO_Init+0xa0>)
 8009338:	695b      	ldr	r3, [r3, #20]
 800933a:	4a15      	ldr	r2, [pc, #84]	; (8009390 <MX_GPIO_Init+0xa0>)
 800933c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009340:	6153      	str	r3, [r2, #20]
 8009342:	4b13      	ldr	r3, [pc, #76]	; (8009390 <MX_GPIO_Init+0xa0>)
 8009344:	695b      	ldr	r3, [r3, #20]
 8009346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800934a:	603b      	str	r3, [r7, #0]
 800934c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800934e:	2200      	movs	r2, #0
 8009350:	2120      	movs	r1, #32
 8009352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009356:	f7f9 f858 	bl	800240a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800935a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800935e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8009360:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8009364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009366:	2300      	movs	r3, #0
 8009368:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800936a:	f107 030c 	add.w	r3, r7, #12
 800936e:	4619      	mov	r1, r3
 8009370:	4808      	ldr	r0, [pc, #32]	; (8009394 <MX_GPIO_Init+0xa4>)
 8009372:	f7f8 fea9 	bl	80020c8 <HAL_GPIO_Init>
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8009376:	2200      	movs	r2, #0
 8009378:	2100      	movs	r1, #0
 800937a:	2028      	movs	r0, #40	; 0x28
 800937c:	f7fc fb11 	bl	80059a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009380:	2028      	movs	r0, #40	; 0x28
 8009382:	f7fc fb2a 	bl	80059da <HAL_NVIC_EnableIRQ>

}
 8009386:	bf00      	nop
 8009388:	3720      	adds	r7, #32
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	40021000 	.word	0x40021000
 8009394:	48000800 	.word	0x48000800

08009398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 8009398:	b480      	push	{r7}
 800939a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800939c:	b672      	cpsid	i
}
 800939e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80093a0:	e7fe      	b.n	80093a0 <Error_Handler+0x8>

080093a2 <EcuM_StartUp_One>:
#include "EcuM.h"
#include "Os_task.h"
#include "BswM.h"

void EcuM_StartUp_One()
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	af00      	add	r7, sp, #0
	(void)HAL_Init();
 80093a6:	f7fc f9bd 	bl	8005724 <HAL_Init>
	BswM_Init();
 80093aa:	f7ff fd3e 	bl	8008e2a <BswM_Init>
}
 80093ae:	bf00      	nop
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <EcuM_StartUp_Two>:

void EcuM_StartUp_Two()
{
 80093b2:	b480      	push	{r7}
 80093b4:	af00      	add	r7, sp, #0

}
 80093b6:	bf00      	nop
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bc80      	pop	{r7}
 80093bc:	4770      	bx	lr

080093be <EcuM_Init>:

int EcuM_Init(void)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	af00      	add	r7, sp, #0
	EcuM_StartUp_One();
 80093c2:	f7ff ffee 	bl	80093a2 <EcuM_StartUp_One>
	/* Start Scheduler */
	Os_Start();
 80093c6:	f000 f803 	bl	80093d0 <Os_Start>

	return 0;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <Os_Start>:

#include "Os.h"
#include "Os_scheduler.h"

void Os_Start()
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	af00      	add	r7, sp, #0
	Os_Scheduler_Init();
 80093d4:	f000 f8d0 	bl	8009578 <Os_Scheduler_Init>
	Os_Scheduler_Start();
 80093d8:	f000 f946 	bl	8009668 <Os_Scheduler_Start>

	while(1)
 80093dc:	e7fe      	b.n	80093dc <Os_Start+0xc>
	...

080093e0 <Os_TaskMaster_WaitForContextSwitch>:
static volatile void Task100ms_0(void);
static volatile void Task500ms_0(void);


static void Os_TaskMaster_WaitForContextSwitch(void)
{
 80093e0:	b480      	push	{r7}
 80093e2:	af00      	add	r7, sp, #0
	while(g_Os_Task5ms_count_u32 == g_Os_5msTimerISR_count_u32)
 80093e4:	bf00      	nop
 80093e6:	4b09      	ldr	r3, [pc, #36]	; (800940c <Os_TaskMaster_WaitForContextSwitch+0x2c>)
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	4b09      	ldr	r3, [pc, #36]	; (8009410 <Os_TaskMaster_WaitForContextSwitch+0x30>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d0f9      	beq.n	80093e6 <Os_TaskMaster_WaitForContextSwitch+0x6>
	{

	}
	Os_Task5ms_0_cnt++;
 80093f2:	4b08      	ldr	r3, [pc, #32]	; (8009414 <Os_TaskMaster_WaitForContextSwitch+0x34>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	3301      	adds	r3, #1
 80093f8:	4a06      	ldr	r2, [pc, #24]	; (8009414 <Os_TaskMaster_WaitForContextSwitch+0x34>)
 80093fa:	6013      	str	r3, [r2, #0]
	g_Os_Task5ms_count_u32 = g_Os_5msTimerISR_count_u32;
 80093fc:	4b04      	ldr	r3, [pc, #16]	; (8009410 <Os_TaskMaster_WaitForContextSwitch+0x30>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a02      	ldr	r2, [pc, #8]	; (800940c <Os_TaskMaster_WaitForContextSwitch+0x2c>)
 8009402:	6013      	str	r3, [r2, #0]
}
 8009404:	bf00      	nop
 8009406:	46bd      	mov	sp, r7
 8009408:	bc80      	pop	{r7}
 800940a:	4770      	bx	lr
 800940c:	20001448 	.word	0x20001448
 8009410:	20001430 	.word	0x20001430
 8009414:	20001444 	.word	0x20001444

08009418 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	af00      	add	r7, sp, #0
	/* Increment general counter */
	HAL_IncTick();
 800941c:	f7fc f9ce 	bl	80057bc <HAL_IncTick>
	/* Reset counters if base counter reached maximum value */
	if(g_Os_BaseTimerISR_count_u32 == OS_BASETIMER_COUNT_MAX)
 8009420:	4b3e      	ldr	r3, [pc, #248]	; (800951c <SysTick_Handler+0x104>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f242 720f 	movw	r2, #9999	; 0x270f
 8009428:	4293      	cmp	r3, r2
 800942a:	d112      	bne.n	8009452 <SysTick_Handler+0x3a>
	{
		g_Os_BaseTimerISR_count_u32 = 0u;
 800942c:	4b3b      	ldr	r3, [pc, #236]	; (800951c <SysTick_Handler+0x104>)
 800942e:	2200      	movs	r2, #0
 8009430:	601a      	str	r2, [r3, #0]
		g_Os_5msTimerISR_count_u32 = 0u;
 8009432:	4b3b      	ldr	r3, [pc, #236]	; (8009520 <SysTick_Handler+0x108>)
 8009434:	2200      	movs	r2, #0
 8009436:	601a      	str	r2, [r3, #0]
		g_Os_10msTimerISR_count_u32 = 0u;
 8009438:	4b3a      	ldr	r3, [pc, #232]	; (8009524 <SysTick_Handler+0x10c>)
 800943a:	2200      	movs	r2, #0
 800943c:	601a      	str	r2, [r3, #0]
		g_Os_50msTimerISR_count_u32 = 0u;
 800943e:	4b3a      	ldr	r3, [pc, #232]	; (8009528 <SysTick_Handler+0x110>)
 8009440:	2200      	movs	r2, #0
 8009442:	601a      	str	r2, [r3, #0]
		g_Os_100msTimerISR_count_u32 = 0u;
 8009444:	4b39      	ldr	r3, [pc, #228]	; (800952c <SysTick_Handler+0x114>)
 8009446:	2200      	movs	r2, #0
 8009448:	601a      	str	r2, [r3, #0]
		g_Os_500msTimerISR_count_u32 = 0u;
 800944a:	4b39      	ldr	r3, [pc, #228]	; (8009530 <SysTick_Handler+0x118>)
 800944c:	2200      	movs	r2, #0
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	e004      	b.n	800945c <SysTick_Handler+0x44>
	}
	else
	{
		/* Increment base counter */
		g_Os_BaseTimerISR_count_u32++;
 8009452:	4b32      	ldr	r3, [pc, #200]	; (800951c <SysTick_Handler+0x104>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3301      	adds	r3, #1
 8009458:	4a30      	ldr	r2, [pc, #192]	; (800951c <SysTick_Handler+0x104>)
 800945a:	6013      	str	r3, [r2, #0]
	}

	/* Check for 5ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 5) == 0u)
 800945c:	4b2f      	ldr	r3, [pc, #188]	; (800951c <SysTick_Handler+0x104>)
 800945e:	6819      	ldr	r1, [r3, #0]
 8009460:	4b34      	ldr	r3, [pc, #208]	; (8009534 <SysTick_Handler+0x11c>)
 8009462:	fba3 2301 	umull	r2, r3, r3, r1
 8009466:	089a      	lsrs	r2, r3, #2
 8009468:	4613      	mov	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4413      	add	r3, r2
 800946e:	1aca      	subs	r2, r1, r3
 8009470:	2a00      	cmp	r2, #0
 8009472:	d104      	bne.n	800947e <SysTick_Handler+0x66>
	{
		/* Increment 5ms counter */
		g_Os_5msTimerISR_count_u32++;
 8009474:	4b2a      	ldr	r3, [pc, #168]	; (8009520 <SysTick_Handler+0x108>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3301      	adds	r3, #1
 800947a:	4a29      	ldr	r2, [pc, #164]	; (8009520 <SysTick_Handler+0x108>)
 800947c:	6013      	str	r3, [r2, #0]
	}

	/* Check for 10ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 10) == 0u)
 800947e:	4b27      	ldr	r3, [pc, #156]	; (800951c <SysTick_Handler+0x104>)
 8009480:	6819      	ldr	r1, [r3, #0]
 8009482:	4b2c      	ldr	r3, [pc, #176]	; (8009534 <SysTick_Handler+0x11c>)
 8009484:	fba3 2301 	umull	r2, r3, r3, r1
 8009488:	08da      	lsrs	r2, r3, #3
 800948a:	4613      	mov	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4413      	add	r3, r2
 8009490:	005b      	lsls	r3, r3, #1
 8009492:	1aca      	subs	r2, r1, r3
 8009494:	2a00      	cmp	r2, #0
 8009496:	d104      	bne.n	80094a2 <SysTick_Handler+0x8a>
	{
		/* Increment 10ms counter */
		g_Os_10msTimerISR_count_u32++;
 8009498:	4b22      	ldr	r3, [pc, #136]	; (8009524 <SysTick_Handler+0x10c>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	3301      	adds	r3, #1
 800949e:	4a21      	ldr	r2, [pc, #132]	; (8009524 <SysTick_Handler+0x10c>)
 80094a0:	6013      	str	r3, [r2, #0]
	}

	/* Check for 50ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 50) == 0u)
 80094a2:	4b1e      	ldr	r3, [pc, #120]	; (800951c <SysTick_Handler+0x104>)
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	4b24      	ldr	r3, [pc, #144]	; (8009538 <SysTick_Handler+0x120>)
 80094a8:	fba3 1302 	umull	r1, r3, r3, r2
 80094ac:	091b      	lsrs	r3, r3, #4
 80094ae:	2132      	movs	r1, #50	; 0x32
 80094b0:	fb01 f303 	mul.w	r3, r1, r3
 80094b4:	1ad3      	subs	r3, r2, r3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d104      	bne.n	80094c4 <SysTick_Handler+0xac>
	{
		/* Increment 50ms counter */
		g_Os_50msTimerISR_count_u32++;
 80094ba:	4b1b      	ldr	r3, [pc, #108]	; (8009528 <SysTick_Handler+0x110>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3301      	adds	r3, #1
 80094c0:	4a19      	ldr	r2, [pc, #100]	; (8009528 <SysTick_Handler+0x110>)
 80094c2:	6013      	str	r3, [r2, #0]
	}

	/* Check for 100ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 100) == 0u)
 80094c4:	4b15      	ldr	r3, [pc, #84]	; (800951c <SysTick_Handler+0x104>)
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	4b1b      	ldr	r3, [pc, #108]	; (8009538 <SysTick_Handler+0x120>)
 80094ca:	fba3 1302 	umull	r1, r3, r3, r2
 80094ce:	095b      	lsrs	r3, r3, #5
 80094d0:	2164      	movs	r1, #100	; 0x64
 80094d2:	fb01 f303 	mul.w	r3, r1, r3
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d104      	bne.n	80094e6 <SysTick_Handler+0xce>
	{
		/* Increment 100ms counter */
		g_Os_100msTimerISR_count_u32++;
 80094dc:	4b13      	ldr	r3, [pc, #76]	; (800952c <SysTick_Handler+0x114>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	3301      	adds	r3, #1
 80094e2:	4a12      	ldr	r2, [pc, #72]	; (800952c <SysTick_Handler+0x114>)
 80094e4:	6013      	str	r3, [r2, #0]
	}

	/* Check for 500ms condition */
	if((g_Os_BaseTimerISR_count_u32 % 500) == 0u)
 80094e6:	4b0d      	ldr	r3, [pc, #52]	; (800951c <SysTick_Handler+0x104>)
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	4b14      	ldr	r3, [pc, #80]	; (800953c <SysTick_Handler+0x124>)
 80094ec:	fba3 1302 	umull	r1, r3, r3, r2
 80094f0:	095b      	lsrs	r3, r3, #5
 80094f2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80094f6:	fb01 f303 	mul.w	r3, r1, r3
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d104      	bne.n	800950a <SysTick_Handler+0xf2>
	{
		/* Increment 500ms counter */
		g_Os_500msTimerISR_count_u32++;
 8009500:	4b0b      	ldr	r3, [pc, #44]	; (8009530 <SysTick_Handler+0x118>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	3301      	adds	r3, #1
 8009506:	4a0a      	ldr	r2, [pc, #40]	; (8009530 <SysTick_Handler+0x118>)
 8009508:	6013      	str	r3, [r2, #0]
	}

	/* Call PendSV_Handler for context switch */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800950a:	4b0d      	ldr	r3, [pc, #52]	; (8009540 <SysTick_Handler+0x128>)
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	4a0c      	ldr	r2, [pc, #48]	; (8009540 <SysTick_Handler+0x128>)
 8009510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009514:	6053      	str	r3, [r2, #4]
}
 8009516:	bf00      	nop
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	2000142c 	.word	0x2000142c
 8009520:	20001430 	.word	0x20001430
 8009524:	20001434 	.word	0x20001434
 8009528:	20001438 	.word	0x20001438
 800952c:	2000143c 	.word	0x2000143c
 8009530:	20001440 	.word	0x20001440
 8009534:	cccccccd 	.word	0xcccccccd
 8009538:	51eb851f 	.word	0x51eb851f
 800953c:	10624dd3 	.word	0x10624dd3
 8009540:	e000ed00 	.word	0xe000ed00

08009544 <PendSV_Handler>:

	/// At this point the processor has already pushed PSR, PC, LR, R12, R3, R2, R1 and R0
	/// onto the stack. We need to push the rest(i.e R4, R5, R6, R7, R8, R9, R10 & R11) to save the
	/// context of the current task.
	/// Disable interrupts
    __asm("CPSID   I");
 8009544:	b672      	cpsid	i
    /// Push registers R4 to R7
    __asm("PUSH    {R4-R7}");
 8009546:	b4f0      	push	{r4, r5, r6, r7}
    /// Push registers R8-R11
    __asm("MOV     R4, R8");
 8009548:	4644      	mov	r4, r8
    __asm("MOV     R5, R9");
 800954a:	464d      	mov	r5, r9
    __asm("MOV     R6, R10");
 800954c:	4656      	mov	r6, sl
    __asm("MOV     R7, R11");
 800954e:	465f      	mov	r7, fp
    __asm("PUSH    {R4-R7}");
 8009550:	b4f0      	push	{r4, r5, r6, r7}
    /// Load R0 with the address of pCurntTcb
    __asm("LDR     R0, =pCurntTcb");
 8009552:	4808      	ldr	r0, [pc, #32]	; (8009574 <PendSV_Handler+0x30>)
    /// Load R1 with the content of pCurntTcb(i.e post this, R1 will contain the address of current TCB).
    __asm("LDR     R1, [R0]");
 8009554:	6801      	ldr	r1, [r0, #0]
    /// Move the SP value to R4
    __asm("MOV     R4, SP");
 8009556:	466c      	mov	r4, sp
    /// Store the value of the stack pointer(copied in R4) to the current tasks "stackPt" element in its TCB.
    /// This marks an end to saving the context of the current task.
    __asm("STR     R4, [R1]");
 8009558:	600c      	str	r4, [r1, #0]


    /// STEP 2: LOAD THE NEW TASK CONTEXT FROM ITS STACK TO THE CPU REGISTERS, UPDATE pCurntTcb.

    /// Load the address of the next task TCB onto the R1.
    __asm("LDR     R1, [R1,#4]");
 800955a:	6849      	ldr	r1, [r1, #4]
    /// Load the contents of the next tasks stack pointer to pCurntTcb, equivalent to pointing pCurntTcb to
    /// the newer tasks TCB. Remember R1 contains the address of pCurntTcb.
    __asm("STR     R1, [R0]");
 800955c:	6001      	str	r1, [r0, #0]
    /// Load the newer tasks TCB to the SP using R4.
    __asm("LDR     R4, [R1]");
 800955e:	680c      	ldr	r4, [r1, #0]
    __asm("MOV     SP, R4");
 8009560:	46a5      	mov	sp, r4
    /// Pop registers R8-R11
    __asm("POP     {R4-R7}");
 8009562:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 8009564:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 8009566:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 8009568:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 800956a:	46bb      	mov	fp, r7
    /// Pop registers R4-R7
    __asm("POP     {R4-R7}");
 800956c:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("CPSIE   I ");
 800956e:	b662      	cpsie	i
    __asm("BX      LR");
 8009570:	4770      	bx	lr

}
 8009572:	bf00      	nop
 8009574:	20000488 	.word	0x20000488

08009578 <Os_Scheduler_Init>:

void Os_Scheduler_Init()
{
 8009578:	b480      	push	{r7}
 800957a:	af00      	add	r7, sp, #0
	/// Enter critical section
	/// Disable interrupts
	__asm("CPSID   I");
 800957c:	b672      	cpsid	i
	/// Make the TCB linked list circular
	tcbs[0].nextPt = &tcbs[1];
 800957e:	4b29      	ldr	r3, [pc, #164]	; (8009624 <Os_Scheduler_Init+0xac>)
 8009580:	4a29      	ldr	r2, [pc, #164]	; (8009628 <Os_Scheduler_Init+0xb0>)
 8009582:	605a      	str	r2, [r3, #4]
	tcbs[1].nextPt = &tcbs[2];
 8009584:	4b27      	ldr	r3, [pc, #156]	; (8009624 <Os_Scheduler_Init+0xac>)
 8009586:	4a29      	ldr	r2, [pc, #164]	; (800962c <Os_Scheduler_Init+0xb4>)
 8009588:	60da      	str	r2, [r3, #12]
	tcbs[2].nextPt = &tcbs[3];
 800958a:	4b26      	ldr	r3, [pc, #152]	; (8009624 <Os_Scheduler_Init+0xac>)
 800958c:	4a28      	ldr	r2, [pc, #160]	; (8009630 <Os_Scheduler_Init+0xb8>)
 800958e:	615a      	str	r2, [r3, #20]
	tcbs[3].nextPt = &tcbs[4];
 8009590:	4b24      	ldr	r3, [pc, #144]	; (8009624 <Os_Scheduler_Init+0xac>)
 8009592:	4a28      	ldr	r2, [pc, #160]	; (8009634 <Os_Scheduler_Init+0xbc>)
 8009594:	61da      	str	r2, [r3, #28]
	tcbs[4].nextPt = &tcbs[0];
 8009596:	4b23      	ldr	r3, [pc, #140]	; (8009624 <Os_Scheduler_Init+0xac>)
 8009598:	4a22      	ldr	r2, [pc, #136]	; (8009624 <Os_Scheduler_Init+0xac>)
 800959a:	625a      	str	r2, [r3, #36]	; 0x24

	/// Setup stack for task0

	/// Setup the stack such that it is holding one task context.
	/// Remember it is a descending stack and a context consists of 16 registers.
	tcbs[0].stackPt = &TCB_STACK[0][OS_TASK_STACKSIZE-16];
 800959c:	4b21      	ldr	r3, [pc, #132]	; (8009624 <Os_Scheduler_Init+0xac>)
 800959e:	4a26      	ldr	r2, [pc, #152]	; (8009638 <Os_Scheduler_Init+0xc0>)
 80095a0:	601a      	str	r2, [r3, #0]
	/// Set the 'T' bit in stacked xPSR to '1' to notify processor
	/// on exception return about the thumb state. V6-m and V7-m cores
	/// can only support thumb state hence this should be always set
	/// to '1'.
	TCB_STACK[0][OS_TASK_STACKSIZE-1] = 0x01000000;
 80095a2:	4b26      	ldr	r3, [pc, #152]	; (800963c <Os_Scheduler_Init+0xc4>)
 80095a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80095a8:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
	/// Set the stacked PC to point to the task
	TCB_STACK[0][OS_TASK_STACKSIZE-2] = (int32_t)(Os_Task_Master_0);
 80095ac:	4a24      	ldr	r2, [pc, #144]	; (8009640 <Os_Scheduler_Init+0xc8>)
 80095ae:	4b23      	ldr	r3, [pc, #140]	; (800963c <Os_Scheduler_Init+0xc4>)
 80095b0:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

	/// Setup stack for task1

	/// Setup the stack such that it is holding one task context.
	/// Remember it is a descending stack and a context consists of 16 registers.
    tcbs[1].stackPt = &TCB_STACK[1][OS_TASK_STACKSIZE-16];
 80095b4:	4b1b      	ldr	r3, [pc, #108]	; (8009624 <Os_Scheduler_Init+0xac>)
 80095b6:	4a23      	ldr	r2, [pc, #140]	; (8009644 <Os_Scheduler_Init+0xcc>)
 80095b8:	609a      	str	r2, [r3, #8]
    /// Set the 'T' bit in stacked xPSR to '1' to notify processor
    /// on exception return about the thumb state. V6-m and V7-m cores
    /// can only support thumb state hence this should be always set
    /// to '1'.
    TCB_STACK[1][OS_TASK_STACKSIZE-1] = 0x01000000;
 80095ba:	4b20      	ldr	r3, [pc, #128]	; (800963c <Os_Scheduler_Init+0xc4>)
 80095bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80095c0:	f8c3 263c 	str.w	r2, [r3, #1596]	; 0x63c
    /// Set the stacked PC to point to the task
    TCB_STACK[1][OS_TASK_STACKSIZE-2] = (int32_t)(Task10ms_0);
 80095c4:	4a20      	ldr	r2, [pc, #128]	; (8009648 <Os_Scheduler_Init+0xd0>)
 80095c6:	4b1d      	ldr	r3, [pc, #116]	; (800963c <Os_Scheduler_Init+0xc4>)
 80095c8:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638


    tcbs[2].stackPt = &TCB_STACK[2][OS_TASK_STACKSIZE-16];
 80095cc:	4b15      	ldr	r3, [pc, #84]	; (8009624 <Os_Scheduler_Init+0xac>)
 80095ce:	4a1f      	ldr	r2, [pc, #124]	; (800964c <Os_Scheduler_Init+0xd4>)
 80095d0:	611a      	str	r2, [r3, #16]
    TCB_STACK[2][OS_TASK_STACKSIZE-1] = 0x01000000;
 80095d2:	4b1a      	ldr	r3, [pc, #104]	; (800963c <Os_Scheduler_Init+0xc4>)
 80095d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80095d8:	f8c3 295c 	str.w	r2, [r3, #2396]	; 0x95c
    TCB_STACK[2][OS_TASK_STACKSIZE-2] = (int32_t)(Task50ms_0);
 80095dc:	4a1c      	ldr	r2, [pc, #112]	; (8009650 <Os_Scheduler_Init+0xd8>)
 80095de:	4b17      	ldr	r3, [pc, #92]	; (800963c <Os_Scheduler_Init+0xc4>)
 80095e0:	f8c3 2958 	str.w	r2, [r3, #2392]	; 0x958

    tcbs[3].stackPt = &TCB_STACK[3][OS_TASK_STACKSIZE-16];
 80095e4:	4b0f      	ldr	r3, [pc, #60]	; (8009624 <Os_Scheduler_Init+0xac>)
 80095e6:	4a1b      	ldr	r2, [pc, #108]	; (8009654 <Os_Scheduler_Init+0xdc>)
 80095e8:	619a      	str	r2, [r3, #24]
    TCB_STACK[3][OS_TASK_STACKSIZE-1] = 0x01000000;
 80095ea:	4b14      	ldr	r3, [pc, #80]	; (800963c <Os_Scheduler_Init+0xc4>)
 80095ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80095f0:	f8c3 2c7c 	str.w	r2, [r3, #3196]	; 0xc7c
    TCB_STACK[3][OS_TASK_STACKSIZE-2] = (int32_t)(Task100ms_0);
 80095f4:	4a18      	ldr	r2, [pc, #96]	; (8009658 <Os_Scheduler_Init+0xe0>)
 80095f6:	4b11      	ldr	r3, [pc, #68]	; (800963c <Os_Scheduler_Init+0xc4>)
 80095f8:	f8c3 2c78 	str.w	r2, [r3, #3192]	; 0xc78

    tcbs[4].stackPt = &TCB_STACK[4][OS_TASK_STACKSIZE-16];
 80095fc:	4b09      	ldr	r3, [pc, #36]	; (8009624 <Os_Scheduler_Init+0xac>)
 80095fe:	4a17      	ldr	r2, [pc, #92]	; (800965c <Os_Scheduler_Init+0xe4>)
 8009600:	621a      	str	r2, [r3, #32]
    TCB_STACK[4][OS_TASK_STACKSIZE-1] = 0x01000000;
 8009602:	4b0e      	ldr	r3, [pc, #56]	; (800963c <Os_Scheduler_Init+0xc4>)
 8009604:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009608:	f8c3 2f9c 	str.w	r2, [r3, #3996]	; 0xf9c
    TCB_STACK[4][OS_TASK_STACKSIZE-2] = (int32_t)(Task500ms_0);
 800960c:	4a14      	ldr	r2, [pc, #80]	; (8009660 <Os_Scheduler_Init+0xe8>)
 800960e:	4b0b      	ldr	r3, [pc, #44]	; (800963c <Os_Scheduler_Init+0xc4>)
 8009610:	f8c3 2f98 	str.w	r2, [r3, #3992]	; 0xf98

    /// Make current tcb pointer point to task0
    pCurntTcb = &tcbs[0];
 8009614:	4b13      	ldr	r3, [pc, #76]	; (8009664 <Os_Scheduler_Init+0xec>)
 8009616:	4a03      	ldr	r2, [pc, #12]	; (8009624 <Os_Scheduler_Init+0xac>)
 8009618:	601a      	str	r2, [r3, #0]
    /// Enable interrupts
    __asm("CPSIE   I ");
 800961a:	b662      	cpsie	i
}
 800961c:	bf00      	nop
 800961e:	46bd      	mov	sp, r7
 8009620:	bc80      	pop	{r7}
 8009622:	4770      	bx	lr
 8009624:	20000460 	.word	0x20000460
 8009628:	20000468 	.word	0x20000468
 800962c:	20000470 	.word	0x20000470
 8009630:	20000478 	.word	0x20000478
 8009634:	20000480 	.word	0x20000480
 8009638:	2000076c 	.word	0x2000076c
 800963c:	2000048c 	.word	0x2000048c
 8009640:	08009695 	.word	0x08009695
 8009644:	20000a8c 	.word	0x20000a8c
 8009648:	080096e9 	.word	0x080096e9
 800964c:	20000dac 	.word	0x20000dac
 8009650:	08009739 	.word	0x08009739
 8009654:	200010cc 	.word	0x200010cc
 8009658:	08009789 	.word	0x08009789
 800965c:	200013ec 	.word	0x200013ec
 8009660:	080097d9 	.word	0x080097d9
 8009664:	20000488 	.word	0x20000488

08009668 <Os_Scheduler_Start>:


__attribute__((naked)) void Os_Scheduler_Start(void)
{
    /// R0 contains the address of currentPt
    __asm("LDR     R0, =pCurntTcb");
 8009668:	4809      	ldr	r0, [pc, #36]	; (8009690 <Os_Scheduler_Start+0x28>)
    /// R2 contains the address in currentPt(value of currentPt)
    __asm("LDR     R2, [R0]");
 800966a:	6802      	ldr	r2, [r0, #0]
    /// Load the SP reg with the stacked SP value
    __asm("LDR     R4, [R2]");
 800966c:	6814      	ldr	r4, [r2, #0]
    __asm("MOV     SP, R4");
 800966e:	46a5      	mov	sp, r4
    /// Pop registers R8-R11(user saved context)
    __asm("POP     {R4-R7}");
 8009670:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 8009672:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 8009674:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 8009676:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 8009678:	46bb      	mov	fp, r7
    /// Pop registers R4-R7(user saved context)
    __asm("POP     {R4-R7}");
 800967a:	bcf0      	pop	{r4, r5, r6, r7}
    ///  Start poping the stacked exception frame.
    __asm("POP     {R0-R3}");
 800967c:	bc0f      	pop	{r0, r1, r2, r3}
    __asm("POP     {R4}");
 800967e:	bc10      	pop	{r4}
    __asm("MOV     R12, R4");
 8009680:	46a4      	mov	ip, r4
    /// Skip the saved LR
    __asm("ADD     SP,SP,#4");
 8009682:	b001      	add	sp, #4
    /// POP the saved PC into LR via R4, We do this to jump into the
    /// first task when we execute the branch instruction to exit this routine.
    __asm("POP     {R4}");
 8009684:	bc10      	pop	{r4}
    __asm("MOV     LR, R4");
 8009686:	46a6      	mov	lr, r4
    __asm("ADD     SP,SP,#4");
 8009688:	b001      	add	sp, #4
    /// Enable interrupts
    __asm("CPSIE   I ");
 800968a:	b662      	cpsie	i
    __asm("BX      LR");
 800968c:	4770      	bx	lr
}
 800968e:	bf00      	nop
 8009690:	20000488 	.word	0x20000488

08009694 <Os_Task_Master_0>:
/**
  * @brief  Initialization task
  * @return None
  */
static volatile void Os_Task_Master_0(void)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	af00      	add	r7, sp, #0
    while(1)
    {
    	/* Wait for context switch of master task */
    	Os_TaskMaster_WaitForContextSwitch();
 8009698:	f7ff fea2 	bl	80093e0 <Os_TaskMaster_WaitForContextSwitch>

    	/* Check Os state */
    	switch (g_OS_State_e)
 800969c:	4b11      	ldr	r3, [pc, #68]	; (80096e4 <Os_Task_Master_0+0x50>)
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b05      	cmp	r3, #5
 80096a4:	d81c      	bhi.n	80096e0 <Os_Task_Master_0+0x4c>
 80096a6:	a201      	add	r2, pc, #4	; (adr r2, 80096ac <Os_Task_Master_0+0x18>)
 80096a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ac:	080096c5 	.word	0x080096c5
 80096b0:	080096cd 	.word	0x080096cd
 80096b4:	080096d9 	.word	0x080096d9
 80096b8:	080096e1 	.word	0x080096e1
 80096bc:	080096e1 	.word	0x080096e1
 80096c0:	080096e1 	.word	0x080096e1
    	{
    		case OS_STATE_RESET:
    		{
    			g_OS_State_e = OS_STATE_INIT;
 80096c4:	4b07      	ldr	r3, [pc, #28]	; (80096e4 <Os_Task_Master_0+0x50>)
 80096c6:	2201      	movs	r2, #1
 80096c8:	701a      	strb	r2, [r3, #0]
    		} break;
 80096ca:	e00a      	b.n	80096e2 <Os_Task_Master_0+0x4e>
    		case OS_STATE_INIT:
    		{
    			Os_Task_Master();
 80096cc:	f000 f8ac 	bl	8009828 <Os_Task_Master>
    			g_OS_State_e = OS_STATE_NVMREAD;
 80096d0:	4b04      	ldr	r3, [pc, #16]	; (80096e4 <Os_Task_Master_0+0x50>)
 80096d2:	2202      	movs	r2, #2
 80096d4:	701a      	strb	r2, [r3, #0]
    		} break;
 80096d6:	e004      	b.n	80096e2 <Os_Task_Master_0+0x4e>
    		case OS_STATE_NVMREAD:
    		{
    			/* Todo: preform readall here */
    			g_OS_State_e = OS_STATE_RUNNING;
 80096d8:	4b02      	ldr	r3, [pc, #8]	; (80096e4 <Os_Task_Master_0+0x50>)
 80096da:	2203      	movs	r2, #3
 80096dc:	701a      	strb	r2, [r3, #0]
    		} break;
 80096de:	e000      	b.n	80096e2 <Os_Task_Master_0+0x4e>
    			/* NvM write all, write error */
    		} break;
    		default:
    		{

    		} break;
 80096e0:	bf00      	nop
    	Os_TaskMaster_WaitForContextSwitch();
 80096e2:	e7d9      	b.n	8009698 <Os_Task_Master_0+0x4>
 80096e4:	2000146c 	.word	0x2000146c

080096e8 <Task10ms_0>:
/**
  * @brief  Periodic 10ms task
  * @return None
  */
static volatile void Task10ms_0(void)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING == g_OS_State_e)
 80096ec:	4b0e      	ldr	r3, [pc, #56]	; (8009728 <Task10ms_0+0x40>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b03      	cmp	r3, #3
 80096f4:	d112      	bne.n	800971c <Task10ms_0+0x34>
    	{
			while(g_Os_Task10ms_count_u32 == g_Os_10msTimerISR_count_u32)
 80096f6:	bf00      	nop
 80096f8:	4b0c      	ldr	r3, [pc, #48]	; (800972c <Task10ms_0+0x44>)
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	4b0c      	ldr	r3, [pc, #48]	; (8009730 <Task10ms_0+0x48>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	429a      	cmp	r2, r3
 8009702:	d0f9      	beq.n	80096f8 <Task10ms_0+0x10>
			{

			}
			Os_Task10ms_0_cnt++;
 8009704:	4b0b      	ldr	r3, [pc, #44]	; (8009734 <Task10ms_0+0x4c>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	3301      	adds	r3, #1
 800970a:	4a0a      	ldr	r2, [pc, #40]	; (8009734 <Task10ms_0+0x4c>)
 800970c:	6013      	str	r3, [r2, #0]
			g_Os_Task10ms_count_u32 = g_Os_10msTimerISR_count_u32;
 800970e:	4b08      	ldr	r3, [pc, #32]	; (8009730 <Task10ms_0+0x48>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a06      	ldr	r2, [pc, #24]	; (800972c <Task10ms_0+0x44>)
 8009714:	6013      	str	r3, [r2, #0]

			Os_Task_10ms();
 8009716:	f000 f88d 	bl	8009834 <Os_Task_10ms>
 800971a:	e7e7      	b.n	80096ec <Task10ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task10ms_count_u32 = g_Os_10msTimerISR_count_u32;
 800971c:	4b04      	ldr	r3, [pc, #16]	; (8009730 <Task10ms_0+0x48>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a02      	ldr	r2, [pc, #8]	; (800972c <Task10ms_0+0x44>)
 8009722:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING == g_OS_State_e)
 8009724:	e7e2      	b.n	80096ec <Task10ms_0+0x4>
 8009726:	bf00      	nop
 8009728:	2000146c 	.word	0x2000146c
 800972c:	20001450 	.word	0x20001450
 8009730:	20001434 	.word	0x20001434
 8009734:	2000144c 	.word	0x2000144c

08009738 <Task50ms_0>:
/**
  * @brief  Periodic 50ms task
  * @return None
  */
static volatile void Task50ms_0(void)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING == g_OS_State_e)
 800973c:	4b0e      	ldr	r3, [pc, #56]	; (8009778 <Task50ms_0+0x40>)
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2b03      	cmp	r3, #3
 8009744:	d112      	bne.n	800976c <Task50ms_0+0x34>
    	{
			while(g_Os_Task50ms_count_u32 == g_Os_50msTimerISR_count_u32)
 8009746:	bf00      	nop
 8009748:	4b0c      	ldr	r3, [pc, #48]	; (800977c <Task50ms_0+0x44>)
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	4b0c      	ldr	r3, [pc, #48]	; (8009780 <Task50ms_0+0x48>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	429a      	cmp	r2, r3
 8009752:	d0f9      	beq.n	8009748 <Task50ms_0+0x10>
			{

			}
			Os_Task50ms_0_cnt++;
 8009754:	4b0b      	ldr	r3, [pc, #44]	; (8009784 <Task50ms_0+0x4c>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3301      	adds	r3, #1
 800975a:	4a0a      	ldr	r2, [pc, #40]	; (8009784 <Task50ms_0+0x4c>)
 800975c:	6013      	str	r3, [r2, #0]
			g_Os_Task50ms_count_u32 = g_Os_50msTimerISR_count_u32;
 800975e:	4b08      	ldr	r3, [pc, #32]	; (8009780 <Task50ms_0+0x48>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a06      	ldr	r2, [pc, #24]	; (800977c <Task50ms_0+0x44>)
 8009764:	6013      	str	r3, [r2, #0]

			Os_Task_50ms();
 8009766:	f000 f86b 	bl	8009840 <Os_Task_50ms>
 800976a:	e7e7      	b.n	800973c <Task50ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task50ms_count_u32 = g_Os_50msTimerISR_count_u32;
 800976c:	4b04      	ldr	r3, [pc, #16]	; (8009780 <Task50ms_0+0x48>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a02      	ldr	r2, [pc, #8]	; (800977c <Task50ms_0+0x44>)
 8009772:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING == g_OS_State_e)
 8009774:	e7e2      	b.n	800973c <Task50ms_0+0x4>
 8009776:	bf00      	nop
 8009778:	2000146c 	.word	0x2000146c
 800977c:	20001458 	.word	0x20001458
 8009780:	20001438 	.word	0x20001438
 8009784:	20001454 	.word	0x20001454

08009788 <Task100ms_0>:
/**
  * @brief  Periodic 100ms task
  * @return None
  */
static volatile void Task100ms_0(void)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING == g_OS_State_e)
 800978c:	4b0e      	ldr	r3, [pc, #56]	; (80097c8 <Task100ms_0+0x40>)
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	b2db      	uxtb	r3, r3
 8009792:	2b03      	cmp	r3, #3
 8009794:	d112      	bne.n	80097bc <Task100ms_0+0x34>
    	{
			while(g_Os_Task100ms_count_u32 == g_Os_100msTimerISR_count_u32)
 8009796:	bf00      	nop
 8009798:	4b0c      	ldr	r3, [pc, #48]	; (80097cc <Task100ms_0+0x44>)
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	4b0c      	ldr	r3, [pc, #48]	; (80097d0 <Task100ms_0+0x48>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d0f9      	beq.n	8009798 <Task100ms_0+0x10>
			{

			}
			Os_Task100ms_0_cnt++;
 80097a4:	4b0b      	ldr	r3, [pc, #44]	; (80097d4 <Task100ms_0+0x4c>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3301      	adds	r3, #1
 80097aa:	4a0a      	ldr	r2, [pc, #40]	; (80097d4 <Task100ms_0+0x4c>)
 80097ac:	6013      	str	r3, [r2, #0]
			g_Os_Task100ms_count_u32 = g_Os_100msTimerISR_count_u32;
 80097ae:	4b08      	ldr	r3, [pc, #32]	; (80097d0 <Task100ms_0+0x48>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a06      	ldr	r2, [pc, #24]	; (80097cc <Task100ms_0+0x44>)
 80097b4:	6013      	str	r3, [r2, #0]

			Os_Task_100ms();
 80097b6:	f000 f849 	bl	800984c <Os_Task_100ms>
 80097ba:	e7e7      	b.n	800978c <Task100ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task100ms_count_u32 = g_Os_100msTimerISR_count_u32;
 80097bc:	4b04      	ldr	r3, [pc, #16]	; (80097d0 <Task100ms_0+0x48>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a02      	ldr	r2, [pc, #8]	; (80097cc <Task100ms_0+0x44>)
 80097c2:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING == g_OS_State_e)
 80097c4:	e7e2      	b.n	800978c <Task100ms_0+0x4>
 80097c6:	bf00      	nop
 80097c8:	2000146c 	.word	0x2000146c
 80097cc:	20001460 	.word	0x20001460
 80097d0:	2000143c 	.word	0x2000143c
 80097d4:	2000145c 	.word	0x2000145c

080097d8 <Task500ms_0>:
/**
  * @brief  Periodic 500ms task
  * @return None
  */
static volatile void Task500ms_0(void)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	af00      	add	r7, sp, #0
    while(1)
    {
    	if(OS_STATE_RUNNING == g_OS_State_e)
 80097dc:	4b0e      	ldr	r3, [pc, #56]	; (8009818 <Task500ms_0+0x40>)
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b03      	cmp	r3, #3
 80097e4:	d112      	bne.n	800980c <Task500ms_0+0x34>
    	{
			while(g_Os_Task500ms_count_u32 == g_Os_500msTimerISR_count_u32)
 80097e6:	bf00      	nop
 80097e8:	4b0c      	ldr	r3, [pc, #48]	; (800981c <Task500ms_0+0x44>)
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	4b0c      	ldr	r3, [pc, #48]	; (8009820 <Task500ms_0+0x48>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d0f9      	beq.n	80097e8 <Task500ms_0+0x10>
			{

			}
			Os_Task500ms_0_cnt++;
 80097f4:	4b0b      	ldr	r3, [pc, #44]	; (8009824 <Task500ms_0+0x4c>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	3301      	adds	r3, #1
 80097fa:	4a0a      	ldr	r2, [pc, #40]	; (8009824 <Task500ms_0+0x4c>)
 80097fc:	6013      	str	r3, [r2, #0]
			g_Os_Task500ms_count_u32 = g_Os_500msTimerISR_count_u32;
 80097fe:	4b08      	ldr	r3, [pc, #32]	; (8009820 <Task500ms_0+0x48>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a06      	ldr	r2, [pc, #24]	; (800981c <Task500ms_0+0x44>)
 8009804:	6013      	str	r3, [r2, #0]

			Os_Task_500ms();
 8009806:	f000 f827 	bl	8009858 <Os_Task_500ms>
 800980a:	e7e7      	b.n	80097dc <Task500ms_0+0x4>
    	}
    	else
    	{
    		g_Os_Task500ms_count_u32 = g_Os_500msTimerISR_count_u32;
 800980c:	4b04      	ldr	r3, [pc, #16]	; (8009820 <Task500ms_0+0x48>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a02      	ldr	r2, [pc, #8]	; (800981c <Task500ms_0+0x44>)
 8009812:	6013      	str	r3, [r2, #0]
    	if(OS_STATE_RUNNING == g_OS_State_e)
 8009814:	e7e2      	b.n	80097dc <Task500ms_0+0x4>
 8009816:	bf00      	nop
 8009818:	2000146c 	.word	0x2000146c
 800981c:	20001468 	.word	0x20001468
 8009820:	20001440 	.word	0x20001440
 8009824:	20001464 	.word	0x20001464

08009828 <Os_Task_Master>:

#include "Os_task.h"
#include "Rte_Os.h"

TASK(Master)()
{
 8009828:	b580      	push	{r7, lr}
 800982a:	af00      	add	r7, sp, #0
	Rte_Os_Task_Master();
 800982c:	f000 f86c 	bl	8009908 <Rte_Task_Master>
}
 8009830:	bf00      	nop
 8009832:	bd80      	pop	{r7, pc}

08009834 <Os_Task_10ms>:

TASK(10ms)()
{
 8009834:	b580      	push	{r7, lr}
 8009836:	af00      	add	r7, sp, #0
	Rte_Os_Task_10ms();
 8009838:	f000 f886 	bl	8009948 <Rte_Task_10ms>
}
 800983c:	bf00      	nop
 800983e:	bd80      	pop	{r7, pc}

08009840 <Os_Task_50ms>:

TASK(50ms)()
{
 8009840:	b580      	push	{r7, lr}
 8009842:	af00      	add	r7, sp, #0
	Rte_Os_Task_50ms();
 8009844:	f000 f894 	bl	8009970 <Rte_Task_50ms>
}
 8009848:	bf00      	nop
 800984a:	bd80      	pop	{r7, pc}

0800984c <Os_Task_100ms>:

TASK(100ms)()
{
 800984c:	b580      	push	{r7, lr}
 800984e:	af00      	add	r7, sp, #0
	Rte_Os_Task_100ms();
 8009850:	f000 f894 	bl	800997c <Rte_Task_100ms>
}
 8009854:	bf00      	nop
 8009856:	bd80      	pop	{r7, pc}

08009858 <Os_Task_500ms>:

TASK(500ms)()
{
 8009858:	b580      	push	{r7, lr}
 800985a:	af00      	add	r7, sp, #0
	Rte_Os_Task_500ms();
 800985c:	f000 f89a 	bl	8009994 <Rte_Task_500ms>
}
 8009860:	bf00      	nop
 8009862:	bd80      	pop	{r7, pc}

08009864 <Tm_Init>:

#include "Tm.h"
#include "Gpt.h"

void Tm_Init(void)
{
 8009864:	b480      	push	{r7}
 8009866:	af00      	add	r7, sp, #0

}
 8009868:	bf00      	nop
 800986a:	46bd      	mov	sp, r7
 800986c:	bc80      	pop	{r7}
 800986e:	4770      	bx	lr

08009870 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80098a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009874:	480d      	ldr	r0, [pc, #52]	; (80098ac <LoopForever+0x6>)
  ldr r1, =_edata
 8009876:	490e      	ldr	r1, [pc, #56]	; (80098b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009878:	4a0e      	ldr	r2, [pc, #56]	; (80098b4 <LoopForever+0xe>)
  movs r3, #0
 800987a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800987c:	e002      	b.n	8009884 <LoopCopyDataInit>

0800987e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800987e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009882:	3304      	adds	r3, #4

08009884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009888:	d3f9      	bcc.n	800987e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800988a:	4a0b      	ldr	r2, [pc, #44]	; (80098b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800988c:	4c0b      	ldr	r4, [pc, #44]	; (80098bc <LoopForever+0x16>)
  movs r3, #0
 800988e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009890:	e001      	b.n	8009896 <LoopFillZerobss>

08009892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009894:	3204      	adds	r2, #4

08009896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009898:	d3fb      	bcc.n	8009892 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800989a:	f7fb ff3d 	bl	8005718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800989e:	f000 f911 	bl	8009ac4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	EcuM_Init
 80098a2:	f7ff fd8c 	bl	80093be <EcuM_Init>

080098a6 <LoopForever>:

LoopForever:
    b LoopForever
 80098a6:	e7fe      	b.n	80098a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80098a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80098ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80098b0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80098b4:	0800a488 	.word	0x0800a488
  ldr r2, =_sbss
 80098b8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80098bc:	20001494 	.word	0x20001494

080098c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80098c0:	e7fe      	b.n	80098c0 <ADC1_2_IRQHandler>

080098c2 <Rte_Call_EnterProtectedSection>:

static inline void Rte_Call_EnterProtectedSection(void);
static inline void Rte_Call_LeaveProtectedSection(void);

static inline void Rte_Call_EnterProtectedSection(void)
{
 80098c2:	b480      	push	{r7}
 80098c4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80098c6:	b672      	cpsid	i
}
 80098c8:	bf00      	nop
	__disable_irq();
}
 80098ca:	bf00      	nop
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bc80      	pop	{r7}
 80098d0:	4770      	bx	lr

080098d2 <Rte_Call_LeaveProtectedSection>:

static inline void Rte_Call_LeaveProtectedSection(void)
{
 80098d2:	b480      	push	{r7}
 80098d4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80098d6:	b662      	cpsie	i
}
 80098d8:	bf00      	nop
	__enable_irq();
}
 80098da:	bf00      	nop
 80098dc:	46bd      	mov	sp, r7
 80098de:	bc80      	pop	{r7}
 80098e0:	4770      	bx	lr
	...

080098e4 <Rte_Init>:

void Rte_Init(void)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	af00      	add	r7, sp, #0
	Int_ButtonState = (uint8)HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 80098e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80098ec:	4804      	ldr	r0, [pc, #16]	; (8009900 <Rte_Init+0x1c>)
 80098ee:	f7f8 fd75 	bl	80023dc <HAL_GPIO_ReadPin>
 80098f2:	4603      	mov	r3, r0
 80098f4:	461a      	mov	r2, r3
 80098f6:	4b03      	ldr	r3, [pc, #12]	; (8009904 <Rte_Init+0x20>)
 80098f8:	701a      	strb	r2, [r3, #0]
}
 80098fa:	bf00      	nop
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	48000800 	.word	0x48000800
 8009904:	2000146d 	.word	0x2000146d

08009908 <Rte_Task_Master>:

/* Os Tasks*/
/* Init task */
void Rte_Task_Master(void)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	af00      	add	r7, sp, #0
	/* EcuM startup two: MCal drivers init, BswM init */
	EcuM_StartUp_Two();
 800990c:	f7ff fd51 	bl	80093b2 <EcuM_StartUp_Two>

	/* Bsw stacks init */
	NvM_Init();
 8009910:	f7ff fa6a 	bl	8008de8 <NvM_Init>
	Ea_Init();
 8009914:	f7ff fa40 	bl	8008d98 <Ea_Init>
	/* Rte init */
	Rte_Init();
 8009918:	f7ff ffe4 	bl	80098e4 <Rte_Init>
	/* Cdd init */
	Cdd_Servo_Init();
 800991c:	f7f7 f9b0 	bl	8000c80 <Cdd_Servo_Init>
	/* Asw init */
	Access_Init();
 8009920:	f7f7 f8a4 	bl	8000a6c <Access_Init>
	Engine_Init();
 8009924:	f7f7 f8d0 	bl	8000ac8 <Engine_Init>
	Brakes_Init();
 8009928:	f7f7 f8b2 	bl	8000a90 <Brakes_Init>
	Steering_Init();
 800992c:	f7f7 f996 	bl	8000c5c <Steering_Init>
	Blinker_Init();
 8009930:	f7f7 f94c 	bl	8000bcc <Blinker_Init>
	FrontLights_Init();
 8009934:	f7f7 f95c 	bl	8000bf0 <FrontLights_Init>
	InteriorLights_Init();
 8009938:	f7f7 f96c 	bl	8000c14 <InteriorLights_Init>
	RearLights_Init();
 800993c:	f7f7 f97c 	bl	8000c38 <RearLights_Init>
	/* Init function of ASW module used for testing purposes. TODO: remove after tests */
	LED_Init();
 8009940:	f7f7 f916 	bl	8000b70 <LED_Init>

	/* Add new ASW init functions here */
}
 8009944:	bf00      	nop
 8009946:	bd80      	pop	{r7, pc}

08009948 <Rte_Task_10ms>:

void Rte_Task_10ms(void)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0
	/* BSW */
	BswM_MainFunction();
 800994c:	f7ff fa86 	bl	8008e5c <BswM_MainFunction>
	NvM_MainFunction();
 8009950:	f7ff fa56 	bl	8008e00 <NvM_MainFunction>
	/* CDD */
	Cdd_Servo_MainFunction();
 8009954:	f7f7 fb7e 	bl	8001054 <Cdd_Servo_MainFunction>
	/* ASW */
	Access_MainFunction();
 8009958:	f7f7 f894 	bl	8000a84 <Access_MainFunction>
	Engine_MainFunction();
 800995c:	f7f7 f8c0 	bl	8000ae0 <Engine_MainFunction>
	Brakes_MainFunction();
 8009960:	f7f7 f8a2 	bl	8000aa8 <Brakes_MainFunction>
	Steering_MainFunction();
 8009964:	f7f7 f986 	bl	8000c74 <Steering_MainFunction>
	/* MainFunction of ASW module used for testing purposes. TODO: remove after tests */
	LED_MainFunction();
 8009968:	f7f7 f914 	bl	8000b94 <LED_MainFunction>
}
 800996c:	bf00      	nop
 800996e:	bd80      	pop	{r7, pc}

08009970 <Rte_Task_50ms>:

void Rte_Task_50ms(void)
{
 8009970:	b480      	push	{r7}
 8009972:	af00      	add	r7, sp, #0

}
 8009974:	bf00      	nop
 8009976:	46bd      	mov	sp, r7
 8009978:	bc80      	pop	{r7}
 800997a:	4770      	bx	lr

0800997c <Rte_Task_100ms>:

void Rte_Task_100ms(void)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	af00      	add	r7, sp, #0
	Blinker_MainFunction();
 8009980:	f7f7 f930 	bl	8000be4 <Blinker_MainFunction>
	FrontLights_MainFunction();
 8009984:	f7f7 f940 	bl	8000c08 <FrontLights_MainFunction>
	InteriorLights_MainFunction();
 8009988:	f7f7 f950 	bl	8000c2c <InteriorLights_MainFunction>
	RearLights_MainFunction();
 800998c:	f7f7 f960 	bl	8000c50 <RearLights_MainFunction>
}
 8009990:	bf00      	nop
 8009992:	bd80      	pop	{r7, pc}

08009994 <Rte_Task_500ms>:

void Rte_Task_500ms(void)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	af00      	add	r7, sp, #0
	/* UART test section. TODO: remove */
	sprintf(databuf, "%4d X", count);
 8009998:	4b13      	ldr	r3, [pc, #76]	; (80099e8 <Rte_Task_500ms+0x54>)
 800999a:	881b      	ldrh	r3, [r3, #0]
 800999c:	461a      	mov	r2, r3
 800999e:	4913      	ldr	r1, [pc, #76]	; (80099ec <Rte_Task_500ms+0x58>)
 80099a0:	4813      	ldr	r0, [pc, #76]	; (80099f0 <Rte_Task_500ms+0x5c>)
 80099a2:	f000 f8bb 	bl	8009b1c <siprintf>
	databuf[strlen(databuf)] = 0;
 80099a6:	4812      	ldr	r0, [pc, #72]	; (80099f0 <Rte_Task_500ms+0x5c>)
 80099a8:	f7f6 fc1a 	bl	80001e0 <strlen>
 80099ac:	4603      	mov	r3, r0
 80099ae:	4a10      	ldr	r2, [pc, #64]	; (80099f0 <Rte_Task_500ms+0x5c>)
 80099b0:	2100      	movs	r1, #0
 80099b2:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(&huart2, (uint8 *)databuf, strlen(databuf), 1000);
 80099b4:	480e      	ldr	r0, [pc, #56]	; (80099f0 <Rte_Task_500ms+0x5c>)
 80099b6:	f7f6 fc13 	bl	80001e0 <strlen>
 80099ba:	4603      	mov	r3, r0
 80099bc:	b29a      	uxth	r2, r3
 80099be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80099c2:	490b      	ldr	r1, [pc, #44]	; (80099f0 <Rte_Task_500ms+0x5c>)
 80099c4:	480b      	ldr	r0, [pc, #44]	; (80099f4 <Rte_Task_500ms+0x60>)
 80099c6:	f7fe fa27 	bl	8007e18 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, crlf, 1, 1000);
 80099ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80099ce:	2201      	movs	r2, #1
 80099d0:	4909      	ldr	r1, [pc, #36]	; (80099f8 <Rte_Task_500ms+0x64>)
 80099d2:	4808      	ldr	r0, [pc, #32]	; (80099f4 <Rte_Task_500ms+0x60>)
 80099d4:	f7fe fa20 	bl	8007e18 <HAL_UART_Transmit>

	count++;
 80099d8:	4b03      	ldr	r3, [pc, #12]	; (80099e8 <Rte_Task_500ms+0x54>)
 80099da:	881b      	ldrh	r3, [r3, #0]
 80099dc:	3301      	adds	r3, #1
 80099de:	b29a      	uxth	r2, r3
 80099e0:	4b01      	ldr	r3, [pc, #4]	; (80099e8 <Rte_Task_500ms+0x54>)
 80099e2:	801a      	strh	r2, [r3, #0]
}
 80099e4:	bf00      	nop
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	20001480 	.word	0x20001480
 80099ec:	0800a40c 	.word	0x0800a40c
 80099f0:	20001470 	.word	0x20001470
 80099f4:	200003d0 	.word	0x200003d0
 80099f8:	20000010 	.word	0x20000010

080099fc <Rte_Read_PC13_Pin_State>:
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

/* Read PC13 pin state - button state */
void Rte_Read_PC13_Pin_State(uint8 *state)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
	*state = Int_ButtonState;
 8009a04:	4b04      	ldr	r3, [pc, #16]	; (8009a18 <Rte_Read_PC13_Pin_State+0x1c>)
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	701a      	strb	r2, [r3, #0]
}
 8009a0e:	bf00      	nop
 8009a10:	370c      	adds	r7, #12
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bc80      	pop	{r7}
 8009a16:	4770      	bx	lr
 8009a18:	2000146d 	.word	0x2000146d

08009a1c <Rte_Write_PC13_Pin_State>:

/* Save PC13 Pin state (called from IRQ) - TODO: change this */
void Rte_Write_PC13_Pin_State(uint8 state)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	4603      	mov	r3, r0
 8009a24:	71fb      	strb	r3, [r7, #7]
	Int_ButtonState = state;
 8009a26:	4a04      	ldr	r2, [pc, #16]	; (8009a38 <Rte_Write_PC13_Pin_State+0x1c>)
 8009a28:	79fb      	ldrb	r3, [r7, #7]
 8009a2a:	7013      	strb	r3, [r2, #0]
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bc80      	pop	{r7}
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	2000146d 	.word	0x2000146d

08009a3c <Rte_Cdd_Servo_RawMove>:

void Rte_Cdd_Servo_RawMove(uint16 pulse)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	4603      	mov	r3, r0
 8009a44:	80fb      	strh	r3, [r7, #6]
	Cdd_Servo_RawMove(pulse);
 8009a46:	88fb      	ldrh	r3, [r7, #6]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7f7 fae7 	bl	800101c <Cdd_Servo_RawMove>
}
 8009a4e:	bf00      	nop
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <Rte_Read_NvM_Block_0>:

void Rte_Read_NvM_Block_0(uint8 *data)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
	NvM_ReadBlock(0, data);
 8009a5e:	6879      	ldr	r1, [r7, #4]
 8009a60:	2000      	movs	r0, #0
 8009a62:	f7ff f9d3 	bl	8008e0c <NvM_ReadBlock>
}
 8009a66:	bf00      	nop
 8009a68:	3708      	adds	r7, #8
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <Rte_Write_AN0_Voltage_u16>:

void Rte_Write_AN0_Voltage_u16(uint16 voltage)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	4603      	mov	r3, r0
 8009a78:	80fb      	strh	r3, [r7, #6]
	Rte_ADC_AN0_Voltage = voltage;
 8009a7a:	4a04      	ldr	r2, [pc, #16]	; (8009a8c <Rte_Write_AN0_Voltage_u16+0x1c>)
 8009a7c:	88fb      	ldrh	r3, [r7, #6]
 8009a7e:	8013      	strh	r3, [r2, #0]
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bc80      	pop	{r7}
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	2000146e 	.word	0x2000146e

08009a90 <Rte_Read_AN0_Voltage_u16>:

void Rte_Read_AN0_Voltage_u16(uint16 *voltage)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
	/* Disable interrupts */
	Rte_Call_EnterProtectedSection();
 8009a98:	f7ff ff13 	bl	80098c2 <Rte_Call_EnterProtectedSection>
	/* Read ADC value */
	*voltage = Rte_ADC_AN0_Voltage;
 8009a9c:	4b05      	ldr	r3, [pc, #20]	; (8009ab4 <Rte_Read_AN0_Voltage_u16+0x24>)
 8009a9e:	881b      	ldrh	r3, [r3, #0]
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	801a      	strh	r2, [r3, #0]
	/* Enable interrupts */
	Rte_Call_LeaveProtectedSection();
 8009aa6:	f7ff ff14 	bl	80098d2 <Rte_Call_LeaveProtectedSection>
}
 8009aaa:	bf00      	nop
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	2000146e 	.word	0x2000146e

08009ab8 <__errno>:
 8009ab8:	4b01      	ldr	r3, [pc, #4]	; (8009ac0 <__errno+0x8>)
 8009aba:	6818      	ldr	r0, [r3, #0]
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	20000014 	.word	0x20000014

08009ac4 <__libc_init_array>:
 8009ac4:	b570      	push	{r4, r5, r6, lr}
 8009ac6:	4d0d      	ldr	r5, [pc, #52]	; (8009afc <__libc_init_array+0x38>)
 8009ac8:	4c0d      	ldr	r4, [pc, #52]	; (8009b00 <__libc_init_array+0x3c>)
 8009aca:	1b64      	subs	r4, r4, r5
 8009acc:	10a4      	asrs	r4, r4, #2
 8009ace:	2600      	movs	r6, #0
 8009ad0:	42a6      	cmp	r6, r4
 8009ad2:	d109      	bne.n	8009ae8 <__libc_init_array+0x24>
 8009ad4:	4d0b      	ldr	r5, [pc, #44]	; (8009b04 <__libc_init_array+0x40>)
 8009ad6:	4c0c      	ldr	r4, [pc, #48]	; (8009b08 <__libc_init_array+0x44>)
 8009ad8:	f000 fc8c 	bl	800a3f4 <_init>
 8009adc:	1b64      	subs	r4, r4, r5
 8009ade:	10a4      	asrs	r4, r4, #2
 8009ae0:	2600      	movs	r6, #0
 8009ae2:	42a6      	cmp	r6, r4
 8009ae4:	d105      	bne.n	8009af2 <__libc_init_array+0x2e>
 8009ae6:	bd70      	pop	{r4, r5, r6, pc}
 8009ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aec:	4798      	blx	r3
 8009aee:	3601      	adds	r6, #1
 8009af0:	e7ee      	b.n	8009ad0 <__libc_init_array+0xc>
 8009af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009af6:	4798      	blx	r3
 8009af8:	3601      	adds	r6, #1
 8009afa:	e7f2      	b.n	8009ae2 <__libc_init_array+0x1e>
 8009afc:	0800a480 	.word	0x0800a480
 8009b00:	0800a480 	.word	0x0800a480
 8009b04:	0800a480 	.word	0x0800a480
 8009b08:	0800a484 	.word	0x0800a484

08009b0c <memset>:
 8009b0c:	4402      	add	r2, r0
 8009b0e:	4603      	mov	r3, r0
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d100      	bne.n	8009b16 <memset+0xa>
 8009b14:	4770      	bx	lr
 8009b16:	f803 1b01 	strb.w	r1, [r3], #1
 8009b1a:	e7f9      	b.n	8009b10 <memset+0x4>

08009b1c <siprintf>:
 8009b1c:	b40e      	push	{r1, r2, r3}
 8009b1e:	b500      	push	{lr}
 8009b20:	b09c      	sub	sp, #112	; 0x70
 8009b22:	ab1d      	add	r3, sp, #116	; 0x74
 8009b24:	9002      	str	r0, [sp, #8]
 8009b26:	9006      	str	r0, [sp, #24]
 8009b28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b2c:	4809      	ldr	r0, [pc, #36]	; (8009b54 <siprintf+0x38>)
 8009b2e:	9107      	str	r1, [sp, #28]
 8009b30:	9104      	str	r1, [sp, #16]
 8009b32:	4909      	ldr	r1, [pc, #36]	; (8009b58 <siprintf+0x3c>)
 8009b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b38:	9105      	str	r1, [sp, #20]
 8009b3a:	6800      	ldr	r0, [r0, #0]
 8009b3c:	9301      	str	r3, [sp, #4]
 8009b3e:	a902      	add	r1, sp, #8
 8009b40:	f000 f868 	bl	8009c14 <_svfiprintf_r>
 8009b44:	9b02      	ldr	r3, [sp, #8]
 8009b46:	2200      	movs	r2, #0
 8009b48:	701a      	strb	r2, [r3, #0]
 8009b4a:	b01c      	add	sp, #112	; 0x70
 8009b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b50:	b003      	add	sp, #12
 8009b52:	4770      	bx	lr
 8009b54:	20000014 	.word	0x20000014
 8009b58:	ffff0208 	.word	0xffff0208

08009b5c <__ssputs_r>:
 8009b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b60:	688e      	ldr	r6, [r1, #8]
 8009b62:	429e      	cmp	r6, r3
 8009b64:	4682      	mov	sl, r0
 8009b66:	460c      	mov	r4, r1
 8009b68:	4690      	mov	r8, r2
 8009b6a:	461f      	mov	r7, r3
 8009b6c:	d838      	bhi.n	8009be0 <__ssputs_r+0x84>
 8009b6e:	898a      	ldrh	r2, [r1, #12]
 8009b70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b74:	d032      	beq.n	8009bdc <__ssputs_r+0x80>
 8009b76:	6825      	ldr	r5, [r4, #0]
 8009b78:	6909      	ldr	r1, [r1, #16]
 8009b7a:	eba5 0901 	sub.w	r9, r5, r1
 8009b7e:	6965      	ldr	r5, [r4, #20]
 8009b80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b88:	3301      	adds	r3, #1
 8009b8a:	444b      	add	r3, r9
 8009b8c:	106d      	asrs	r5, r5, #1
 8009b8e:	429d      	cmp	r5, r3
 8009b90:	bf38      	it	cc
 8009b92:	461d      	movcc	r5, r3
 8009b94:	0553      	lsls	r3, r2, #21
 8009b96:	d531      	bpl.n	8009bfc <__ssputs_r+0xa0>
 8009b98:	4629      	mov	r1, r5
 8009b9a:	f000 fb61 	bl	800a260 <_malloc_r>
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	b950      	cbnz	r0, 8009bb8 <__ssputs_r+0x5c>
 8009ba2:	230c      	movs	r3, #12
 8009ba4:	f8ca 3000 	str.w	r3, [sl]
 8009ba8:	89a3      	ldrh	r3, [r4, #12]
 8009baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bae:	81a3      	strh	r3, [r4, #12]
 8009bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb8:	6921      	ldr	r1, [r4, #16]
 8009bba:	464a      	mov	r2, r9
 8009bbc:	f000 fabe 	bl	800a13c <memcpy>
 8009bc0:	89a3      	ldrh	r3, [r4, #12]
 8009bc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bca:	81a3      	strh	r3, [r4, #12]
 8009bcc:	6126      	str	r6, [r4, #16]
 8009bce:	6165      	str	r5, [r4, #20]
 8009bd0:	444e      	add	r6, r9
 8009bd2:	eba5 0509 	sub.w	r5, r5, r9
 8009bd6:	6026      	str	r6, [r4, #0]
 8009bd8:	60a5      	str	r5, [r4, #8]
 8009bda:	463e      	mov	r6, r7
 8009bdc:	42be      	cmp	r6, r7
 8009bde:	d900      	bls.n	8009be2 <__ssputs_r+0x86>
 8009be0:	463e      	mov	r6, r7
 8009be2:	6820      	ldr	r0, [r4, #0]
 8009be4:	4632      	mov	r2, r6
 8009be6:	4641      	mov	r1, r8
 8009be8:	f000 fab6 	bl	800a158 <memmove>
 8009bec:	68a3      	ldr	r3, [r4, #8]
 8009bee:	1b9b      	subs	r3, r3, r6
 8009bf0:	60a3      	str	r3, [r4, #8]
 8009bf2:	6823      	ldr	r3, [r4, #0]
 8009bf4:	4433      	add	r3, r6
 8009bf6:	6023      	str	r3, [r4, #0]
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	e7db      	b.n	8009bb4 <__ssputs_r+0x58>
 8009bfc:	462a      	mov	r2, r5
 8009bfe:	f000 fba3 	bl	800a348 <_realloc_r>
 8009c02:	4606      	mov	r6, r0
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d1e1      	bne.n	8009bcc <__ssputs_r+0x70>
 8009c08:	6921      	ldr	r1, [r4, #16]
 8009c0a:	4650      	mov	r0, sl
 8009c0c:	f000 fabe 	bl	800a18c <_free_r>
 8009c10:	e7c7      	b.n	8009ba2 <__ssputs_r+0x46>
	...

08009c14 <_svfiprintf_r>:
 8009c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c18:	4698      	mov	r8, r3
 8009c1a:	898b      	ldrh	r3, [r1, #12]
 8009c1c:	061b      	lsls	r3, r3, #24
 8009c1e:	b09d      	sub	sp, #116	; 0x74
 8009c20:	4607      	mov	r7, r0
 8009c22:	460d      	mov	r5, r1
 8009c24:	4614      	mov	r4, r2
 8009c26:	d50e      	bpl.n	8009c46 <_svfiprintf_r+0x32>
 8009c28:	690b      	ldr	r3, [r1, #16]
 8009c2a:	b963      	cbnz	r3, 8009c46 <_svfiprintf_r+0x32>
 8009c2c:	2140      	movs	r1, #64	; 0x40
 8009c2e:	f000 fb17 	bl	800a260 <_malloc_r>
 8009c32:	6028      	str	r0, [r5, #0]
 8009c34:	6128      	str	r0, [r5, #16]
 8009c36:	b920      	cbnz	r0, 8009c42 <_svfiprintf_r+0x2e>
 8009c38:	230c      	movs	r3, #12
 8009c3a:	603b      	str	r3, [r7, #0]
 8009c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c40:	e0d1      	b.n	8009de6 <_svfiprintf_r+0x1d2>
 8009c42:	2340      	movs	r3, #64	; 0x40
 8009c44:	616b      	str	r3, [r5, #20]
 8009c46:	2300      	movs	r3, #0
 8009c48:	9309      	str	r3, [sp, #36]	; 0x24
 8009c4a:	2320      	movs	r3, #32
 8009c4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c50:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c54:	2330      	movs	r3, #48	; 0x30
 8009c56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e00 <_svfiprintf_r+0x1ec>
 8009c5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c5e:	f04f 0901 	mov.w	r9, #1
 8009c62:	4623      	mov	r3, r4
 8009c64:	469a      	mov	sl, r3
 8009c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c6a:	b10a      	cbz	r2, 8009c70 <_svfiprintf_r+0x5c>
 8009c6c:	2a25      	cmp	r2, #37	; 0x25
 8009c6e:	d1f9      	bne.n	8009c64 <_svfiprintf_r+0x50>
 8009c70:	ebba 0b04 	subs.w	fp, sl, r4
 8009c74:	d00b      	beq.n	8009c8e <_svfiprintf_r+0x7a>
 8009c76:	465b      	mov	r3, fp
 8009c78:	4622      	mov	r2, r4
 8009c7a:	4629      	mov	r1, r5
 8009c7c:	4638      	mov	r0, r7
 8009c7e:	f7ff ff6d 	bl	8009b5c <__ssputs_r>
 8009c82:	3001      	adds	r0, #1
 8009c84:	f000 80aa 	beq.w	8009ddc <_svfiprintf_r+0x1c8>
 8009c88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c8a:	445a      	add	r2, fp
 8009c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f000 80a2 	beq.w	8009ddc <_svfiprintf_r+0x1c8>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ca2:	f10a 0a01 	add.w	sl, sl, #1
 8009ca6:	9304      	str	r3, [sp, #16]
 8009ca8:	9307      	str	r3, [sp, #28]
 8009caa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cae:	931a      	str	r3, [sp, #104]	; 0x68
 8009cb0:	4654      	mov	r4, sl
 8009cb2:	2205      	movs	r2, #5
 8009cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb8:	4851      	ldr	r0, [pc, #324]	; (8009e00 <_svfiprintf_r+0x1ec>)
 8009cba:	f7f6 fa99 	bl	80001f0 <memchr>
 8009cbe:	9a04      	ldr	r2, [sp, #16]
 8009cc0:	b9d8      	cbnz	r0, 8009cfa <_svfiprintf_r+0xe6>
 8009cc2:	06d0      	lsls	r0, r2, #27
 8009cc4:	bf44      	itt	mi
 8009cc6:	2320      	movmi	r3, #32
 8009cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ccc:	0711      	lsls	r1, r2, #28
 8009cce:	bf44      	itt	mi
 8009cd0:	232b      	movmi	r3, #43	; 0x2b
 8009cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8009cda:	2b2a      	cmp	r3, #42	; 0x2a
 8009cdc:	d015      	beq.n	8009d0a <_svfiprintf_r+0xf6>
 8009cde:	9a07      	ldr	r2, [sp, #28]
 8009ce0:	4654      	mov	r4, sl
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	f04f 0c0a 	mov.w	ip, #10
 8009ce8:	4621      	mov	r1, r4
 8009cea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cee:	3b30      	subs	r3, #48	; 0x30
 8009cf0:	2b09      	cmp	r3, #9
 8009cf2:	d94e      	bls.n	8009d92 <_svfiprintf_r+0x17e>
 8009cf4:	b1b0      	cbz	r0, 8009d24 <_svfiprintf_r+0x110>
 8009cf6:	9207      	str	r2, [sp, #28]
 8009cf8:	e014      	b.n	8009d24 <_svfiprintf_r+0x110>
 8009cfa:	eba0 0308 	sub.w	r3, r0, r8
 8009cfe:	fa09 f303 	lsl.w	r3, r9, r3
 8009d02:	4313      	orrs	r3, r2
 8009d04:	9304      	str	r3, [sp, #16]
 8009d06:	46a2      	mov	sl, r4
 8009d08:	e7d2      	b.n	8009cb0 <_svfiprintf_r+0x9c>
 8009d0a:	9b03      	ldr	r3, [sp, #12]
 8009d0c:	1d19      	adds	r1, r3, #4
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	9103      	str	r1, [sp, #12]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	bfbb      	ittet	lt
 8009d16:	425b      	neglt	r3, r3
 8009d18:	f042 0202 	orrlt.w	r2, r2, #2
 8009d1c:	9307      	strge	r3, [sp, #28]
 8009d1e:	9307      	strlt	r3, [sp, #28]
 8009d20:	bfb8      	it	lt
 8009d22:	9204      	strlt	r2, [sp, #16]
 8009d24:	7823      	ldrb	r3, [r4, #0]
 8009d26:	2b2e      	cmp	r3, #46	; 0x2e
 8009d28:	d10c      	bne.n	8009d44 <_svfiprintf_r+0x130>
 8009d2a:	7863      	ldrb	r3, [r4, #1]
 8009d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8009d2e:	d135      	bne.n	8009d9c <_svfiprintf_r+0x188>
 8009d30:	9b03      	ldr	r3, [sp, #12]
 8009d32:	1d1a      	adds	r2, r3, #4
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	9203      	str	r2, [sp, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	bfb8      	it	lt
 8009d3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d40:	3402      	adds	r4, #2
 8009d42:	9305      	str	r3, [sp, #20]
 8009d44:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009e04 <_svfiprintf_r+0x1f0>
 8009d48:	7821      	ldrb	r1, [r4, #0]
 8009d4a:	2203      	movs	r2, #3
 8009d4c:	4650      	mov	r0, sl
 8009d4e:	f7f6 fa4f 	bl	80001f0 <memchr>
 8009d52:	b140      	cbz	r0, 8009d66 <_svfiprintf_r+0x152>
 8009d54:	2340      	movs	r3, #64	; 0x40
 8009d56:	eba0 000a 	sub.w	r0, r0, sl
 8009d5a:	fa03 f000 	lsl.w	r0, r3, r0
 8009d5e:	9b04      	ldr	r3, [sp, #16]
 8009d60:	4303      	orrs	r3, r0
 8009d62:	3401      	adds	r4, #1
 8009d64:	9304      	str	r3, [sp, #16]
 8009d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d6a:	4827      	ldr	r0, [pc, #156]	; (8009e08 <_svfiprintf_r+0x1f4>)
 8009d6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d70:	2206      	movs	r2, #6
 8009d72:	f7f6 fa3d 	bl	80001f0 <memchr>
 8009d76:	2800      	cmp	r0, #0
 8009d78:	d038      	beq.n	8009dec <_svfiprintf_r+0x1d8>
 8009d7a:	4b24      	ldr	r3, [pc, #144]	; (8009e0c <_svfiprintf_r+0x1f8>)
 8009d7c:	bb1b      	cbnz	r3, 8009dc6 <_svfiprintf_r+0x1b2>
 8009d7e:	9b03      	ldr	r3, [sp, #12]
 8009d80:	3307      	adds	r3, #7
 8009d82:	f023 0307 	bic.w	r3, r3, #7
 8009d86:	3308      	adds	r3, #8
 8009d88:	9303      	str	r3, [sp, #12]
 8009d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d8c:	4433      	add	r3, r6
 8009d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d90:	e767      	b.n	8009c62 <_svfiprintf_r+0x4e>
 8009d92:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d96:	460c      	mov	r4, r1
 8009d98:	2001      	movs	r0, #1
 8009d9a:	e7a5      	b.n	8009ce8 <_svfiprintf_r+0xd4>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	3401      	adds	r4, #1
 8009da0:	9305      	str	r3, [sp, #20]
 8009da2:	4619      	mov	r1, r3
 8009da4:	f04f 0c0a 	mov.w	ip, #10
 8009da8:	4620      	mov	r0, r4
 8009daa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dae:	3a30      	subs	r2, #48	; 0x30
 8009db0:	2a09      	cmp	r2, #9
 8009db2:	d903      	bls.n	8009dbc <_svfiprintf_r+0x1a8>
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d0c5      	beq.n	8009d44 <_svfiprintf_r+0x130>
 8009db8:	9105      	str	r1, [sp, #20]
 8009dba:	e7c3      	b.n	8009d44 <_svfiprintf_r+0x130>
 8009dbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dc0:	4604      	mov	r4, r0
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e7f0      	b.n	8009da8 <_svfiprintf_r+0x194>
 8009dc6:	ab03      	add	r3, sp, #12
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	462a      	mov	r2, r5
 8009dcc:	4b10      	ldr	r3, [pc, #64]	; (8009e10 <_svfiprintf_r+0x1fc>)
 8009dce:	a904      	add	r1, sp, #16
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	f3af 8000 	nop.w
 8009dd6:	1c42      	adds	r2, r0, #1
 8009dd8:	4606      	mov	r6, r0
 8009dda:	d1d6      	bne.n	8009d8a <_svfiprintf_r+0x176>
 8009ddc:	89ab      	ldrh	r3, [r5, #12]
 8009dde:	065b      	lsls	r3, r3, #25
 8009de0:	f53f af2c 	bmi.w	8009c3c <_svfiprintf_r+0x28>
 8009de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009de6:	b01d      	add	sp, #116	; 0x74
 8009de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dec:	ab03      	add	r3, sp, #12
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	462a      	mov	r2, r5
 8009df2:	4b07      	ldr	r3, [pc, #28]	; (8009e10 <_svfiprintf_r+0x1fc>)
 8009df4:	a904      	add	r1, sp, #16
 8009df6:	4638      	mov	r0, r7
 8009df8:	f000 f87a 	bl	8009ef0 <_printf_i>
 8009dfc:	e7eb      	b.n	8009dd6 <_svfiprintf_r+0x1c2>
 8009dfe:	bf00      	nop
 8009e00:	0800a44c 	.word	0x0800a44c
 8009e04:	0800a452 	.word	0x0800a452
 8009e08:	0800a456 	.word	0x0800a456
 8009e0c:	00000000 	.word	0x00000000
 8009e10:	08009b5d 	.word	0x08009b5d

08009e14 <_printf_common>:
 8009e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e18:	4616      	mov	r6, r2
 8009e1a:	4699      	mov	r9, r3
 8009e1c:	688a      	ldr	r2, [r1, #8]
 8009e1e:	690b      	ldr	r3, [r1, #16]
 8009e20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e24:	4293      	cmp	r3, r2
 8009e26:	bfb8      	it	lt
 8009e28:	4613      	movlt	r3, r2
 8009e2a:	6033      	str	r3, [r6, #0]
 8009e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e30:	4607      	mov	r7, r0
 8009e32:	460c      	mov	r4, r1
 8009e34:	b10a      	cbz	r2, 8009e3a <_printf_common+0x26>
 8009e36:	3301      	adds	r3, #1
 8009e38:	6033      	str	r3, [r6, #0]
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	0699      	lsls	r1, r3, #26
 8009e3e:	bf42      	ittt	mi
 8009e40:	6833      	ldrmi	r3, [r6, #0]
 8009e42:	3302      	addmi	r3, #2
 8009e44:	6033      	strmi	r3, [r6, #0]
 8009e46:	6825      	ldr	r5, [r4, #0]
 8009e48:	f015 0506 	ands.w	r5, r5, #6
 8009e4c:	d106      	bne.n	8009e5c <_printf_common+0x48>
 8009e4e:	f104 0a19 	add.w	sl, r4, #25
 8009e52:	68e3      	ldr	r3, [r4, #12]
 8009e54:	6832      	ldr	r2, [r6, #0]
 8009e56:	1a9b      	subs	r3, r3, r2
 8009e58:	42ab      	cmp	r3, r5
 8009e5a:	dc26      	bgt.n	8009eaa <_printf_common+0x96>
 8009e5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e60:	1e13      	subs	r3, r2, #0
 8009e62:	6822      	ldr	r2, [r4, #0]
 8009e64:	bf18      	it	ne
 8009e66:	2301      	movne	r3, #1
 8009e68:	0692      	lsls	r2, r2, #26
 8009e6a:	d42b      	bmi.n	8009ec4 <_printf_common+0xb0>
 8009e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e70:	4649      	mov	r1, r9
 8009e72:	4638      	mov	r0, r7
 8009e74:	47c0      	blx	r8
 8009e76:	3001      	adds	r0, #1
 8009e78:	d01e      	beq.n	8009eb8 <_printf_common+0xa4>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	68e5      	ldr	r5, [r4, #12]
 8009e7e:	6832      	ldr	r2, [r6, #0]
 8009e80:	f003 0306 	and.w	r3, r3, #6
 8009e84:	2b04      	cmp	r3, #4
 8009e86:	bf08      	it	eq
 8009e88:	1aad      	subeq	r5, r5, r2
 8009e8a:	68a3      	ldr	r3, [r4, #8]
 8009e8c:	6922      	ldr	r2, [r4, #16]
 8009e8e:	bf0c      	ite	eq
 8009e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e94:	2500      	movne	r5, #0
 8009e96:	4293      	cmp	r3, r2
 8009e98:	bfc4      	itt	gt
 8009e9a:	1a9b      	subgt	r3, r3, r2
 8009e9c:	18ed      	addgt	r5, r5, r3
 8009e9e:	2600      	movs	r6, #0
 8009ea0:	341a      	adds	r4, #26
 8009ea2:	42b5      	cmp	r5, r6
 8009ea4:	d11a      	bne.n	8009edc <_printf_common+0xc8>
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	e008      	b.n	8009ebc <_printf_common+0xa8>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	4652      	mov	r2, sl
 8009eae:	4649      	mov	r1, r9
 8009eb0:	4638      	mov	r0, r7
 8009eb2:	47c0      	blx	r8
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	d103      	bne.n	8009ec0 <_printf_common+0xac>
 8009eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec0:	3501      	adds	r5, #1
 8009ec2:	e7c6      	b.n	8009e52 <_printf_common+0x3e>
 8009ec4:	18e1      	adds	r1, r4, r3
 8009ec6:	1c5a      	adds	r2, r3, #1
 8009ec8:	2030      	movs	r0, #48	; 0x30
 8009eca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ece:	4422      	add	r2, r4
 8009ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ed4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ed8:	3302      	adds	r3, #2
 8009eda:	e7c7      	b.n	8009e6c <_printf_common+0x58>
 8009edc:	2301      	movs	r3, #1
 8009ede:	4622      	mov	r2, r4
 8009ee0:	4649      	mov	r1, r9
 8009ee2:	4638      	mov	r0, r7
 8009ee4:	47c0      	blx	r8
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	d0e6      	beq.n	8009eb8 <_printf_common+0xa4>
 8009eea:	3601      	adds	r6, #1
 8009eec:	e7d9      	b.n	8009ea2 <_printf_common+0x8e>
	...

08009ef0 <_printf_i>:
 8009ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef4:	7e0f      	ldrb	r7, [r1, #24]
 8009ef6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ef8:	2f78      	cmp	r7, #120	; 0x78
 8009efa:	4691      	mov	r9, r2
 8009efc:	4680      	mov	r8, r0
 8009efe:	460c      	mov	r4, r1
 8009f00:	469a      	mov	sl, r3
 8009f02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f06:	d807      	bhi.n	8009f18 <_printf_i+0x28>
 8009f08:	2f62      	cmp	r7, #98	; 0x62
 8009f0a:	d80a      	bhi.n	8009f22 <_printf_i+0x32>
 8009f0c:	2f00      	cmp	r7, #0
 8009f0e:	f000 80d8 	beq.w	800a0c2 <_printf_i+0x1d2>
 8009f12:	2f58      	cmp	r7, #88	; 0x58
 8009f14:	f000 80a3 	beq.w	800a05e <_printf_i+0x16e>
 8009f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f20:	e03a      	b.n	8009f98 <_printf_i+0xa8>
 8009f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f26:	2b15      	cmp	r3, #21
 8009f28:	d8f6      	bhi.n	8009f18 <_printf_i+0x28>
 8009f2a:	a101      	add	r1, pc, #4	; (adr r1, 8009f30 <_printf_i+0x40>)
 8009f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f30:	08009f89 	.word	0x08009f89
 8009f34:	08009f9d 	.word	0x08009f9d
 8009f38:	08009f19 	.word	0x08009f19
 8009f3c:	08009f19 	.word	0x08009f19
 8009f40:	08009f19 	.word	0x08009f19
 8009f44:	08009f19 	.word	0x08009f19
 8009f48:	08009f9d 	.word	0x08009f9d
 8009f4c:	08009f19 	.word	0x08009f19
 8009f50:	08009f19 	.word	0x08009f19
 8009f54:	08009f19 	.word	0x08009f19
 8009f58:	08009f19 	.word	0x08009f19
 8009f5c:	0800a0a9 	.word	0x0800a0a9
 8009f60:	08009fcd 	.word	0x08009fcd
 8009f64:	0800a08b 	.word	0x0800a08b
 8009f68:	08009f19 	.word	0x08009f19
 8009f6c:	08009f19 	.word	0x08009f19
 8009f70:	0800a0cb 	.word	0x0800a0cb
 8009f74:	08009f19 	.word	0x08009f19
 8009f78:	08009fcd 	.word	0x08009fcd
 8009f7c:	08009f19 	.word	0x08009f19
 8009f80:	08009f19 	.word	0x08009f19
 8009f84:	0800a093 	.word	0x0800a093
 8009f88:	682b      	ldr	r3, [r5, #0]
 8009f8a:	1d1a      	adds	r2, r3, #4
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	602a      	str	r2, [r5, #0]
 8009f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e0a3      	b.n	800a0e4 <_printf_i+0x1f4>
 8009f9c:	6820      	ldr	r0, [r4, #0]
 8009f9e:	6829      	ldr	r1, [r5, #0]
 8009fa0:	0606      	lsls	r6, r0, #24
 8009fa2:	f101 0304 	add.w	r3, r1, #4
 8009fa6:	d50a      	bpl.n	8009fbe <_printf_i+0xce>
 8009fa8:	680e      	ldr	r6, [r1, #0]
 8009faa:	602b      	str	r3, [r5, #0]
 8009fac:	2e00      	cmp	r6, #0
 8009fae:	da03      	bge.n	8009fb8 <_printf_i+0xc8>
 8009fb0:	232d      	movs	r3, #45	; 0x2d
 8009fb2:	4276      	negs	r6, r6
 8009fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fb8:	485e      	ldr	r0, [pc, #376]	; (800a134 <_printf_i+0x244>)
 8009fba:	230a      	movs	r3, #10
 8009fbc:	e019      	b.n	8009ff2 <_printf_i+0x102>
 8009fbe:	680e      	ldr	r6, [r1, #0]
 8009fc0:	602b      	str	r3, [r5, #0]
 8009fc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009fc6:	bf18      	it	ne
 8009fc8:	b236      	sxthne	r6, r6
 8009fca:	e7ef      	b.n	8009fac <_printf_i+0xbc>
 8009fcc:	682b      	ldr	r3, [r5, #0]
 8009fce:	6820      	ldr	r0, [r4, #0]
 8009fd0:	1d19      	adds	r1, r3, #4
 8009fd2:	6029      	str	r1, [r5, #0]
 8009fd4:	0601      	lsls	r1, r0, #24
 8009fd6:	d501      	bpl.n	8009fdc <_printf_i+0xec>
 8009fd8:	681e      	ldr	r6, [r3, #0]
 8009fda:	e002      	b.n	8009fe2 <_printf_i+0xf2>
 8009fdc:	0646      	lsls	r6, r0, #25
 8009fde:	d5fb      	bpl.n	8009fd8 <_printf_i+0xe8>
 8009fe0:	881e      	ldrh	r6, [r3, #0]
 8009fe2:	4854      	ldr	r0, [pc, #336]	; (800a134 <_printf_i+0x244>)
 8009fe4:	2f6f      	cmp	r7, #111	; 0x6f
 8009fe6:	bf0c      	ite	eq
 8009fe8:	2308      	moveq	r3, #8
 8009fea:	230a      	movne	r3, #10
 8009fec:	2100      	movs	r1, #0
 8009fee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ff2:	6865      	ldr	r5, [r4, #4]
 8009ff4:	60a5      	str	r5, [r4, #8]
 8009ff6:	2d00      	cmp	r5, #0
 8009ff8:	bfa2      	ittt	ge
 8009ffa:	6821      	ldrge	r1, [r4, #0]
 8009ffc:	f021 0104 	bicge.w	r1, r1, #4
 800a000:	6021      	strge	r1, [r4, #0]
 800a002:	b90e      	cbnz	r6, 800a008 <_printf_i+0x118>
 800a004:	2d00      	cmp	r5, #0
 800a006:	d04d      	beq.n	800a0a4 <_printf_i+0x1b4>
 800a008:	4615      	mov	r5, r2
 800a00a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a00e:	fb03 6711 	mls	r7, r3, r1, r6
 800a012:	5dc7      	ldrb	r7, [r0, r7]
 800a014:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a018:	4637      	mov	r7, r6
 800a01a:	42bb      	cmp	r3, r7
 800a01c:	460e      	mov	r6, r1
 800a01e:	d9f4      	bls.n	800a00a <_printf_i+0x11a>
 800a020:	2b08      	cmp	r3, #8
 800a022:	d10b      	bne.n	800a03c <_printf_i+0x14c>
 800a024:	6823      	ldr	r3, [r4, #0]
 800a026:	07de      	lsls	r6, r3, #31
 800a028:	d508      	bpl.n	800a03c <_printf_i+0x14c>
 800a02a:	6923      	ldr	r3, [r4, #16]
 800a02c:	6861      	ldr	r1, [r4, #4]
 800a02e:	4299      	cmp	r1, r3
 800a030:	bfde      	ittt	le
 800a032:	2330      	movle	r3, #48	; 0x30
 800a034:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a038:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a03c:	1b52      	subs	r2, r2, r5
 800a03e:	6122      	str	r2, [r4, #16]
 800a040:	f8cd a000 	str.w	sl, [sp]
 800a044:	464b      	mov	r3, r9
 800a046:	aa03      	add	r2, sp, #12
 800a048:	4621      	mov	r1, r4
 800a04a:	4640      	mov	r0, r8
 800a04c:	f7ff fee2 	bl	8009e14 <_printf_common>
 800a050:	3001      	adds	r0, #1
 800a052:	d14c      	bne.n	800a0ee <_printf_i+0x1fe>
 800a054:	f04f 30ff 	mov.w	r0, #4294967295
 800a058:	b004      	add	sp, #16
 800a05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a05e:	4835      	ldr	r0, [pc, #212]	; (800a134 <_printf_i+0x244>)
 800a060:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a064:	6829      	ldr	r1, [r5, #0]
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	f851 6b04 	ldr.w	r6, [r1], #4
 800a06c:	6029      	str	r1, [r5, #0]
 800a06e:	061d      	lsls	r5, r3, #24
 800a070:	d514      	bpl.n	800a09c <_printf_i+0x1ac>
 800a072:	07df      	lsls	r7, r3, #31
 800a074:	bf44      	itt	mi
 800a076:	f043 0320 	orrmi.w	r3, r3, #32
 800a07a:	6023      	strmi	r3, [r4, #0]
 800a07c:	b91e      	cbnz	r6, 800a086 <_printf_i+0x196>
 800a07e:	6823      	ldr	r3, [r4, #0]
 800a080:	f023 0320 	bic.w	r3, r3, #32
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	2310      	movs	r3, #16
 800a088:	e7b0      	b.n	8009fec <_printf_i+0xfc>
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	f043 0320 	orr.w	r3, r3, #32
 800a090:	6023      	str	r3, [r4, #0]
 800a092:	2378      	movs	r3, #120	; 0x78
 800a094:	4828      	ldr	r0, [pc, #160]	; (800a138 <_printf_i+0x248>)
 800a096:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a09a:	e7e3      	b.n	800a064 <_printf_i+0x174>
 800a09c:	0659      	lsls	r1, r3, #25
 800a09e:	bf48      	it	mi
 800a0a0:	b2b6      	uxthmi	r6, r6
 800a0a2:	e7e6      	b.n	800a072 <_printf_i+0x182>
 800a0a4:	4615      	mov	r5, r2
 800a0a6:	e7bb      	b.n	800a020 <_printf_i+0x130>
 800a0a8:	682b      	ldr	r3, [r5, #0]
 800a0aa:	6826      	ldr	r6, [r4, #0]
 800a0ac:	6961      	ldr	r1, [r4, #20]
 800a0ae:	1d18      	adds	r0, r3, #4
 800a0b0:	6028      	str	r0, [r5, #0]
 800a0b2:	0635      	lsls	r5, r6, #24
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	d501      	bpl.n	800a0bc <_printf_i+0x1cc>
 800a0b8:	6019      	str	r1, [r3, #0]
 800a0ba:	e002      	b.n	800a0c2 <_printf_i+0x1d2>
 800a0bc:	0670      	lsls	r0, r6, #25
 800a0be:	d5fb      	bpl.n	800a0b8 <_printf_i+0x1c8>
 800a0c0:	8019      	strh	r1, [r3, #0]
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	6123      	str	r3, [r4, #16]
 800a0c6:	4615      	mov	r5, r2
 800a0c8:	e7ba      	b.n	800a040 <_printf_i+0x150>
 800a0ca:	682b      	ldr	r3, [r5, #0]
 800a0cc:	1d1a      	adds	r2, r3, #4
 800a0ce:	602a      	str	r2, [r5, #0]
 800a0d0:	681d      	ldr	r5, [r3, #0]
 800a0d2:	6862      	ldr	r2, [r4, #4]
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f7f6 f88a 	bl	80001f0 <memchr>
 800a0dc:	b108      	cbz	r0, 800a0e2 <_printf_i+0x1f2>
 800a0de:	1b40      	subs	r0, r0, r5
 800a0e0:	6060      	str	r0, [r4, #4]
 800a0e2:	6863      	ldr	r3, [r4, #4]
 800a0e4:	6123      	str	r3, [r4, #16]
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0ec:	e7a8      	b.n	800a040 <_printf_i+0x150>
 800a0ee:	6923      	ldr	r3, [r4, #16]
 800a0f0:	462a      	mov	r2, r5
 800a0f2:	4649      	mov	r1, r9
 800a0f4:	4640      	mov	r0, r8
 800a0f6:	47d0      	blx	sl
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	d0ab      	beq.n	800a054 <_printf_i+0x164>
 800a0fc:	6823      	ldr	r3, [r4, #0]
 800a0fe:	079b      	lsls	r3, r3, #30
 800a100:	d413      	bmi.n	800a12a <_printf_i+0x23a>
 800a102:	68e0      	ldr	r0, [r4, #12]
 800a104:	9b03      	ldr	r3, [sp, #12]
 800a106:	4298      	cmp	r0, r3
 800a108:	bfb8      	it	lt
 800a10a:	4618      	movlt	r0, r3
 800a10c:	e7a4      	b.n	800a058 <_printf_i+0x168>
 800a10e:	2301      	movs	r3, #1
 800a110:	4632      	mov	r2, r6
 800a112:	4649      	mov	r1, r9
 800a114:	4640      	mov	r0, r8
 800a116:	47d0      	blx	sl
 800a118:	3001      	adds	r0, #1
 800a11a:	d09b      	beq.n	800a054 <_printf_i+0x164>
 800a11c:	3501      	adds	r5, #1
 800a11e:	68e3      	ldr	r3, [r4, #12]
 800a120:	9903      	ldr	r1, [sp, #12]
 800a122:	1a5b      	subs	r3, r3, r1
 800a124:	42ab      	cmp	r3, r5
 800a126:	dcf2      	bgt.n	800a10e <_printf_i+0x21e>
 800a128:	e7eb      	b.n	800a102 <_printf_i+0x212>
 800a12a:	2500      	movs	r5, #0
 800a12c:	f104 0619 	add.w	r6, r4, #25
 800a130:	e7f5      	b.n	800a11e <_printf_i+0x22e>
 800a132:	bf00      	nop
 800a134:	0800a45d 	.word	0x0800a45d
 800a138:	0800a46e 	.word	0x0800a46e

0800a13c <memcpy>:
 800a13c:	440a      	add	r2, r1
 800a13e:	4291      	cmp	r1, r2
 800a140:	f100 33ff 	add.w	r3, r0, #4294967295
 800a144:	d100      	bne.n	800a148 <memcpy+0xc>
 800a146:	4770      	bx	lr
 800a148:	b510      	push	{r4, lr}
 800a14a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a14e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a152:	4291      	cmp	r1, r2
 800a154:	d1f9      	bne.n	800a14a <memcpy+0xe>
 800a156:	bd10      	pop	{r4, pc}

0800a158 <memmove>:
 800a158:	4288      	cmp	r0, r1
 800a15a:	b510      	push	{r4, lr}
 800a15c:	eb01 0402 	add.w	r4, r1, r2
 800a160:	d902      	bls.n	800a168 <memmove+0x10>
 800a162:	4284      	cmp	r4, r0
 800a164:	4623      	mov	r3, r4
 800a166:	d807      	bhi.n	800a178 <memmove+0x20>
 800a168:	1e43      	subs	r3, r0, #1
 800a16a:	42a1      	cmp	r1, r4
 800a16c:	d008      	beq.n	800a180 <memmove+0x28>
 800a16e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a172:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a176:	e7f8      	b.n	800a16a <memmove+0x12>
 800a178:	4402      	add	r2, r0
 800a17a:	4601      	mov	r1, r0
 800a17c:	428a      	cmp	r2, r1
 800a17e:	d100      	bne.n	800a182 <memmove+0x2a>
 800a180:	bd10      	pop	{r4, pc}
 800a182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a186:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a18a:	e7f7      	b.n	800a17c <memmove+0x24>

0800a18c <_free_r>:
 800a18c:	b538      	push	{r3, r4, r5, lr}
 800a18e:	4605      	mov	r5, r0
 800a190:	2900      	cmp	r1, #0
 800a192:	d041      	beq.n	800a218 <_free_r+0x8c>
 800a194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a198:	1f0c      	subs	r4, r1, #4
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	bfb8      	it	lt
 800a19e:	18e4      	addlt	r4, r4, r3
 800a1a0:	f000 f912 	bl	800a3c8 <__malloc_lock>
 800a1a4:	4a1d      	ldr	r2, [pc, #116]	; (800a21c <_free_r+0x90>)
 800a1a6:	6813      	ldr	r3, [r2, #0]
 800a1a8:	b933      	cbnz	r3, 800a1b8 <_free_r+0x2c>
 800a1aa:	6063      	str	r3, [r4, #4]
 800a1ac:	6014      	str	r4, [r2, #0]
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1b4:	f000 b90e 	b.w	800a3d4 <__malloc_unlock>
 800a1b8:	42a3      	cmp	r3, r4
 800a1ba:	d908      	bls.n	800a1ce <_free_r+0x42>
 800a1bc:	6820      	ldr	r0, [r4, #0]
 800a1be:	1821      	adds	r1, r4, r0
 800a1c0:	428b      	cmp	r3, r1
 800a1c2:	bf01      	itttt	eq
 800a1c4:	6819      	ldreq	r1, [r3, #0]
 800a1c6:	685b      	ldreq	r3, [r3, #4]
 800a1c8:	1809      	addeq	r1, r1, r0
 800a1ca:	6021      	streq	r1, [r4, #0]
 800a1cc:	e7ed      	b.n	800a1aa <_free_r+0x1e>
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	b10b      	cbz	r3, 800a1d8 <_free_r+0x4c>
 800a1d4:	42a3      	cmp	r3, r4
 800a1d6:	d9fa      	bls.n	800a1ce <_free_r+0x42>
 800a1d8:	6811      	ldr	r1, [r2, #0]
 800a1da:	1850      	adds	r0, r2, r1
 800a1dc:	42a0      	cmp	r0, r4
 800a1de:	d10b      	bne.n	800a1f8 <_free_r+0x6c>
 800a1e0:	6820      	ldr	r0, [r4, #0]
 800a1e2:	4401      	add	r1, r0
 800a1e4:	1850      	adds	r0, r2, r1
 800a1e6:	4283      	cmp	r3, r0
 800a1e8:	6011      	str	r1, [r2, #0]
 800a1ea:	d1e0      	bne.n	800a1ae <_free_r+0x22>
 800a1ec:	6818      	ldr	r0, [r3, #0]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	6053      	str	r3, [r2, #4]
 800a1f2:	4401      	add	r1, r0
 800a1f4:	6011      	str	r1, [r2, #0]
 800a1f6:	e7da      	b.n	800a1ae <_free_r+0x22>
 800a1f8:	d902      	bls.n	800a200 <_free_r+0x74>
 800a1fa:	230c      	movs	r3, #12
 800a1fc:	602b      	str	r3, [r5, #0]
 800a1fe:	e7d6      	b.n	800a1ae <_free_r+0x22>
 800a200:	6820      	ldr	r0, [r4, #0]
 800a202:	1821      	adds	r1, r4, r0
 800a204:	428b      	cmp	r3, r1
 800a206:	bf04      	itt	eq
 800a208:	6819      	ldreq	r1, [r3, #0]
 800a20a:	685b      	ldreq	r3, [r3, #4]
 800a20c:	6063      	str	r3, [r4, #4]
 800a20e:	bf04      	itt	eq
 800a210:	1809      	addeq	r1, r1, r0
 800a212:	6021      	streq	r1, [r4, #0]
 800a214:	6054      	str	r4, [r2, #4]
 800a216:	e7ca      	b.n	800a1ae <_free_r+0x22>
 800a218:	bd38      	pop	{r3, r4, r5, pc}
 800a21a:	bf00      	nop
 800a21c:	20001484 	.word	0x20001484

0800a220 <sbrk_aligned>:
 800a220:	b570      	push	{r4, r5, r6, lr}
 800a222:	4e0e      	ldr	r6, [pc, #56]	; (800a25c <sbrk_aligned+0x3c>)
 800a224:	460c      	mov	r4, r1
 800a226:	6831      	ldr	r1, [r6, #0]
 800a228:	4605      	mov	r5, r0
 800a22a:	b911      	cbnz	r1, 800a232 <sbrk_aligned+0x12>
 800a22c:	f000 f8bc 	bl	800a3a8 <_sbrk_r>
 800a230:	6030      	str	r0, [r6, #0]
 800a232:	4621      	mov	r1, r4
 800a234:	4628      	mov	r0, r5
 800a236:	f000 f8b7 	bl	800a3a8 <_sbrk_r>
 800a23a:	1c43      	adds	r3, r0, #1
 800a23c:	d00a      	beq.n	800a254 <sbrk_aligned+0x34>
 800a23e:	1cc4      	adds	r4, r0, #3
 800a240:	f024 0403 	bic.w	r4, r4, #3
 800a244:	42a0      	cmp	r0, r4
 800a246:	d007      	beq.n	800a258 <sbrk_aligned+0x38>
 800a248:	1a21      	subs	r1, r4, r0
 800a24a:	4628      	mov	r0, r5
 800a24c:	f000 f8ac 	bl	800a3a8 <_sbrk_r>
 800a250:	3001      	adds	r0, #1
 800a252:	d101      	bne.n	800a258 <sbrk_aligned+0x38>
 800a254:	f04f 34ff 	mov.w	r4, #4294967295
 800a258:	4620      	mov	r0, r4
 800a25a:	bd70      	pop	{r4, r5, r6, pc}
 800a25c:	20001488 	.word	0x20001488

0800a260 <_malloc_r>:
 800a260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a264:	1ccd      	adds	r5, r1, #3
 800a266:	f025 0503 	bic.w	r5, r5, #3
 800a26a:	3508      	adds	r5, #8
 800a26c:	2d0c      	cmp	r5, #12
 800a26e:	bf38      	it	cc
 800a270:	250c      	movcc	r5, #12
 800a272:	2d00      	cmp	r5, #0
 800a274:	4607      	mov	r7, r0
 800a276:	db01      	blt.n	800a27c <_malloc_r+0x1c>
 800a278:	42a9      	cmp	r1, r5
 800a27a:	d905      	bls.n	800a288 <_malloc_r+0x28>
 800a27c:	230c      	movs	r3, #12
 800a27e:	603b      	str	r3, [r7, #0]
 800a280:	2600      	movs	r6, #0
 800a282:	4630      	mov	r0, r6
 800a284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a288:	4e2e      	ldr	r6, [pc, #184]	; (800a344 <_malloc_r+0xe4>)
 800a28a:	f000 f89d 	bl	800a3c8 <__malloc_lock>
 800a28e:	6833      	ldr	r3, [r6, #0]
 800a290:	461c      	mov	r4, r3
 800a292:	bb34      	cbnz	r4, 800a2e2 <_malloc_r+0x82>
 800a294:	4629      	mov	r1, r5
 800a296:	4638      	mov	r0, r7
 800a298:	f7ff ffc2 	bl	800a220 <sbrk_aligned>
 800a29c:	1c43      	adds	r3, r0, #1
 800a29e:	4604      	mov	r4, r0
 800a2a0:	d14d      	bne.n	800a33e <_malloc_r+0xde>
 800a2a2:	6834      	ldr	r4, [r6, #0]
 800a2a4:	4626      	mov	r6, r4
 800a2a6:	2e00      	cmp	r6, #0
 800a2a8:	d140      	bne.n	800a32c <_malloc_r+0xcc>
 800a2aa:	6823      	ldr	r3, [r4, #0]
 800a2ac:	4631      	mov	r1, r6
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	eb04 0803 	add.w	r8, r4, r3
 800a2b4:	f000 f878 	bl	800a3a8 <_sbrk_r>
 800a2b8:	4580      	cmp	r8, r0
 800a2ba:	d13a      	bne.n	800a332 <_malloc_r+0xd2>
 800a2bc:	6821      	ldr	r1, [r4, #0]
 800a2be:	3503      	adds	r5, #3
 800a2c0:	1a6d      	subs	r5, r5, r1
 800a2c2:	f025 0503 	bic.w	r5, r5, #3
 800a2c6:	3508      	adds	r5, #8
 800a2c8:	2d0c      	cmp	r5, #12
 800a2ca:	bf38      	it	cc
 800a2cc:	250c      	movcc	r5, #12
 800a2ce:	4629      	mov	r1, r5
 800a2d0:	4638      	mov	r0, r7
 800a2d2:	f7ff ffa5 	bl	800a220 <sbrk_aligned>
 800a2d6:	3001      	adds	r0, #1
 800a2d8:	d02b      	beq.n	800a332 <_malloc_r+0xd2>
 800a2da:	6823      	ldr	r3, [r4, #0]
 800a2dc:	442b      	add	r3, r5
 800a2de:	6023      	str	r3, [r4, #0]
 800a2e0:	e00e      	b.n	800a300 <_malloc_r+0xa0>
 800a2e2:	6822      	ldr	r2, [r4, #0]
 800a2e4:	1b52      	subs	r2, r2, r5
 800a2e6:	d41e      	bmi.n	800a326 <_malloc_r+0xc6>
 800a2e8:	2a0b      	cmp	r2, #11
 800a2ea:	d916      	bls.n	800a31a <_malloc_r+0xba>
 800a2ec:	1961      	adds	r1, r4, r5
 800a2ee:	42a3      	cmp	r3, r4
 800a2f0:	6025      	str	r5, [r4, #0]
 800a2f2:	bf18      	it	ne
 800a2f4:	6059      	strne	r1, [r3, #4]
 800a2f6:	6863      	ldr	r3, [r4, #4]
 800a2f8:	bf08      	it	eq
 800a2fa:	6031      	streq	r1, [r6, #0]
 800a2fc:	5162      	str	r2, [r4, r5]
 800a2fe:	604b      	str	r3, [r1, #4]
 800a300:	4638      	mov	r0, r7
 800a302:	f104 060b 	add.w	r6, r4, #11
 800a306:	f000 f865 	bl	800a3d4 <__malloc_unlock>
 800a30a:	f026 0607 	bic.w	r6, r6, #7
 800a30e:	1d23      	adds	r3, r4, #4
 800a310:	1af2      	subs	r2, r6, r3
 800a312:	d0b6      	beq.n	800a282 <_malloc_r+0x22>
 800a314:	1b9b      	subs	r3, r3, r6
 800a316:	50a3      	str	r3, [r4, r2]
 800a318:	e7b3      	b.n	800a282 <_malloc_r+0x22>
 800a31a:	6862      	ldr	r2, [r4, #4]
 800a31c:	42a3      	cmp	r3, r4
 800a31e:	bf0c      	ite	eq
 800a320:	6032      	streq	r2, [r6, #0]
 800a322:	605a      	strne	r2, [r3, #4]
 800a324:	e7ec      	b.n	800a300 <_malloc_r+0xa0>
 800a326:	4623      	mov	r3, r4
 800a328:	6864      	ldr	r4, [r4, #4]
 800a32a:	e7b2      	b.n	800a292 <_malloc_r+0x32>
 800a32c:	4634      	mov	r4, r6
 800a32e:	6876      	ldr	r6, [r6, #4]
 800a330:	e7b9      	b.n	800a2a6 <_malloc_r+0x46>
 800a332:	230c      	movs	r3, #12
 800a334:	603b      	str	r3, [r7, #0]
 800a336:	4638      	mov	r0, r7
 800a338:	f000 f84c 	bl	800a3d4 <__malloc_unlock>
 800a33c:	e7a1      	b.n	800a282 <_malloc_r+0x22>
 800a33e:	6025      	str	r5, [r4, #0]
 800a340:	e7de      	b.n	800a300 <_malloc_r+0xa0>
 800a342:	bf00      	nop
 800a344:	20001484 	.word	0x20001484

0800a348 <_realloc_r>:
 800a348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a34c:	4680      	mov	r8, r0
 800a34e:	4614      	mov	r4, r2
 800a350:	460e      	mov	r6, r1
 800a352:	b921      	cbnz	r1, 800a35e <_realloc_r+0x16>
 800a354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a358:	4611      	mov	r1, r2
 800a35a:	f7ff bf81 	b.w	800a260 <_malloc_r>
 800a35e:	b92a      	cbnz	r2, 800a36c <_realloc_r+0x24>
 800a360:	f7ff ff14 	bl	800a18c <_free_r>
 800a364:	4625      	mov	r5, r4
 800a366:	4628      	mov	r0, r5
 800a368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a36c:	f000 f838 	bl	800a3e0 <_malloc_usable_size_r>
 800a370:	4284      	cmp	r4, r0
 800a372:	4607      	mov	r7, r0
 800a374:	d802      	bhi.n	800a37c <_realloc_r+0x34>
 800a376:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a37a:	d812      	bhi.n	800a3a2 <_realloc_r+0x5a>
 800a37c:	4621      	mov	r1, r4
 800a37e:	4640      	mov	r0, r8
 800a380:	f7ff ff6e 	bl	800a260 <_malloc_r>
 800a384:	4605      	mov	r5, r0
 800a386:	2800      	cmp	r0, #0
 800a388:	d0ed      	beq.n	800a366 <_realloc_r+0x1e>
 800a38a:	42bc      	cmp	r4, r7
 800a38c:	4622      	mov	r2, r4
 800a38e:	4631      	mov	r1, r6
 800a390:	bf28      	it	cs
 800a392:	463a      	movcs	r2, r7
 800a394:	f7ff fed2 	bl	800a13c <memcpy>
 800a398:	4631      	mov	r1, r6
 800a39a:	4640      	mov	r0, r8
 800a39c:	f7ff fef6 	bl	800a18c <_free_r>
 800a3a0:	e7e1      	b.n	800a366 <_realloc_r+0x1e>
 800a3a2:	4635      	mov	r5, r6
 800a3a4:	e7df      	b.n	800a366 <_realloc_r+0x1e>
	...

0800a3a8 <_sbrk_r>:
 800a3a8:	b538      	push	{r3, r4, r5, lr}
 800a3aa:	4d06      	ldr	r5, [pc, #24]	; (800a3c4 <_sbrk_r+0x1c>)
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	4608      	mov	r0, r1
 800a3b2:	602b      	str	r3, [r5, #0]
 800a3b4:	f7fd fa6c 	bl	8007890 <_sbrk>
 800a3b8:	1c43      	adds	r3, r0, #1
 800a3ba:	d102      	bne.n	800a3c2 <_sbrk_r+0x1a>
 800a3bc:	682b      	ldr	r3, [r5, #0]
 800a3be:	b103      	cbz	r3, 800a3c2 <_sbrk_r+0x1a>
 800a3c0:	6023      	str	r3, [r4, #0]
 800a3c2:	bd38      	pop	{r3, r4, r5, pc}
 800a3c4:	2000148c 	.word	0x2000148c

0800a3c8 <__malloc_lock>:
 800a3c8:	4801      	ldr	r0, [pc, #4]	; (800a3d0 <__malloc_lock+0x8>)
 800a3ca:	f000 b811 	b.w	800a3f0 <__retarget_lock_acquire_recursive>
 800a3ce:	bf00      	nop
 800a3d0:	20001490 	.word	0x20001490

0800a3d4 <__malloc_unlock>:
 800a3d4:	4801      	ldr	r0, [pc, #4]	; (800a3dc <__malloc_unlock+0x8>)
 800a3d6:	f000 b80c 	b.w	800a3f2 <__retarget_lock_release_recursive>
 800a3da:	bf00      	nop
 800a3dc:	20001490 	.word	0x20001490

0800a3e0 <_malloc_usable_size_r>:
 800a3e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3e4:	1f18      	subs	r0, r3, #4
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	bfbc      	itt	lt
 800a3ea:	580b      	ldrlt	r3, [r1, r0]
 800a3ec:	18c0      	addlt	r0, r0, r3
 800a3ee:	4770      	bx	lr

0800a3f0 <__retarget_lock_acquire_recursive>:
 800a3f0:	4770      	bx	lr

0800a3f2 <__retarget_lock_release_recursive>:
 800a3f2:	4770      	bx	lr

0800a3f4 <_init>:
 800a3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f6:	bf00      	nop
 800a3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3fa:	bc08      	pop	{r3}
 800a3fc:	469e      	mov	lr, r3
 800a3fe:	4770      	bx	lr

0800a400 <_fini>:
 800a400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a402:	bf00      	nop
 800a404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a406:	bc08      	pop	{r3}
 800a408:	469e      	mov	lr, r3
 800a40a:	4770      	bx	lr
