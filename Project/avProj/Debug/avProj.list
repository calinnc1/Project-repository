
avProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008cf4  08008cf4  00018cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d68  08008d68  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008d68  08008d68  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d68  08008d68  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d68  08008d68  00018d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d6c  08008d6c  00018d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00001698  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001710  20001710  00020078  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b7b7  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a01  00000000  00000000  0003b859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001868  00000000  00000000  0003f260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001630  00000000  00000000  00040ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002497b  00000000  00000000  000420f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025bcc  00000000  00000000  00066a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7db3  00000000  00000000  0008c63f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001643f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000066c0  00000000  00000000  00164444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008cdc 	.word	0x08008cdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08008cdc 	.word	0x08008cdc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <Access_Init>:
/**
  * @brief	Access module initialization function
  * @return	None
  */
void Access_Init(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Access_InitDone_b = TRUE;
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <Access_Init+0x14>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	701a      	strb	r2, [r3, #0]
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000094 	.word	0x20000094

08000a84 <Access_MainFunction>:
/**
  * @brief	Access module main function (runs in task)
  * @return	None
  */
void Access_MainFunction(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Access_InitDone_b)
	{

	}
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <Brakes_Init>:
/**
  * @brief	Brakes module initialization function
  * @return	None
  */
void Brakes_Init(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Brakes_InitDone_b = TRUE;
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <Brakes_Init+0x14>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000095 	.word	0x20000095

08000aa8 <Brakes_MainFunction>:
/**
  * @brief	Brakes module main function (runs in task)
  * @return	None
  */
void Brakes_MainFunction(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Brakes_InitDone_b)
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <Brakes_MainFunction+0x18>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d102      	bne.n	8000aba <Brakes_MainFunction+0x12>
	{
		/* Read AN0 analog voltage (mV) */
		Rte_Read_AN0_Voltage_u16(&g_Brakes_AN0_Voltage_u16);
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <Brakes_MainFunction+0x1c>)
 8000ab6:	f007 fc5f 	bl	8008378 <Rte_Read_AN0_Voltage_u16>
	}
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000095 	.word	0x20000095
 8000ac4:	20000096 	.word	0x20000096

08000ac8 <Engine_Init>:
/**
  * @brief	Engine module initialization function
  * @return	None
  */
void Engine_Init(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Engine_InitDone_b = TRUE;
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <Engine_Init+0x14>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000098 	.word	0x20000098

08000ae0 <Engine_MainFunction>:
/**
  * @brief	Engine module main function (runs in task)
  * @return	None
  */
void Engine_MainFunction(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Engine_InitDone_b)
	{

	}
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <LED_UpdatePulseDirection>:
/**
  * @brief  Updates the PWM pulse direction
  * @return None
  */
static void LED_UpdatePulseDirection(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
	/* Check is pulse value reached the maximum allowed value */
	if(g_LED_Pulse_u16 >= LED_FADE_MAX_PULSE)
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <LED_UpdatePulseDirection+0x2c>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8000af8:	d302      	bcc.n	8000b00 <LED_UpdatePulseDirection+0x14>
	{
		/* Switch pulse direction to downward */
		g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_DOWN;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <LED_UpdatePulseDirection+0x30>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
	}
	/* Check is pulse value reached the minimum allowed value */
	if(g_LED_Pulse_u16 <= LED_FADE_MIN_PULSE)
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <LED_UpdatePulseDirection+0x2c>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b08:	d802      	bhi.n	8000b10 <LED_UpdatePulseDirection+0x24>
	{
		/* Switch pulse direction to upward */
		g_LED_Pulse_Direction_u8 = LED_PULSE_DIRECTION_UP;
 8000b0a:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <LED_UpdatePulseDirection+0x30>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
	}
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	2000009c 	.word	0x2000009c
 8000b1c:	2000009e 	.word	0x2000009e

08000b20 <LED_UpdatePulseWidth>:
/**
  * @brief  Updates the PWM pulse step
  * @return None
  */
static void LED_UpdatePulseWidth(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	/* Check if pulse direction is upward */
	if(LED_PULSE_DIRECTION_UP == g_LED_Pulse_Direction_u8)
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <LED_UpdatePulseWidth+0x48>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d10c      	bne.n	8000b46 <LED_UpdatePulseWidth+0x26>
	{
		if(g_LED_Pulse_u16 <= LED_FADE_MAX_PULSE)
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <LED_UpdatePulseWidth+0x4c>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8000b34:	d813      	bhi.n	8000b5e <LED_UpdatePulseWidth+0x3e>
		{
			/* Increment the pulse width */
			g_LED_Pulse_u16 = g_LED_Pulse_u16+LED_FADE_PULSE_STEP;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <LED_UpdatePulseWidth+0x4c>)
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <LED_UpdatePulseWidth+0x4c>)
 8000b42:	801a      	strh	r2, [r3, #0]
 8000b44:	e00b      	b.n	8000b5e <LED_UpdatePulseWidth+0x3e>
		}
	}
	else
	{
		if(g_LED_Pulse_u16 >= LED_FADE_PULSE_STEP)
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <LED_UpdatePulseWidth+0x4c>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000b4e:	d306      	bcc.n	8000b5e <LED_UpdatePulseWidth+0x3e>
		{
			/* Decrement the pulse width */
			g_LED_Pulse_u16 = g_LED_Pulse_u16-LED_FADE_PULSE_STEP;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <LED_UpdatePulseWidth+0x4c>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <LED_UpdatePulseWidth+0x4c>)
 8000b5c:	801a      	strh	r2, [r3, #0]
		}
	}
	/* Update pulse direction */
	LED_UpdatePulseDirection();
 8000b5e:	f7ff ffc5 	bl	8000aec <LED_UpdatePulseDirection>
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000009e 	.word	0x2000009e
 8000b6c:	2000009c 	.word	0x2000009c

08000b70 <LED_Init>:
/**
  * @brief  Initializes the LED module
  * @return None
  */
void LED_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	/* Set servo initial position */
	Rte_Write_Servo_RawPulseWidth_u16(0u);
 8000b74:	2000      	movs	r0, #0
 8000b76:	f007 fbe1 	bl	800833c <Rte_Cdd_Servo_RawMove>
	/* Set initialization flag to done */
	g_LED_InitDone_b = TRUE;
 8000b7a:	4b02      	ldr	r3, [pc, #8]	; (8000b84 <LED_Init+0x14>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000099 	.word	0x20000099

08000b88 <LED_MainFunction>:
/**
  * @brief  LED Main function (runs in periodic task)
  * @return None
  */
void LED_MainFunction(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_LED_InitDone_b)
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <LED_MainFunction+0x2c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d10d      	bne.n	8000bb0 <LED_MainFunction+0x28>
	{
		/* Read the blue button state */
		Rte_Read_Button_State(&g_LED_ButtonState_b);
 8000b94:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <LED_MainFunction+0x30>)
 8000b96:	f007 fbb1 	bl	80082fc <Rte_Read_PC13_Pin_State>
		/* Check if the button is released */
		if(TRUE == (boolean)g_LED_ButtonState_b)
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <LED_MainFunction+0x30>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d106      	bne.n	8000bb0 <LED_MainFunction+0x28>
		{
			/* Update PWM pulse width */
			LED_UpdatePulseWidth();
 8000ba2:	f7ff ffbd 	bl	8000b20 <LED_UpdatePulseWidth>
			/* Call the servo interface with the new pulse width */
			Rte_Write_Servo_RawPulseWidth_u16(g_LED_Pulse_u16);
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <LED_MainFunction+0x34>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f007 fbc6 	bl	800833c <Rte_Cdd_Servo_RawMove>
		else
		{
			/* Stop fading */
		}
	}
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000099 	.word	0x20000099
 8000bb8:	2000009a 	.word	0x2000009a
 8000bbc:	2000009c 	.word	0x2000009c

08000bc0 <Blinker_Init>:
/**
  * @brief	Blinker module initialization function
  * @return	None
  */
void Blinker_Init(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Blinker_InitDone_b = TRUE;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <Blinker_Init+0x14>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	701a      	strb	r2, [r3, #0]
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	2000009f 	.word	0x2000009f

08000bd8 <Blinker_MainFunction>:
/**
  * @brief	Blinker module main function (runs in task)
  * @return	None
  */
void Blinker_MainFunction(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Blinker_InitDone_b)
	{

	}
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <FrontLights_Init>:
/**
  * @brief	FrontLights module initialization function
  * @return	None
  */
void FrontLights_Init(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_FrontLights_InitDone_b = TRUE;
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <FrontLights_Init+0x14>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	200000a0 	.word	0x200000a0

08000bfc <FrontLights_MainFunction>:
/**
  * @brief	FrontLights module main function (runs in task)
  * @return	None
  */
void FrontLights_MainFunction(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_FrontLights_InitDone_b)
	{

	}
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <InteriorLights_Init>:
/**
  * @brief	InteriorLights module initialization function
  * @return	None
  */
void InteriorLights_Init(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_InteriorLights_InitDone_b = TRUE;
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <InteriorLights_Init+0x14>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	200000a1 	.word	0x200000a1

08000c20 <InteriorLights_MainFunction>:
/**
  * @brief	InteriorLights module main function (runs in task)
  * @return	None
  */
void InteriorLights_MainFunction(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_InteriorLights_InitDone_b)
	{

	}
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <RearLights_Init>:
/**
  * @brief	RearLights module initialization function
  * @return	None
  */
void RearLights_Init(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_RearLights_InitDone_b = TRUE;
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <RearLights_Init+0x14>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	200000a2 	.word	0x200000a2

08000c44 <RearLights_MainFunction>:
/**
  * @brief	RearLights module main function (runs in task)
  * @return	None
  */
void RearLights_MainFunction(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_RearLights_InitDone_b)
	{

	}
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <Steering_Init>:
/**
  * @brief	Steering module initialization function
  * @return	None
  */
void Steering_Init(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

	/* Set initialization flag to done */
	g_Steering_InitDone_b = TRUE;
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <Steering_Init+0x14>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	200000a3 	.word	0x200000a3

08000c68 <Steering_MainFunction>:
/**
  * @brief	Steering module main function (runs in task)
  * @return	None
  */
void Steering_MainFunction(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
	/* Check if initialization is done */
	if(TRUE == g_Steering_InitDone_b)
	{

	}
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <Cdd_Servo_Init>:
	0.0,
	20.0
};

void Cdd_Servo_Init(void)
{
 8000c74:	b5b0      	push	{r4, r5, r7, lr}
 8000c76:	b0b2      	sub	sp, #200	; 0xc8
 8000c78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
 8000cb4:	615a      	str	r2, [r3, #20]
 8000cb6:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32 PSC_Value = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32 ARR_Value = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    //DWT_Delay_Init();

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

    if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOA)
 8000cc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cc8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ccc:	d10c      	bne.n	8000ce8 <Cdd_Servo_Init+0x74>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b70      	ldr	r3, [pc, #448]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	4a6f      	ldr	r2, [pc, #444]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	6153      	str	r3, [r2, #20]
 8000cda:	4b6d      	ldr	r3, [pc, #436]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	e046      	b.n	8000d76 <Cdd_Servo_Init+0x102>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOB)
 8000ce8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cec:	4b69      	ldr	r3, [pc, #420]	; (8000e94 <Cdd_Servo_Init+0x220>)
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d10c      	bne.n	8000d0c <Cdd_Servo_Init+0x98>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b67      	ldr	r3, [pc, #412]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	4a66      	ldr	r2, [pc, #408]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cfc:	6153      	str	r3, [r2, #20]
 8000cfe:	4b64      	ldr	r3, [pc, #400]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d06:	623b      	str	r3, [r7, #32]
 8000d08:	6a3b      	ldr	r3, [r7, #32]
 8000d0a:	e034      	b.n	8000d76 <Cdd_Servo_Init+0x102>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOC)
 8000d0c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d10:	4b61      	ldr	r3, [pc, #388]	; (8000e98 <Cdd_Servo_Init+0x224>)
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d10c      	bne.n	8000d30 <Cdd_Servo_Init+0xbc>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	4b5e      	ldr	r3, [pc, #376]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	4a5d      	ldr	r2, [pc, #372]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000d1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d20:	6153      	str	r3, [r2, #20]
 8000d22:	4b5b      	ldr	r3, [pc, #364]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d2a:	61fb      	str	r3, [r7, #28]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	e022      	b.n	8000d76 <Cdd_Servo_Init+0x102>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOD)
 8000d30:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d34:	4b59      	ldr	r3, [pc, #356]	; (8000e9c <Cdd_Servo_Init+0x228>)
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d10c      	bne.n	8000d54 <Cdd_Servo_Init+0xe0>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3a:	4b55      	ldr	r3, [pc, #340]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	4a54      	ldr	r2, [pc, #336]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000d40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d44:	6153      	str	r3, [r2, #20]
 8000d46:	4b52      	ldr	r3, [pc, #328]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d4e:	61bb      	str	r3, [r7, #24]
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	e010      	b.n	8000d76 <Cdd_Servo_Init+0x102>
    }
    else if(c_SERVO_CfgParam_s.SERVO_GPIO == GPIOE)
 8000d54:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d58:	4b51      	ldr	r3, [pc, #324]	; (8000ea0 <Cdd_Servo_Init+0x22c>)
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d10b      	bne.n	8000d76 <Cdd_Servo_Init+0x102>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d5e:	4b4c      	ldr	r3, [pc, #304]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	4a4b      	ldr	r2, [pc, #300]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000d64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d68:	6153      	str	r3, [r2, #20]
 8000d6a:	4b49      	ldr	r3, [pc, #292]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697b      	ldr	r3, [r7, #20]
    }
	GPIO_InitStruct.Pin = c_SERVO_CfgParam_s.SERVO_PIN;
 8000d76:	2320      	movs	r3, #32
 8000d78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	HAL_GPIO_Init(c_SERVO_CfgParam_s.SERVO_GPIO, &GPIO_InitStruct);
 8000d8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d96:	4619      	mov	r1, r3
 8000d98:	4610      	mov	r0, r2
 8000d9a:	f001 f98f 	bl	80020bc <HAL_GPIO_Init>

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32) (c_SERVO_CfgParam_s.TIM_CLK / 3276800.0);
 8000d9e:	4b41      	ldr	r3, [pc, #260]	; (8000ea4 <Cdd_Servo_Init+0x230>)
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fbb7 	bl	8000514 <__aeabi_ui2d>
 8000da6:	f04f 0200 	mov.w	r2, #0
 8000daa:	4b3f      	ldr	r3, [pc, #252]	; (8000ea8 <Cdd_Servo_Init+0x234>)
 8000dac:	f7ff fd56 	bl	800085c <__aeabi_ddiv>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	4610      	mov	r0, r2
 8000db6:	4619      	mov	r1, r3
 8000db8:	f7ff fe38 	bl	8000a2c <__aeabi_d2uiz>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	ARR_Value = (uint32) ((c_SERVO_CfgParam_s.TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8000dc2:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <Cdd_Servo_Init+0x230>)
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fba5 	bl	8000514 <__aeabi_ui2d>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	460d      	mov	r5, r1
 8000dce:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8000dd2:	f7ff fb9f 	bl	8000514 <__aeabi_ui2d>
 8000dd6:	f04f 0200 	mov.w	r2, #0
 8000dda:	4b34      	ldr	r3, [pc, #208]	; (8000eac <Cdd_Servo_Init+0x238>)
 8000ddc:	f7ff fa5e 	bl	800029c <__adddf3>
 8000de0:	4602      	mov	r2, r0
 8000de2:	460b      	mov	r3, r1
 8000de4:	4610      	mov	r0, r2
 8000de6:	4619      	mov	r1, r3
 8000de8:	f04f 0200 	mov.w	r2, #0
 8000dec:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <Cdd_Servo_Init+0x23c>)
 8000dee:	f7ff fc0b 	bl	8000608 <__aeabi_dmul>
 8000df2:	4602      	mov	r2, r0
 8000df4:	460b      	mov	r3, r1
 8000df6:	4620      	mov	r0, r4
 8000df8:	4629      	mov	r1, r5
 8000dfa:	f7ff fd2f 	bl	800085c <__aeabi_ddiv>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	4610      	mov	r0, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	f04f 0200 	mov.w	r2, #0
 8000e0a:	4b28      	ldr	r3, [pc, #160]	; (8000eac <Cdd_Servo_Init+0x238>)
 8000e0c:	f7ff fa44 	bl	8000298 <__aeabi_dsub>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	4610      	mov	r0, r2
 8000e16:	4619      	mov	r1, r3
 8000e18:	f7ff fe08 	bl	8000a2c <__aeabi_d2uiz>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(c_SERVO_CfgParam_s.TIM_Instance == TIM1)
 8000e22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e26:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <Cdd_Servo_Init+0x240>)
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d10c      	bne.n	8000e46 <Cdd_Servo_Init+0x1d2>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a17      	ldr	r2, [pc, #92]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000e32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	e04b      	b.n	8000ede <Cdd_Servo_Init+0x26a>
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM2)
 8000e46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e4e:	d10c      	bne.n	8000e6a <Cdd_Servo_Init+0x1f6>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000e52:	69db      	ldr	r3, [r3, #28]
 8000e54:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	61d3      	str	r3, [r2, #28]
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000e5e:	69db      	ldr	r3, [r3, #28]
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	e039      	b.n	8000ede <Cdd_Servo_Init+0x26a>
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM3)
 8000e6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <Cdd_Servo_Init+0x244>)
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d123      	bne.n	8000ebc <Cdd_Servo_Init+0x248>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000e76:	69db      	ldr	r3, [r3, #28]
 8000e78:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	61d3      	str	r3, [r2, #28]
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <Cdd_Servo_Init+0x21c>)
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	e027      	b.n	8000ede <Cdd_Servo_Init+0x26a>
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000
 8000e94:	48000400 	.word	0x48000400
 8000e98:	48000800 	.word	0x48000800
 8000e9c:	48000c00 	.word	0x48000c00
 8000ea0:	48001000 	.word	0x48001000
 8000ea4:	044aa200 	.word	0x044aa200
 8000ea8:	41490000 	.word	0x41490000
 8000eac:	3ff00000 	.word	0x3ff00000
 8000eb0:	40490000 	.word	0x40490000
 8000eb4:	40012c00 	.word	0x40012c00
 8000eb8:	40000400 	.word	0x40000400
	}
	else if(c_SERVO_CfgParam_s.TIM_Instance == TIM4)
 8000ebc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec0:	4b4e      	ldr	r3, [pc, #312]	; (8000ffc <Cdd_Servo_Init+0x388>)
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d10b      	bne.n	8000ede <Cdd_Servo_Init+0x26a>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8000ec6:	4b4e      	ldr	r3, [pc, #312]	; (8001000 <Cdd_Servo_Init+0x38c>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	4a4d      	ldr	r2, [pc, #308]	; (8001000 <Cdd_Servo_Init+0x38c>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	61d3      	str	r3, [r2, #28]
 8000ed2:	4b4b      	ldr	r3, [pc, #300]	; (8001000 <Cdd_Servo_Init+0x38c>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
	}

	htim.Instance = c_SERVO_CfgParam_s.TIM_Instance;
 8000ede:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.Prescaler = PSC_Value;
 8000ee4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eea:	2300      	movs	r3, #0
 8000eec:	633b      	str	r3, [r7, #48]	; 0x30
	htim.Init.Period = ARR_Value;
 8000eee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000ef2:	637b      	str	r3, [r7, #52]	; 0x34
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63bb      	str	r3, [r7, #56]	; 0x38
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_TIM_Base_Init(&htim);
 8000efc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f00:	4618      	mov	r0, r3
 8000f02:	f001 fde8 	bl	8002ad6 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8000f0e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8000f12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 fa43 	bl	80033a4 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8000f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fe9e 	bl	8002c64 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8000f34:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000f38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 ff74 	bl	8003e2c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f44:	2360      	movs	r3, #96	; 0x60
 8000f46:	677b      	str	r3, [r7, #116]	; 0x74
	sConfigOC.Pulse = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	67bb      	str	r3, [r7, #120]	; 0x78
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	67fb      	str	r3, [r7, #124]	; 0x7c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, c_SERVO_CfgParam_s.PWM_TIM_CH);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000f5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f60:	4618      	mov	r0, r3
 8000f62:	f002 f90b 	bl	800317c <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info_s.Period_Min_u16 = (uint16) (ARR_Value * (c_SERVO_CfgParam_s.MinPulse/20.0));
 8000f66:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8000f6a:	f7ff fad3 	bl	8000514 <__aeabi_ui2d>
 8000f6e:	4604      	mov	r4, r0
 8000f70:	460d      	mov	r5, r1
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff faee 	bl	8000558 <__aeabi_f2d>
 8000f7c:	f04f 0200 	mov.w	r2, #0
 8000f80:	4b20      	ldr	r3, [pc, #128]	; (8001004 <Cdd_Servo_Init+0x390>)
 8000f82:	f7ff fc6b 	bl	800085c <__aeabi_ddiv>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	4629      	mov	r1, r5
 8000f8e:	f7ff fb3b 	bl	8000608 <__aeabi_dmul>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff fd47 	bl	8000a2c <__aeabi_d2uiz>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <Cdd_Servo_Init+0x394>)
 8000fa4:	801a      	strh	r2, [r3, #0]
	gs_SERVO_info_s.Period_Max_u16 = (uint16) (ARR_Value * (c_SERVO_CfgParam_s.MaxPulse/20.0));
 8000fa6:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8000faa:	f7ff fab3 	bl	8000514 <__aeabi_ui2d>
 8000fae:	4604      	mov	r4, r0
 8000fb0:	460d      	mov	r5, r1
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <Cdd_Servo_Init+0x398>)
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff facf 	bl	8000558 <__aeabi_f2d>
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <Cdd_Servo_Init+0x390>)
 8000fc0:	f7ff fc4c 	bl	800085c <__aeabi_ddiv>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4620      	mov	r0, r4
 8000fca:	4629      	mov	r1, r5
 8000fcc:	f7ff fb1c 	bl	8000608 <__aeabi_dmul>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f7ff fd28 	bl	8000a2c <__aeabi_d2uiz>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <Cdd_Servo_Init+0x394>)
 8000fe2:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, c_SERVO_CfgParam_s.PWM_TIM_CH);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 fe99 	bl	8002d24 <HAL_TIM_PWM_Start>
}
 8000ff2:	bf00      	nop
 8000ff4:	37c8      	adds	r7, #200	; 0xc8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40000800 	.word	0x40000800
 8001000:	40021000 	.word	0x40021000
 8001004:	40340000 	.word	0x40340000
 8001008:	200000a4 	.word	0x200000a4
 800100c:	41a00000 	.word	0x41a00000

08001010 <Cdd_Servo_RawMove>:
	*(c_SERVO_CfgParam_s.TIM_CCRx) = l_Pulse_u16;
}

/* Moves A Specific Motor With A Raw Pulse Width Value */
void Cdd_Servo_RawMove(uint16 Pulse)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	80fb      	strh	r3, [r7, #6]
	if(Pulse <= gs_SERVO_info_s.Period_Max_u16 && Pulse >= gs_SERVO_info_s.Period_Min_u16)
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <Cdd_Servo_RawMove+0x30>)
 800101c:	885b      	ldrh	r3, [r3, #2]
 800101e:	88fa      	ldrh	r2, [r7, #6]
 8001020:	429a      	cmp	r2, r3
 8001022:	d807      	bhi.n	8001034 <Cdd_Servo_RawMove+0x24>
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <Cdd_Servo_RawMove+0x30>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	88fa      	ldrh	r2, [r7, #6]
 800102a:	429a      	cmp	r2, r3
 800102c:	d302      	bcc.n	8001034 <Cdd_Servo_RawMove+0x24>
	{
		*(c_SERVO_CfgParam_s.TIM_CCRx) = Pulse;
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <Cdd_Servo_RawMove+0x34>)
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	6013      	str	r3, [r2, #0]
	}
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	200000a4 	.word	0x200000a4
 8001044:	40000034 	.word	0x40000034

08001048 <Cdd_Servo_MainFunction>:
		Cdd_Servo_MoveTo(l_Angle_u8--);
	}
}

void Cdd_Servo_MainFunction(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr

08001066 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b09a      	sub	sp, #104	; 0x68
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001080:	2300      	movs	r3, #0
 8001082:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001086:	2300      	movs	r3, #0
 8001088:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d101      	bne.n	8001098 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e1e3      	b.n	8001460 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d176      	bne.n	8001198 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d152      	bne.n	8001158 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f003 fad3 	bl	8004678 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d13b      	bne.n	8001158 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 ff85 	bl	8001ff0 <ADC_Disable>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d12f      	bne.n	8001158 <HAL_ADC_Init+0xe0>
 80010f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d12b      	bne.n	8001158 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001108:	f023 0302 	bic.w	r3, r3, #2
 800110c:	f043 0202 	orr.w	r2, r3, #2
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001122:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001132:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001134:	4b92      	ldr	r3, [pc, #584]	; (8001380 <HAL_ADC_Init+0x308>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a92      	ldr	r2, [pc, #584]	; (8001384 <HAL_ADC_Init+0x30c>)
 800113a:	fba2 2303 	umull	r2, r3, r2, r3
 800113e:	0c9a      	lsrs	r2, r3, #18
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800114a:	e002      	b.n	8001152 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	3b01      	subs	r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1f9      	bne.n	800114c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d007      	beq.n	8001176 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001174:	d110      	bne.n	8001198 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f023 0312 	bic.w	r3, r3, #18
 800117e:	f043 0210 	orr.w	r2, r3, #16
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f043 0201 	orr.w	r2, r3, #1
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f003 0310 	and.w	r3, r3, #16
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f040 8150 	bne.w	8001446 <HAL_ADC_Init+0x3ce>
 80011a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f040 814b 	bne.w	8001446 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f040 8143 	bne.w	8001446 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011c8:	f043 0202 	orr.w	r2, r3, #2
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011d8:	d004      	beq.n	80011e4 <HAL_ADC_Init+0x16c>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a6a      	ldr	r2, [pc, #424]	; (8001388 <HAL_ADC_Init+0x310>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d101      	bne.n	80011e8 <HAL_ADC_Init+0x170>
 80011e4:	4b69      	ldr	r3, [pc, #420]	; (800138c <HAL_ADC_Init+0x314>)
 80011e6:	e000      	b.n	80011ea <HAL_ADC_Init+0x172>
 80011e8:	4b69      	ldr	r3, [pc, #420]	; (8001390 <HAL_ADC_Init+0x318>)
 80011ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011f4:	d102      	bne.n	80011fc <HAL_ADC_Init+0x184>
 80011f6:	4b64      	ldr	r3, [pc, #400]	; (8001388 <HAL_ADC_Init+0x310>)
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	e01a      	b.n	8001232 <HAL_ADC_Init+0x1ba>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a61      	ldr	r2, [pc, #388]	; (8001388 <HAL_ADC_Init+0x310>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d103      	bne.n	800120e <HAL_ADC_Init+0x196>
 8001206:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	e011      	b.n	8001232 <HAL_ADC_Init+0x1ba>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a60      	ldr	r2, [pc, #384]	; (8001394 <HAL_ADC_Init+0x31c>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d102      	bne.n	800121e <HAL_ADC_Init+0x1a6>
 8001218:	4b5f      	ldr	r3, [pc, #380]	; (8001398 <HAL_ADC_Init+0x320>)
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	e009      	b.n	8001232 <HAL_ADC_Init+0x1ba>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a5d      	ldr	r2, [pc, #372]	; (8001398 <HAL_ADC_Init+0x320>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d102      	bne.n	800122e <HAL_ADC_Init+0x1b6>
 8001228:	4b5a      	ldr	r3, [pc, #360]	; (8001394 <HAL_ADC_Init+0x31c>)
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	e001      	b.n	8001232 <HAL_ADC_Init+0x1ba>
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b01      	cmp	r3, #1
 800123e:	d108      	bne.n	8001252 <HAL_ADC_Init+0x1da>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b01      	cmp	r3, #1
 800124c:	d101      	bne.n	8001252 <HAL_ADC_Init+0x1da>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <HAL_ADC_Init+0x1dc>
 8001252:	2300      	movs	r3, #0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d11c      	bne.n	8001292 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001258:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800125a:	2b00      	cmp	r3, #0
 800125c:	d010      	beq.n	8001280 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	2b01      	cmp	r3, #1
 8001268:	d107      	bne.n	800127a <HAL_ADC_Init+0x202>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_ADC_Init+0x202>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <HAL_ADC_Init+0x204>
 800127a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800127c:	2b00      	cmp	r3, #0
 800127e:	d108      	bne.n	8001292 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	431a      	orrs	r2, r3
 800128e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001290:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7e5b      	ldrb	r3, [r3, #25]
 8001296:	035b      	lsls	r3, r3, #13
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800129c:	2a01      	cmp	r2, #1
 800129e:	d002      	beq.n	80012a6 <HAL_ADC_Init+0x22e>
 80012a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012a4:	e000      	b.n	80012a8 <HAL_ADC_Init+0x230>
 80012a6:	2200      	movs	r2, #0
 80012a8:	431a      	orrs	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	431a      	orrs	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012b8:	4313      	orrs	r3, r2
 80012ba:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d11b      	bne.n	80012fe <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7e5b      	ldrb	r3, [r3, #25]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d109      	bne.n	80012e2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	3b01      	subs	r3, #1
 80012d4:	045a      	lsls	r2, r3, #17
 80012d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012d8:	4313      	orrs	r3, r2
 80012da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012de:	663b      	str	r3, [r7, #96]	; 0x60
 80012e0:	e00d      	b.n	80012fe <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80012ea:	f043 0220 	orr.w	r2, r3, #32
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f043 0201 	orr.w	r2, r3, #1
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001302:	2b01      	cmp	r3, #1
 8001304:	d054      	beq.n	80013b0 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a22      	ldr	r2, [pc, #136]	; (8001394 <HAL_ADC_Init+0x31c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d004      	beq.n	800131a <HAL_ADC_Init+0x2a2>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a20      	ldr	r2, [pc, #128]	; (8001398 <HAL_ADC_Init+0x320>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d140      	bne.n	800139c <HAL_ADC_Init+0x324>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001322:	d02a      	beq.n	800137a <HAL_ADC_Init+0x302>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800132c:	d022      	beq.n	8001374 <HAL_ADC_Init+0x2fc>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001336:	d01a      	beq.n	800136e <HAL_ADC_Init+0x2f6>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001340:	d012      	beq.n	8001368 <HAL_ADC_Init+0x2f0>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001346:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800134a:	d00a      	beq.n	8001362 <HAL_ADC_Init+0x2ea>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001354:	d002      	beq.n	800135c <HAL_ADC_Init+0x2e4>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135a:	e023      	b.n	80013a4 <HAL_ADC_Init+0x32c>
 800135c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001360:	e020      	b.n	80013a4 <HAL_ADC_Init+0x32c>
 8001362:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001366:	e01d      	b.n	80013a4 <HAL_ADC_Init+0x32c>
 8001368:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800136c:	e01a      	b.n	80013a4 <HAL_ADC_Init+0x32c>
 800136e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001372:	e017      	b.n	80013a4 <HAL_ADC_Init+0x32c>
 8001374:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001378:	e014      	b.n	80013a4 <HAL_ADC_Init+0x32c>
 800137a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800137e:	e011      	b.n	80013a4 <HAL_ADC_Init+0x32c>
 8001380:	20000000 	.word	0x20000000
 8001384:	431bde83 	.word	0x431bde83
 8001388:	50000100 	.word	0x50000100
 800138c:	50000300 	.word	0x50000300
 8001390:	50000700 	.word	0x50000700
 8001394:	50000400 	.word	0x50000400
 8001398:	50000500 	.word	0x50000500
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80013a8:	4313      	orrs	r3, r2
 80013aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013ac:	4313      	orrs	r3, r2
 80013ae:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d114      	bne.n	80013e8 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013cc:	f023 0302 	bic.w	r3, r3, #2
 80013d0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7e1b      	ldrb	r3, [r3, #24]
 80013d6:	039a      	lsls	r2, r3, #14
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4313      	orrs	r3, r2
 80013e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013e4:	4313      	orrs	r3, r2
 80013e6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <HAL_ADC_Init+0x3f0>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6812      	ldr	r2, [r2, #0]
 80013f6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80013f8:	430b      	orrs	r3, r1
 80013fa:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d10c      	bne.n	800141e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f023 010f 	bic.w	r1, r3, #15
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	1e5a      	subs	r2, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	631a      	str	r2, [r3, #48]	; 0x30
 800141c:	e007      	b.n	800142e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 020f 	bic.w	r2, r2, #15
 800142c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f023 0303 	bic.w	r3, r3, #3
 800143c:	f043 0201 	orr.w	r2, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	641a      	str	r2, [r3, #64]	; 0x40
 8001444:	e00a      	b.n	800145c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f023 0312 	bic.w	r3, r3, #18
 800144e:	f043 0210 	orr.w	r2, r3, #16
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001456:	2301      	movs	r3, #1
 8001458:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800145c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001460:	4618      	mov	r0, r3
 8001462:	3768      	adds	r7, #104	; 0x68
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	fff0c007 	.word	0xfff0c007

0800146c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	2b00      	cmp	r3, #0
 8001488:	f040 80f7 	bne.w	800167a <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001492:	2b01      	cmp	r3, #1
 8001494:	d101      	bne.n	800149a <HAL_ADC_Start_DMA+0x2e>
 8001496:	2302      	movs	r3, #2
 8001498:	e0f2      	b.n	8001680 <HAL_ADC_Start_DMA+0x214>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014aa:	d004      	beq.n	80014b6 <HAL_ADC_Start_DMA+0x4a>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a75      	ldr	r2, [pc, #468]	; (8001688 <HAL_ADC_Start_DMA+0x21c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d109      	bne.n	80014ca <HAL_ADC_Start_DMA+0x5e>
 80014b6:	4b75      	ldr	r3, [pc, #468]	; (800168c <HAL_ADC_Start_DMA+0x220>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	2b00      	cmp	r3, #0
 80014c0:	bf0c      	ite	eq
 80014c2:	2301      	moveq	r3, #1
 80014c4:	2300      	movne	r3, #0
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	e008      	b.n	80014dc <HAL_ADC_Start_DMA+0x70>
 80014ca:	4b71      	ldr	r3, [pc, #452]	; (8001690 <HAL_ADC_Start_DMA+0x224>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	bf0c      	ite	eq
 80014d6:	2301      	moveq	r3, #1
 80014d8:	2300      	movne	r3, #0
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80c5 	beq.w	800166c <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f000 fd20 	bl	8001f28 <ADC_Enable>
 80014e8:	4603      	mov	r3, r0
 80014ea:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80014ec:	7dfb      	ldrb	r3, [r7, #23]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f040 80b7 	bne.w	8001662 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001510:	d004      	beq.n	800151c <HAL_ADC_Start_DMA+0xb0>
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a5c      	ldr	r2, [pc, #368]	; (8001688 <HAL_ADC_Start_DMA+0x21c>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d106      	bne.n	800152a <HAL_ADC_Start_DMA+0xbe>
 800151c:	4b5b      	ldr	r3, [pc, #364]	; (800168c <HAL_ADC_Start_DMA+0x220>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 031f 	and.w	r3, r3, #31
 8001524:	2b00      	cmp	r3, #0
 8001526:	d010      	beq.n	800154a <HAL_ADC_Start_DMA+0xde>
 8001528:	e005      	b.n	8001536 <HAL_ADC_Start_DMA+0xca>
 800152a:	4b59      	ldr	r3, [pc, #356]	; (8001690 <HAL_ADC_Start_DMA+0x224>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 031f 	and.w	r3, r3, #31
 8001532:	2b00      	cmp	r3, #0
 8001534:	d009      	beq.n	800154a <HAL_ADC_Start_DMA+0xde>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800153e:	d004      	beq.n	800154a <HAL_ADC_Start_DMA+0xde>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a53      	ldr	r2, [pc, #332]	; (8001694 <HAL_ADC_Start_DMA+0x228>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d115      	bne.n	8001576 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d036      	beq.n	80015d2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800156c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001574:	e02d      	b.n	80015d2 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800158a:	d004      	beq.n	8001596 <HAL_ADC_Start_DMA+0x12a>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a3d      	ldr	r2, [pc, #244]	; (8001688 <HAL_ADC_Start_DMA+0x21c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d10a      	bne.n	80015ac <HAL_ADC_Start_DMA+0x140>
 8001596:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	bf14      	ite	ne
 80015a4:	2301      	movne	r3, #1
 80015a6:	2300      	moveq	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	e008      	b.n	80015be <HAL_ADC_Start_DMA+0x152>
 80015ac:	4b39      	ldr	r3, [pc, #228]	; (8001694 <HAL_ADC_Start_DMA+0x228>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	bf14      	ite	ne
 80015b8:	2301      	movne	r3, #1
 80015ba:	2300      	moveq	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d007      	beq.n	80015d2 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015de:	d106      	bne.n	80015ee <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e4:	f023 0206 	bic.w	r2, r3, #6
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	645a      	str	r2, [r3, #68]	; 0x44
 80015ec:	e002      	b.n	80015f4 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001600:	4a25      	ldr	r2, [pc, #148]	; (8001698 <HAL_ADC_Start_DMA+0x22c>)
 8001602:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001608:	4a24      	ldr	r2, [pc, #144]	; (800169c <HAL_ADC_Start_DMA+0x230>)
 800160a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001610:	4a23      	ldr	r2, [pc, #140]	; (80016a0 <HAL_ADC_Start_DMA+0x234>)
 8001612:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	221c      	movs	r2, #28
 800161a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0210 	orr.w	r2, r2, #16
 800162a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0201 	orr.w	r2, r2, #1
 800163a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3340      	adds	r3, #64	; 0x40
 8001646:	4619      	mov	r1, r3
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f000 ff4d 	bl	80024ea <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0204 	orr.w	r2, r2, #4
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	e00d      	b.n	800167e <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800166a:	e008      	b.n	800167e <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001678:	e001      	b.n	800167e <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800167a:	2302      	movs	r3, #2
 800167c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800167e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	50000100 	.word	0x50000100
 800168c:	50000300 	.word	0x50000300
 8001690:	50000700 	.word	0x50000700
 8001694:	50000400 	.word	0x50000400
 8001698:	08001e5d 	.word	0x08001e5d
 800169c:	08001ed7 	.word	0x08001ed7
 80016a0:	08001ef3 	.word	0x08001ef3

080016a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b09b      	sub	sp, #108	; 0x6c
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x22>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e2ca      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x5b8>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f040 82ae 	bne.w	8001c3a <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d81c      	bhi.n	8001720 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4413      	add	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	461a      	mov	r2, r3
 80016fa:	231f      	movs	r3, #31
 80016fc:	4093      	lsls	r3, r2
 80016fe:	43db      	mvns	r3, r3
 8001700:	4019      	ands	r1, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	6818      	ldr	r0, [r3, #0]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	fa00 f203 	lsl.w	r2, r0, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	631a      	str	r2, [r3, #48]	; 0x30
 800171e:	e063      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b09      	cmp	r3, #9
 8001726:	d81e      	bhi.n	8001766 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	3b1e      	subs	r3, #30
 800173c:	221f      	movs	r2, #31
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	4019      	ands	r1, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	3b1e      	subs	r3, #30
 8001758:	fa00 f203 	lsl.w	r2, r0, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	635a      	str	r2, [r3, #52]	; 0x34
 8001764:	e040      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b0e      	cmp	r3, #14
 800176c:	d81e      	bhi.n	80017ac <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	3b3c      	subs	r3, #60	; 0x3c
 8001782:	221f      	movs	r2, #31
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	4019      	ands	r1, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	3b3c      	subs	r3, #60	; 0x3c
 800179e:	fa00 f203 	lsl.w	r2, r0, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	639a      	str	r2, [r3, #56]	; 0x38
 80017aa:	e01d      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	3b5a      	subs	r3, #90	; 0x5a
 80017c0:	221f      	movs	r2, #31
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	4019      	ands	r1, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	3b5a      	subs	r3, #90	; 0x5a
 80017dc:	fa00 f203 	lsl.w	r2, r0, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f040 80e5 	bne.w	80019c2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b09      	cmp	r3, #9
 80017fe:	d91c      	bls.n	800183a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6999      	ldr	r1, [r3, #24]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	3b1e      	subs	r3, #30
 8001812:	2207      	movs	r2, #7
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	4019      	ands	r1, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6898      	ldr	r0, [r3, #8]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	3b1e      	subs	r3, #30
 800182c:	fa00 f203 	lsl.w	r2, r0, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	619a      	str	r2, [r3, #24]
 8001838:	e019      	b.n	800186e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6959      	ldr	r1, [r3, #20]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	2207      	movs	r2, #7
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	4019      	ands	r1, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	6898      	ldr	r0, [r3, #8]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	fa00 f203 	lsl.w	r2, r0, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	08db      	lsrs	r3, r3, #3
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	3b01      	subs	r3, #1
 800188c:	2b03      	cmp	r3, #3
 800188e:	d84f      	bhi.n	8001930 <HAL_ADC_ConfigChannel+0x28c>
 8001890:	a201      	add	r2, pc, #4	; (adr r2, 8001898 <HAL_ADC_ConfigChannel+0x1f4>)
 8001892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001896:	bf00      	nop
 8001898:	080018a9 	.word	0x080018a9
 800189c:	080018cb 	.word	0x080018cb
 80018a0:	080018ed 	.word	0x080018ed
 80018a4:	0800190f 	.word	0x0800190f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018ae:	4b9a      	ldr	r3, [pc, #616]	; (8001b18 <HAL_ADC_ConfigChannel+0x474>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	0691      	lsls	r1, r2, #26
 80018b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018ba:	430a      	orrs	r2, r1
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018c6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018c8:	e07e      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018d0:	4b91      	ldr	r3, [pc, #580]	; (8001b18 <HAL_ADC_ConfigChannel+0x474>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	0691      	lsls	r1, r2, #26
 80018da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018dc:	430a      	orrs	r2, r1
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018e8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018ea:	e06d      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018f2:	4b89      	ldr	r3, [pc, #548]	; (8001b18 <HAL_ADC_ConfigChannel+0x474>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	0691      	lsls	r1, r2, #26
 80018fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018fe:	430a      	orrs	r2, r1
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800190a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800190c:	e05c      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001914:	4b80      	ldr	r3, [pc, #512]	; (8001b18 <HAL_ADC_ConfigChannel+0x474>)
 8001916:	4013      	ands	r3, r2
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	0691      	lsls	r1, r2, #26
 800191e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001920:	430a      	orrs	r2, r1
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800192c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800192e:	e04b      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	069b      	lsls	r3, r3, #26
 8001940:	429a      	cmp	r2, r3
 8001942:	d107      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001952:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800195a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	069b      	lsls	r3, r3, #26
 8001964:	429a      	cmp	r2, r3
 8001966:	d107      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001976:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800197e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	069b      	lsls	r3, r3, #26
 8001988:	429a      	cmp	r2, r3
 800198a:	d107      	bne.n	800199c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800199a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	069b      	lsls	r3, r3, #26
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d10a      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019be:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80019c0:	e001      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80019c2:	bf00      	nop
 80019c4:	e000      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80019c6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d108      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x344>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x344>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <HAL_ADC_ConfigChannel+0x346>
 80019e8:	2300      	movs	r3, #0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f040 8130 	bne.w	8001c50 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d00f      	beq.n	8001a18 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2201      	movs	r2, #1
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	400a      	ands	r2, r1
 8001a12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001a16:	e049      	b.n	8001aac <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2201      	movs	r2, #1
 8001a26:	409a      	lsls	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b09      	cmp	r3, #9
 8001a38:	d91c      	bls.n	8001a74 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6999      	ldr	r1, [r3, #24]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4613      	mov	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	3b1b      	subs	r3, #27
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	4019      	ands	r1, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	6898      	ldr	r0, [r3, #8]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	3b1b      	subs	r3, #27
 8001a66:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	619a      	str	r2, [r3, #24]
 8001a72:	e01b      	b.n	8001aac <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6959      	ldr	r1, [r3, #20]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	2207      	movs	r2, #7
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	4019      	ands	r1, r3
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	6898      	ldr	r0, [r3, #8]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ab4:	d004      	beq.n	8001ac0 <HAL_ADC_ConfigChannel+0x41c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a18      	ldr	r2, [pc, #96]	; (8001b1c <HAL_ADC_ConfigChannel+0x478>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d101      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x420>
 8001ac0:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <HAL_ADC_ConfigChannel+0x47c>)
 8001ac2:	e000      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x422>
 8001ac4:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <HAL_ADC_ConfigChannel+0x480>)
 8001ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b10      	cmp	r3, #16
 8001ace:	d105      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d015      	beq.n	8001b08 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ae0:	2b11      	cmp	r3, #17
 8001ae2:	d105      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00b      	beq.n	8001b08 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001af4:	2b12      	cmp	r3, #18
 8001af6:	f040 80ab 	bne.w	8001c50 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f040 80a4 	bne.w	8001c50 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b10:	d10a      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x484>
 8001b12:	4b02      	ldr	r3, [pc, #8]	; (8001b1c <HAL_ADC_ConfigChannel+0x478>)
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	e022      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x4ba>
 8001b18:	83fff000 	.word	0x83fff000
 8001b1c:	50000100 	.word	0x50000100
 8001b20:	50000300 	.word	0x50000300
 8001b24:	50000700 	.word	0x50000700
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a4e      	ldr	r2, [pc, #312]	; (8001c68 <HAL_ADC_ConfigChannel+0x5c4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d103      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x496>
 8001b32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	e011      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x4ba>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a4b      	ldr	r2, [pc, #300]	; (8001c6c <HAL_ADC_ConfigChannel+0x5c8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d102      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x4a6>
 8001b44:	4b4a      	ldr	r3, [pc, #296]	; (8001c70 <HAL_ADC_ConfigChannel+0x5cc>)
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	e009      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x4ba>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a48      	ldr	r2, [pc, #288]	; (8001c70 <HAL_ADC_ConfigChannel+0x5cc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d102      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x4b6>
 8001b54:	4b45      	ldr	r3, [pc, #276]	; (8001c6c <HAL_ADC_ConfigChannel+0x5c8>)
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	e001      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x4ba>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d108      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x4da>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x4da>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x4dc>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d150      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b84:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d010      	beq.n	8001bac <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d107      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x502>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x502>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x504>
 8001ba6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d13c      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b10      	cmp	r3, #16
 8001bb2:	d11d      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x54c>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bbc:	d118      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bca:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <HAL_ADC_ConfigChannel+0x5d0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a2a      	ldr	r2, [pc, #168]	; (8001c78 <HAL_ADC_ConfigChannel+0x5d4>)
 8001bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd4:	0c9a      	lsrs	r2, r3, #18
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001be0:	e002      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f9      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bee:	e02e      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b11      	cmp	r3, #17
 8001bf6:	d10b      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x56c>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c00:	d106      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001c0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c0c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c0e:	e01e      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b12      	cmp	r3, #18
 8001c16:	d11a      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c22:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c24:	e013      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f043 0220 	orr.w	r2, r3, #32
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c38:	e00a      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f043 0220 	orr.w	r2, r3, #32
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c4c:	e000      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c4e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	376c      	adds	r7, #108	; 0x6c
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	50000100 	.word	0x50000100
 8001c6c:	50000400 	.word	0x50000400
 8001c70:	50000500 	.word	0x50000500
 8001c74:	20000000 	.word	0x20000000
 8001c78:	431bde83 	.word	0x431bde83

08001c7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b099      	sub	sp, #100	; 0x64
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c94:	d102      	bne.n	8001c9c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001c96:	4b6c      	ldr	r3, [pc, #432]	; (8001e48 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	e01a      	b.n	8001cd2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a69      	ldr	r2, [pc, #420]	; (8001e48 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d103      	bne.n	8001cae <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001ca6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	e011      	b.n	8001cd2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a66      	ldr	r2, [pc, #408]	; (8001e4c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d102      	bne.n	8001cbe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001cb8:	4b65      	ldr	r3, [pc, #404]	; (8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	e009      	b.n	8001cd2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a63      	ldr	r2, [pc, #396]	; (8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d102      	bne.n	8001cce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001cc8:	4b60      	ldr	r3, [pc, #384]	; (8001e4c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	e001      	b.n	8001cd2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0b0      	b.n	8001e3e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e0a9      	b.n	8001e3e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f040 808d 	bne.w	8001e1c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f040 8086 	bne.w	8001e1c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d18:	d004      	beq.n	8001d24 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a4a      	ldr	r2, [pc, #296]	; (8001e48 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d101      	bne.n	8001d28 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001d24:	4b4b      	ldr	r3, [pc, #300]	; (8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001d26:	e000      	b.n	8001d2a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001d28:	4b4b      	ldr	r3, [pc, #300]	; (8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001d2a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d040      	beq.n	8001db6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d46:	035b      	lsls	r3, r3, #13
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d4e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d108      	bne.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001d70:	2300      	movs	r3, #0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d15c      	bne.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d107      	bne.n	8001d92 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001d92:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d14b      	bne.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001da0:	f023 030f 	bic.w	r3, r3, #15
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	6811      	ldr	r1, [r2, #0]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	6892      	ldr	r2, [r2, #8]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	431a      	orrs	r2, r3
 8001db0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001db2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001db4:	e03c      	b.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001db6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dc0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d108      	bne.n	8001de2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001de2:	2300      	movs	r3, #0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d123      	bne.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d107      	bne.n	8001e04 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001e04:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d112      	bne.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001e0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e12:	f023 030f 	bic.w	r3, r3, #15
 8001e16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e18:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e1a:	e009      	b.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f043 0220 	orr.w	r2, r3, #32
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001e2e:	e000      	b.n	8001e32 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e30:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3764      	adds	r7, #100	; 0x64
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	50000100 	.word	0x50000100
 8001e4c:	50000400 	.word	0x50000400
 8001e50:	50000500 	.word	0x50000500
 8001e54:	50000300 	.word	0x50000300
 8001e58:	50000700 	.word	0x50000700

08001e5c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d126      	bne.n	8001ec4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d115      	bne.n	8001ebc <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d111      	bne.n	8001ebc <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d105      	bne.n	8001ebc <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	f043 0201 	orr.w	r2, r3, #1
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f005 fd45 	bl	800794c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001ec2:	e004      	b.n	8001ece <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	4798      	blx	r3
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f7ff f8b5 	bl	8001054 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f10:	f043 0204 	orr.w	r2, r3, #4
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f7ff f8a4 	bl	8001066 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d108      	bne.n	8001f54 <ADC_Enable+0x2c>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <ADC_Enable+0x2c>
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <ADC_Enable+0x2e>
 8001f54:	2300      	movs	r3, #0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d143      	bne.n	8001fe2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <ADC_Enable+0xc4>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00d      	beq.n	8001f84 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	f043 0210 	orr.w	r2, r3, #16
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f78:	f043 0201 	orr.w	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e02f      	b.n	8001fe4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001f94:	f002 fa36 	bl	8004404 <HAL_GetTick>
 8001f98:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f9a:	e01b      	b.n	8001fd4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f9c:	f002 fa32 	bl	8004404 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d914      	bls.n	8001fd4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d00d      	beq.n	8001fd4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f043 0210 	orr.w	r2, r3, #16
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	f043 0201 	orr.w	r2, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e007      	b.n	8001fe4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d1dc      	bne.n	8001f9c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	8000003f 	.word	0x8000003f

08001ff0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b01      	cmp	r3, #1
 8002008:	d108      	bne.n	800201c <ADC_Disable+0x2c>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <ADC_Disable+0x2c>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <ADC_Disable+0x2e>
 800201c:	2300      	movs	r3, #0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d047      	beq.n	80020b2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 030d 	and.w	r3, r3, #13
 800202c:	2b01      	cmp	r3, #1
 800202e:	d10f      	bne.n	8002050 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0202 	orr.w	r2, r2, #2
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2203      	movs	r2, #3
 8002046:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002048:	f002 f9dc 	bl	8004404 <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800204e:	e029      	b.n	80020a4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f043 0210 	orr.w	r2, r3, #16
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	f043 0201 	orr.w	r2, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e023      	b.n	80020b4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800206c:	f002 f9ca 	bl	8004404 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d914      	bls.n	80020a4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b01      	cmp	r3, #1
 8002086:	d10d      	bne.n	80020a4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	f043 0210 	orr.w	r2, r3, #16
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002098:	f043 0201 	orr.w	r2, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e007      	b.n	80020b4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d0dc      	beq.n	800206c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020bc:	b480      	push	{r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ca:	e160      	b.n	800238e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2101      	movs	r1, #1
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	4013      	ands	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 8152 	beq.w	8002388 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d005      	beq.n	80020fc <HAL_GPIO_Init+0x40>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d130      	bne.n	800215e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002132:	2201      	movs	r2, #1
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	091b      	lsrs	r3, r3, #4
 8002148:	f003 0201 	and.w	r2, r3, #1
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	2b03      	cmp	r3, #3
 8002168:	d017      	beq.n	800219a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	2203      	movs	r2, #3
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d123      	bne.n	80021ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	08da      	lsrs	r2, r3, #3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3208      	adds	r2, #8
 80021ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	220f      	movs	r2, #15
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	08da      	lsrs	r2, r3, #3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3208      	adds	r2, #8
 80021e8:	6939      	ldr	r1, [r7, #16]
 80021ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	2203      	movs	r2, #3
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0203 	and.w	r2, r3, #3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 80ac 	beq.w	8002388 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002230:	4b5e      	ldr	r3, [pc, #376]	; (80023ac <HAL_GPIO_Init+0x2f0>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	4a5d      	ldr	r2, [pc, #372]	; (80023ac <HAL_GPIO_Init+0x2f0>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6193      	str	r3, [r2, #24]
 800223c:	4b5b      	ldr	r3, [pc, #364]	; (80023ac <HAL_GPIO_Init+0x2f0>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002248:	4a59      	ldr	r2, [pc, #356]	; (80023b0 <HAL_GPIO_Init+0x2f4>)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	3302      	adds	r3, #2
 8002250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	220f      	movs	r2, #15
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002272:	d025      	beq.n	80022c0 <HAL_GPIO_Init+0x204>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a4f      	ldr	r2, [pc, #316]	; (80023b4 <HAL_GPIO_Init+0x2f8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d01f      	beq.n	80022bc <HAL_GPIO_Init+0x200>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a4e      	ldr	r2, [pc, #312]	; (80023b8 <HAL_GPIO_Init+0x2fc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d019      	beq.n	80022b8 <HAL_GPIO_Init+0x1fc>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a4d      	ldr	r2, [pc, #308]	; (80023bc <HAL_GPIO_Init+0x300>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d013      	beq.n	80022b4 <HAL_GPIO_Init+0x1f8>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a4c      	ldr	r2, [pc, #304]	; (80023c0 <HAL_GPIO_Init+0x304>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d00d      	beq.n	80022b0 <HAL_GPIO_Init+0x1f4>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a4b      	ldr	r2, [pc, #300]	; (80023c4 <HAL_GPIO_Init+0x308>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d007      	beq.n	80022ac <HAL_GPIO_Init+0x1f0>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a4a      	ldr	r2, [pc, #296]	; (80023c8 <HAL_GPIO_Init+0x30c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d101      	bne.n	80022a8 <HAL_GPIO_Init+0x1ec>
 80022a4:	2306      	movs	r3, #6
 80022a6:	e00c      	b.n	80022c2 <HAL_GPIO_Init+0x206>
 80022a8:	2307      	movs	r3, #7
 80022aa:	e00a      	b.n	80022c2 <HAL_GPIO_Init+0x206>
 80022ac:	2305      	movs	r3, #5
 80022ae:	e008      	b.n	80022c2 <HAL_GPIO_Init+0x206>
 80022b0:	2304      	movs	r3, #4
 80022b2:	e006      	b.n	80022c2 <HAL_GPIO_Init+0x206>
 80022b4:	2303      	movs	r3, #3
 80022b6:	e004      	b.n	80022c2 <HAL_GPIO_Init+0x206>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e002      	b.n	80022c2 <HAL_GPIO_Init+0x206>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <HAL_GPIO_Init+0x206>
 80022c0:	2300      	movs	r3, #0
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	f002 0203 	and.w	r2, r2, #3
 80022c8:	0092      	lsls	r2, r2, #2
 80022ca:	4093      	lsls	r3, r2
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022d2:	4937      	ldr	r1, [pc, #220]	; (80023b0 <HAL_GPIO_Init+0x2f4>)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	089b      	lsrs	r3, r3, #2
 80022d8:	3302      	adds	r3, #2
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e0:	4b3a      	ldr	r3, [pc, #232]	; (80023cc <HAL_GPIO_Init+0x310>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002304:	4a31      	ldr	r2, [pc, #196]	; (80023cc <HAL_GPIO_Init+0x310>)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800230a:	4b30      	ldr	r3, [pc, #192]	; (80023cc <HAL_GPIO_Init+0x310>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	43db      	mvns	r3, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800232e:	4a27      	ldr	r2, [pc, #156]	; (80023cc <HAL_GPIO_Init+0x310>)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002334:	4b25      	ldr	r3, [pc, #148]	; (80023cc <HAL_GPIO_Init+0x310>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	43db      	mvns	r3, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002358:	4a1c      	ldr	r2, [pc, #112]	; (80023cc <HAL_GPIO_Init+0x310>)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800235e:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <HAL_GPIO_Init+0x310>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002382:	4a12      	ldr	r2, [pc, #72]	; (80023cc <HAL_GPIO_Init+0x310>)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	3301      	adds	r3, #1
 800238c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	fa22 f303 	lsr.w	r3, r2, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	f47f ae97 	bne.w	80020cc <HAL_GPIO_Init+0x10>
  }
}
 800239e:	bf00      	nop
 80023a0:	bf00      	nop
 80023a2:	371c      	adds	r7, #28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40010000 	.word	0x40010000
 80023b4:	48000400 	.word	0x48000400
 80023b8:	48000800 	.word	0x48000800
 80023bc:	48000c00 	.word	0x48000c00
 80023c0:	48001000 	.word	0x48001000
 80023c4:	48001400 	.word	0x48001400
 80023c8:	48001800 	.word	0x48001800
 80023cc:	40010400 	.word	0x40010400

080023d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	887b      	ldrh	r3, [r7, #2]
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
 80023ec:	e001      	b.n	80023f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr

080023fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	460b      	mov	r3, r1
 8002408:	807b      	strh	r3, [r7, #2]
 800240a:	4613      	mov	r3, r2
 800240c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800240e:	787b      	ldrb	r3, [r7, #1]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002414:	887a      	ldrh	r2, [r7, #2]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800241a:	e002      	b.n	8002422 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800241c:	887a      	ldrh	r2, [r7, #2]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	4013      	ands	r3, r2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d006      	beq.n	8002450 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002442:	4a05      	ldr	r2, [pc, #20]	; (8002458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	4618      	mov	r0, r3
 800244c:	f001 ff70 	bl	8004330 <HAL_GPIO_EXTI_Callback>
  }
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40010400 	.word	0x40010400

0800245c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e037      	b.n	80024e2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2202      	movs	r2, #2
 8002476:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002488:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800248c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002496:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f9b5 	bl	8002834 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}  
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b086      	sub	sp, #24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_DMA_Start_IT+0x20>
 8002506:	2302      	movs	r3, #2
 8002508:	e04a      	b.n	80025a0 <HAL_DMA_Start_IT+0xb6>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002518:	2b01      	cmp	r3, #1
 800251a:	d13a      	bne.n	8002592 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0201 	bic.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	68b9      	ldr	r1, [r7, #8]
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f94a 	bl	80027da <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 020e 	orr.w	r2, r2, #14
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	e00f      	b.n	8002580 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 020a 	orr.w	r2, r2, #10
 800256e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0204 	bic.w	r2, r2, #4
 800257e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	e005      	b.n	800259e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800259a:	2302      	movs	r3, #2
 800259c:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800259e:	7dfb      	ldrb	r3, [r7, #23]
} 
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d008      	beq.n	80025cc <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2204      	movs	r2, #4
 80025be:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e020      	b.n	800260e <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 020e 	bic.w	r2, r2, #14
 80025da:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f4:	2101      	movs	r1, #1
 80025f6:	fa01 f202 	lsl.w	r2, r1, r2
 80025fa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800262a:	2b02      	cmp	r3, #2
 800262c:	d005      	beq.n	800263a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2204      	movs	r2, #4
 8002632:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
 8002638:	e027      	b.n	800268a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 020e 	bic.w	r2, r2, #14
 8002648:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0201 	bic.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002662:	2101      	movs	r1, #1
 8002664:	fa01 f202 	lsl.w	r2, r1, r2
 8002668:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	4798      	blx	r3
    } 
  }
  return status;
 800268a:	7bfb      	ldrb	r3, [r7, #15]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	2204      	movs	r2, #4
 80026b2:	409a      	lsls	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d024      	beq.n	8002706 <HAL_DMA_IRQHandler+0x72>
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d01f      	beq.n	8002706 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d107      	bne.n	80026e4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0204 	bic.w	r2, r2, #4
 80026e2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ec:	2104      	movs	r1, #4
 80026ee:	fa01 f202 	lsl.w	r2, r1, r2
 80026f2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d06a      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002704:	e065      	b.n	80027d2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	2202      	movs	r2, #2
 800270c:	409a      	lsls	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4013      	ands	r3, r2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d02c      	beq.n	8002770 <HAL_DMA_IRQHandler+0xdc>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d027      	beq.n	8002770 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10b      	bne.n	8002746 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 020a 	bic.w	r2, r2, #10
 800273c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274e:	2102      	movs	r1, #2
 8002750:	fa01 f202 	lsl.w	r2, r1, r2
 8002754:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	2b00      	cmp	r3, #0
 8002764:	d035      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800276e:	e030      	b.n	80027d2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	2208      	movs	r2, #8
 8002776:	409a      	lsls	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d028      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x13e>
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d023      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 020e 	bic.w	r2, r2, #14
 8002798:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a2:	2101      	movs	r1, #1
 80027a4:	fa01 f202 	lsl.w	r2, r1, r2
 80027a8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d004      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	4798      	blx	r3
    }
  }
}  
 80027d0:	e7ff      	b.n	80027d2 <HAL_DMA_IRQHandler+0x13e>
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027da:	b480      	push	{r7}
 80027dc:	b085      	sub	sp, #20
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f0:	2101      	movs	r1, #1
 80027f2:	fa01 f202 	lsl.w	r2, r1, r2
 80027f6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b10      	cmp	r3, #16
 8002806:	d108      	bne.n	800281a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002818:	e007      	b.n	800282a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	60da      	str	r2, [r3, #12]
}
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	4b13      	ldr	r3, [pc, #76]	; (8002890 <DMA_CalcBaseAndBitshift+0x5c>)
 8002844:	429a      	cmp	r2, r3
 8002846:	d80f      	bhi.n	8002868 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	4b11      	ldr	r3, [pc, #68]	; (8002894 <DMA_CalcBaseAndBitshift+0x60>)
 8002850:	4413      	add	r3, r2
 8002852:	4a11      	ldr	r2, [pc, #68]	; (8002898 <DMA_CalcBaseAndBitshift+0x64>)
 8002854:	fba2 2303 	umull	r2, r3, r2, r3
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	009a      	lsls	r2, r3, #2
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a0e      	ldr	r2, [pc, #56]	; (800289c <DMA_CalcBaseAndBitshift+0x68>)
 8002864:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002866:	e00e      	b.n	8002886 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <DMA_CalcBaseAndBitshift+0x6c>)
 8002870:	4413      	add	r3, r2
 8002872:	4a09      	ldr	r2, [pc, #36]	; (8002898 <DMA_CalcBaseAndBitshift+0x64>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	009a      	lsls	r2, r3, #2
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a08      	ldr	r2, [pc, #32]	; (80028a4 <DMA_CalcBaseAndBitshift+0x70>)
 8002884:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	40020407 	.word	0x40020407
 8002894:	bffdfff8 	.word	0xbffdfff8
 8002898:	cccccccd 	.word	0xcccccccd
 800289c:	40020000 	.word	0x40020000
 80028a0:	bffdfbf8 	.word	0xbffdfbf8
 80028a4:	40020400 	.word	0x40020400

080028a8 <Gpt_Init>:

static void Gpt_TIM3_Init(void);
static void Gpt_Error_Handler(void);

void Gpt_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
	Gpt_TIM3_Init();
 80028ac:	f000 f8c0 	bl	8002a30 <Gpt_TIM3_Init>
	Gpt_InitDone = 1u;
 80028b0:	4b02      	ldr	r3, [pc, #8]	; (80028bc <Gpt_Init+0x14>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	701a      	strb	r2, [r3, #0]
}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000110 	.word	0x20000110

080028c0 <Gpt_TIM3_Start_IT>:

void Gpt_TIM3_Start_IT(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
	if(1u == Gpt_InitDone)
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <Gpt_TIM3_Start_IT+0x18>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d102      	bne.n	80028d2 <Gpt_TIM3_Start_IT+0x12>
	{
		HAL_TIM_Base_Start_IT(&htim3);
 80028cc:	4803      	ldr	r0, [pc, #12]	; (80028dc <Gpt_TIM3_Start_IT+0x1c>)
 80028ce:	f000 f959 	bl	8002b84 <HAL_TIM_Base_Start_IT>
	}
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000110 	.word	0x20000110
 80028dc:	200000c4 	.word	0x200000c4

080028e0 <HAL_TIM_PeriodElapsedCallback>:
		HAL_TIM_Base_Stop_IT(&htim3);
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	//TODO: Remove and redirect timer callback
	if(tim3_count == 9999)
 80028e8:	4b47      	ldr	r3, [pc, #284]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d115      	bne.n	8002920 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		tim3_count = 0u;
 80028f4:	4b44      	ldr	r3, [pc, #272]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
		tim3_5count = 0u;
 80028fa:	4b44      	ldr	r3, [pc, #272]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
		tim3_10count = 0u;
 8002900:	4b43      	ldr	r3, [pc, #268]	; (8002a10 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
		tim3_20count = 0u;
 8002906:	4b43      	ldr	r3, [pc, #268]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
		tim3_50count = 0u;
 800290c:	4b42      	ldr	r3, [pc, #264]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
		tim3_100count = 0u;
 8002912:	4b42      	ldr	r3, [pc, #264]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
		tim3_500count = 0u;
 8002918:	4b41      	ldr	r3, [pc, #260]	; (8002a20 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	e004      	b.n	800292a <HAL_TIM_PeriodElapsedCallback+0x4a>
	}
	else
	{
		tim3_count++;
 8002920:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3301      	adds	r3, #1
 8002926:	4a38      	ldr	r2, [pc, #224]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002928:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 5) == 0u)
 800292a:	4b37      	ldr	r3, [pc, #220]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800292c:	6819      	ldr	r1, [r3, #0]
 800292e:	4b3d      	ldr	r3, [pc, #244]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002930:	fba3 2301 	umull	r2, r3, r3, r1
 8002934:	089a      	lsrs	r2, r3, #2
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	1aca      	subs	r2, r1, r3
 800293e:	2a00      	cmp	r2, #0
 8002940:	d104      	bne.n	800294c <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		tim3_5count++;
 8002942:	4b32      	ldr	r3, [pc, #200]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	3301      	adds	r3, #1
 8002948:	4a30      	ldr	r2, [pc, #192]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800294a:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 10) == 0u)
 800294c:	4b2e      	ldr	r3, [pc, #184]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800294e:	6819      	ldr	r1, [r3, #0]
 8002950:	4b34      	ldr	r3, [pc, #208]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002952:	fba3 2301 	umull	r2, r3, r3, r1
 8002956:	08da      	lsrs	r2, r3, #3
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	1aca      	subs	r2, r1, r3
 8002962:	2a00      	cmp	r2, #0
 8002964:	d104      	bne.n	8002970 <HAL_TIM_PeriodElapsedCallback+0x90>
	{
		tim3_10count++;
 8002966:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	3301      	adds	r3, #1
 800296c:	4a28      	ldr	r2, [pc, #160]	; (8002a10 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800296e:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 20) == 0u)
 8002970:	4b25      	ldr	r3, [pc, #148]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002972:	6819      	ldr	r1, [r3, #0]
 8002974:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002976:	fba3 2301 	umull	r2, r3, r3, r1
 800297a:	091a      	lsrs	r2, r3, #4
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	1aca      	subs	r2, r1, r3
 8002986:	2a00      	cmp	r2, #0
 8002988:	d104      	bne.n	8002994 <HAL_TIM_PeriodElapsedCallback+0xb4>
	{
		tim3_20count++;
 800298a:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3301      	adds	r3, #1
 8002990:	4a20      	ldr	r2, [pc, #128]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002992:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 50) == 0u)
 8002994:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b23      	ldr	r3, [pc, #140]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800299a:	fba3 1302 	umull	r1, r3, r3, r2
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	2132      	movs	r1, #50	; 0x32
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d104      	bne.n	80029b6 <HAL_TIM_PeriodElapsedCallback+0xd6>
	{
		tim3_50count++;
 80029ac:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3301      	adds	r3, #1
 80029b2:	4a19      	ldr	r2, [pc, #100]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80029b4:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 100) == 0u)
 80029b6:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80029bc:	fba3 1302 	umull	r1, r3, r3, r2
 80029c0:	095b      	lsrs	r3, r3, #5
 80029c2:	2164      	movs	r1, #100	; 0x64
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d104      	bne.n	80029d8 <HAL_TIM_PeriodElapsedCallback+0xf8>
	{
		tim3_100count++;
 80029ce:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3301      	adds	r3, #1
 80029d4:	4a11      	ldr	r2, [pc, #68]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80029d6:	6013      	str	r3, [r2, #0]
	}

	if((tim3_count % 500) == 0u)
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80029de:	fba3 1302 	umull	r1, r3, r3, r2
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d104      	bne.n	80029fc <HAL_TIM_PeriodElapsedCallback+0x11c>
	{
		tim3_500count++;
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	3301      	adds	r3, #1
 80029f8:	4a09      	ldr	r2, [pc, #36]	; (8002a20 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80029fa:	6013      	str	r3, [r2, #0]
	}
	//HAL_IncTick();
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	200000a8 	.word	0x200000a8
 8002a0c:	200000ac 	.word	0x200000ac
 8002a10:	200000b0 	.word	0x200000b0
 8002a14:	200000b4 	.word	0x200000b4
 8002a18:	200000b8 	.word	0x200000b8
 8002a1c:	200000bc 	.word	0x200000bc
 8002a20:	200000c0 	.word	0x200000c0
 8002a24:	cccccccd 	.word	0xcccccccd
 8002a28:	51eb851f 	.word	0x51eb851f
 8002a2c:	10624dd3 	.word	0x10624dd3

08002a30 <Gpt_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void Gpt_TIM3_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a36:	f107 0310 	add.w	r3, r7, #16
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	605a      	str	r2, [r3, #4]
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <Gpt_TIM3_Init+0x94>)
 8002a50:	4a1d      	ldr	r2, [pc, #116]	; (8002ac8 <Gpt_TIM3_Init+0x98>)
 8002a52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <Gpt_TIM3_Init+0x94>)
 8002a56:	220a      	movs	r2, #10
 8002a58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <Gpt_TIM3_Init+0x94>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 8002a60:	4b18      	ldr	r3, [pc, #96]	; (8002ac4 <Gpt_TIM3_Init+0x94>)
 8002a62:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002a66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a68:	4b16      	ldr	r3, [pc, #88]	; (8002ac4 <Gpt_TIM3_Init+0x94>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a6e:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <Gpt_TIM3_Init+0x94>)
 8002a70:	2280      	movs	r2, #128	; 0x80
 8002a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a74:	4813      	ldr	r0, [pc, #76]	; (8002ac4 <Gpt_TIM3_Init+0x94>)
 8002a76:	f000 f82e 	bl	8002ad6 <HAL_TIM_Base_Init>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <Gpt_TIM3_Init+0x54>
  {
	  Gpt_Error_Handler();
 8002a80:	f000 f824 	bl	8002acc <Gpt_Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a8a:	f107 0310 	add.w	r3, r7, #16
 8002a8e:	4619      	mov	r1, r3
 8002a90:	480c      	ldr	r0, [pc, #48]	; (8002ac4 <Gpt_TIM3_Init+0x94>)
 8002a92:	f000 fc87 	bl	80033a4 <HAL_TIM_ConfigClockSource>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <Gpt_TIM3_Init+0x70>
  {
	  Gpt_Error_Handler();
 8002a9c:	f000 f816 	bl	8002acc <Gpt_Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4805      	ldr	r0, [pc, #20]	; (8002ac4 <Gpt_TIM3_Init+0x94>)
 8002aae:	f001 f9bd 	bl	8003e2c <HAL_TIMEx_MasterConfigSynchronization>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <Gpt_TIM3_Init+0x8c>
  {
	  Gpt_Error_Handler();
 8002ab8:	f000 f808 	bl	8002acc <Gpt_Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002abc:	bf00      	nop
 8002abe:	3720      	adds	r7, #32
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	200000c4 	.word	0x200000c4
 8002ac8:	40000400 	.word	0x40000400

08002acc <Gpt_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Gpt_Error_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad0:	b672      	cpsid	i
}
 8002ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ad4:	e7fe      	b.n	8002ad4 <Gpt_Error_Handler+0x8>

08002ad6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e049      	b.n	8002b7c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f001 febb 	bl	8004878 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2202      	movs	r2, #2
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3304      	adds	r3, #4
 8002b12:	4619      	mov	r1, r3
 8002b14:	4610      	mov	r0, r2
 8002b16:	f000 fd33 	bl	8003580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d001      	beq.n	8002b9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e04f      	b.n	8002c3c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a23      	ldr	r2, [pc, #140]	; (8002c48 <HAL_TIM_Base_Start_IT+0xc4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d01d      	beq.n	8002bfa <HAL_TIM_Base_Start_IT+0x76>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc6:	d018      	beq.n	8002bfa <HAL_TIM_Base_Start_IT+0x76>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1f      	ldr	r2, [pc, #124]	; (8002c4c <HAL_TIM_Base_Start_IT+0xc8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d013      	beq.n	8002bfa <HAL_TIM_Base_Start_IT+0x76>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1e      	ldr	r2, [pc, #120]	; (8002c50 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00e      	beq.n	8002bfa <HAL_TIM_Base_Start_IT+0x76>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1c      	ldr	r2, [pc, #112]	; (8002c54 <HAL_TIM_Base_Start_IT+0xd0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d009      	beq.n	8002bfa <HAL_TIM_Base_Start_IT+0x76>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1b      	ldr	r2, [pc, #108]	; (8002c58 <HAL_TIM_Base_Start_IT+0xd4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d004      	beq.n	8002bfa <HAL_TIM_Base_Start_IT+0x76>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a19      	ldr	r2, [pc, #100]	; (8002c5c <HAL_TIM_Base_Start_IT+0xd8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d115      	bne.n	8002c26 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	4b17      	ldr	r3, [pc, #92]	; (8002c60 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b06      	cmp	r3, #6
 8002c0a:	d015      	beq.n	8002c38 <HAL_TIM_Base_Start_IT+0xb4>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c12:	d011      	beq.n	8002c38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c24:	e008      	b.n	8002c38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	e000      	b.n	8002c3a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40012c00 	.word	0x40012c00
 8002c4c:	40000400 	.word	0x40000400
 8002c50:	40000800 	.word	0x40000800
 8002c54:	40013400 	.word	0x40013400
 8002c58:	40014000 	.word	0x40014000
 8002c5c:	40015000 	.word	0x40015000
 8002c60:	00010007 	.word	0x00010007

08002c64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e049      	b.n	8002d0a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f841 	bl	8002d12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	f000 fc6c 	bl	8003580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d109      	bne.n	8002d48 <HAL_TIM_PWM_Start+0x24>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	bf14      	ite	ne
 8002d40:	2301      	movne	r3, #1
 8002d42:	2300      	moveq	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	e03c      	b.n	8002dc2 <HAL_TIM_PWM_Start+0x9e>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d109      	bne.n	8002d62 <HAL_TIM_PWM_Start+0x3e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	bf14      	ite	ne
 8002d5a:	2301      	movne	r3, #1
 8002d5c:	2300      	moveq	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	e02f      	b.n	8002dc2 <HAL_TIM_PWM_Start+0x9e>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d109      	bne.n	8002d7c <HAL_TIM_PWM_Start+0x58>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	bf14      	ite	ne
 8002d74:	2301      	movne	r3, #1
 8002d76:	2300      	moveq	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	e022      	b.n	8002dc2 <HAL_TIM_PWM_Start+0x9e>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2b0c      	cmp	r3, #12
 8002d80:	d109      	bne.n	8002d96 <HAL_TIM_PWM_Start+0x72>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	bf14      	ite	ne
 8002d8e:	2301      	movne	r3, #1
 8002d90:	2300      	moveq	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	e015      	b.n	8002dc2 <HAL_TIM_PWM_Start+0x9e>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d109      	bne.n	8002db0 <HAL_TIM_PWM_Start+0x8c>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	bf14      	ite	ne
 8002da8:	2301      	movne	r3, #1
 8002daa:	2300      	moveq	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	e008      	b.n	8002dc2 <HAL_TIM_PWM_Start+0x9e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	bf14      	ite	ne
 8002dbc:	2301      	movne	r3, #1
 8002dbe:	2300      	moveq	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0a1      	b.n	8002f0e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d104      	bne.n	8002dda <HAL_TIM_PWM_Start+0xb6>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd8:	e023      	b.n	8002e22 <HAL_TIM_PWM_Start+0xfe>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d104      	bne.n	8002dea <HAL_TIM_PWM_Start+0xc6>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002de8:	e01b      	b.n	8002e22 <HAL_TIM_PWM_Start+0xfe>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d104      	bne.n	8002dfa <HAL_TIM_PWM_Start+0xd6>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002df8:	e013      	b.n	8002e22 <HAL_TIM_PWM_Start+0xfe>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b0c      	cmp	r3, #12
 8002dfe:	d104      	bne.n	8002e0a <HAL_TIM_PWM_Start+0xe6>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e08:	e00b      	b.n	8002e22 <HAL_TIM_PWM_Start+0xfe>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b10      	cmp	r3, #16
 8002e0e:	d104      	bne.n	8002e1a <HAL_TIM_PWM_Start+0xf6>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e18:	e003      	b.n	8002e22 <HAL_TIM_PWM_Start+0xfe>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2201      	movs	r2, #1
 8002e28:	6839      	ldr	r1, [r7, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 ffda 	bl	8003de4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a38      	ldr	r2, [pc, #224]	; (8002f18 <HAL_TIM_PWM_Start+0x1f4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d018      	beq.n	8002e6c <HAL_TIM_PWM_Start+0x148>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a37      	ldr	r2, [pc, #220]	; (8002f1c <HAL_TIM_PWM_Start+0x1f8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d013      	beq.n	8002e6c <HAL_TIM_PWM_Start+0x148>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a35      	ldr	r2, [pc, #212]	; (8002f20 <HAL_TIM_PWM_Start+0x1fc>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00e      	beq.n	8002e6c <HAL_TIM_PWM_Start+0x148>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a34      	ldr	r2, [pc, #208]	; (8002f24 <HAL_TIM_PWM_Start+0x200>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d009      	beq.n	8002e6c <HAL_TIM_PWM_Start+0x148>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a32      	ldr	r2, [pc, #200]	; (8002f28 <HAL_TIM_PWM_Start+0x204>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d004      	beq.n	8002e6c <HAL_TIM_PWM_Start+0x148>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a31      	ldr	r2, [pc, #196]	; (8002f2c <HAL_TIM_PWM_Start+0x208>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d101      	bne.n	8002e70 <HAL_TIM_PWM_Start+0x14c>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <HAL_TIM_PWM_Start+0x14e>
 8002e70:	2300      	movs	r3, #0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d007      	beq.n	8002e86 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a23      	ldr	r2, [pc, #140]	; (8002f18 <HAL_TIM_PWM_Start+0x1f4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d01d      	beq.n	8002ecc <HAL_TIM_PWM_Start+0x1a8>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e98:	d018      	beq.n	8002ecc <HAL_TIM_PWM_Start+0x1a8>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a24      	ldr	r2, [pc, #144]	; (8002f30 <HAL_TIM_PWM_Start+0x20c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d013      	beq.n	8002ecc <HAL_TIM_PWM_Start+0x1a8>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a22      	ldr	r2, [pc, #136]	; (8002f34 <HAL_TIM_PWM_Start+0x210>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00e      	beq.n	8002ecc <HAL_TIM_PWM_Start+0x1a8>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1a      	ldr	r2, [pc, #104]	; (8002f1c <HAL_TIM_PWM_Start+0x1f8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d009      	beq.n	8002ecc <HAL_TIM_PWM_Start+0x1a8>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a18      	ldr	r2, [pc, #96]	; (8002f20 <HAL_TIM_PWM_Start+0x1fc>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d004      	beq.n	8002ecc <HAL_TIM_PWM_Start+0x1a8>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <HAL_TIM_PWM_Start+0x208>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d115      	bne.n	8002ef8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <HAL_TIM_PWM_Start+0x214>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d015      	beq.n	8002f0a <HAL_TIM_PWM_Start+0x1e6>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee4:	d011      	beq.n	8002f0a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0201 	orr.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef6:	e008      	b.n	8002f0a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	e000      	b.n	8002f0c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40012c00 	.word	0x40012c00
 8002f1c:	40013400 	.word	0x40013400
 8002f20:	40014000 	.word	0x40014000
 8002f24:	40014400 	.word	0x40014400
 8002f28:	40014800 	.word	0x40014800
 8002f2c:	40015000 	.word	0x40015000
 8002f30:	40000400 	.word	0x40000400
 8002f34:	40000800 	.word	0x40000800
 8002f38:	00010007 	.word	0x00010007

08002f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d122      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d11b      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0202 	mvn.w	r2, #2
 8002f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fae2 	bl	8003548 <HAL_TIM_IC_CaptureCallback>
 8002f84:	e005      	b.n	8002f92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fad5 	bl	8003536 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fae4 	bl	800355a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d122      	bne.n	8002fec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d11b      	bne.n	8002fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0204 	mvn.w	r2, #4
 8002fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fab8 	bl	8003548 <HAL_TIM_IC_CaptureCallback>
 8002fd8:	e005      	b.n	8002fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 faab 	bl	8003536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 faba 	bl	800355a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d122      	bne.n	8003040 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b08      	cmp	r3, #8
 8003006:	d11b      	bne.n	8003040 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0208 	mvn.w	r2, #8
 8003010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2204      	movs	r2, #4
 8003016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fa8e 	bl	8003548 <HAL_TIM_IC_CaptureCallback>
 800302c:	e005      	b.n	800303a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fa81 	bl	8003536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fa90 	bl	800355a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b10      	cmp	r3, #16
 800304c:	d122      	bne.n	8003094 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b10      	cmp	r3, #16
 800305a:	d11b      	bne.n	8003094 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0210 	mvn.w	r2, #16
 8003064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2208      	movs	r2, #8
 800306a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fa64 	bl	8003548 <HAL_TIM_IC_CaptureCallback>
 8003080:	e005      	b.n	800308e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fa57 	bl	8003536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fa66 	bl	800355a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d10e      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d107      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0201 	mvn.w	r2, #1
 80030b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff fc10 	bl	80028e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ca:	2b80      	cmp	r3, #128	; 0x80
 80030cc:	d10e      	bne.n	80030ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d8:	2b80      	cmp	r3, #128	; 0x80
 80030da:	d107      	bne.n	80030ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 ff35 	bl	8003f56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030fa:	d10e      	bne.n	800311a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003106:	2b80      	cmp	r3, #128	; 0x80
 8003108:	d107      	bne.n	800311a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 ff27 	bl	8003f68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003124:	2b40      	cmp	r3, #64	; 0x40
 8003126:	d10e      	bne.n	8003146 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003132:	2b40      	cmp	r3, #64	; 0x40
 8003134:	d107      	bne.n	8003146 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800313e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fa13 	bl	800356c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b20      	cmp	r3, #32
 8003152:	d10e      	bne.n	8003172 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b20      	cmp	r3, #32
 8003160:	d107      	bne.n	8003172 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f06f 0220 	mvn.w	r2, #32
 800316a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fee9 	bl	8003f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003196:	2302      	movs	r3, #2
 8003198:	e0ff      	b.n	800339a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b14      	cmp	r3, #20
 80031a6:	f200 80f0 	bhi.w	800338a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80031aa:	a201      	add	r2, pc, #4	; (adr r2, 80031b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b0:	08003205 	.word	0x08003205
 80031b4:	0800338b 	.word	0x0800338b
 80031b8:	0800338b 	.word	0x0800338b
 80031bc:	0800338b 	.word	0x0800338b
 80031c0:	08003245 	.word	0x08003245
 80031c4:	0800338b 	.word	0x0800338b
 80031c8:	0800338b 	.word	0x0800338b
 80031cc:	0800338b 	.word	0x0800338b
 80031d0:	08003287 	.word	0x08003287
 80031d4:	0800338b 	.word	0x0800338b
 80031d8:	0800338b 	.word	0x0800338b
 80031dc:	0800338b 	.word	0x0800338b
 80031e0:	080032c7 	.word	0x080032c7
 80031e4:	0800338b 	.word	0x0800338b
 80031e8:	0800338b 	.word	0x0800338b
 80031ec:	0800338b 	.word	0x0800338b
 80031f0:	08003309 	.word	0x08003309
 80031f4:	0800338b 	.word	0x0800338b
 80031f8:	0800338b 	.word	0x0800338b
 80031fc:	0800338b 	.word	0x0800338b
 8003200:	08003349 	.word	0x08003349
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fa54 	bl	80036b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699a      	ldr	r2, [r3, #24]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0208 	orr.w	r2, r2, #8
 800321e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699a      	ldr	r2, [r3, #24]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0204 	bic.w	r2, r2, #4
 800322e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6999      	ldr	r1, [r3, #24]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	619a      	str	r2, [r3, #24]
      break;
 8003242:	e0a5      	b.n	8003390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68b9      	ldr	r1, [r7, #8]
 800324a:	4618      	mov	r0, r3
 800324c:	f000 face 	bl	80037ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699a      	ldr	r2, [r3, #24]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800325e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800326e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6999      	ldr	r1, [r3, #24]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	021a      	lsls	r2, r3, #8
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	619a      	str	r2, [r3, #24]
      break;
 8003284:	e084      	b.n	8003390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68b9      	ldr	r1, [r7, #8]
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fb3f 	bl	8003910 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69da      	ldr	r2, [r3, #28]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 0208 	orr.w	r2, r2, #8
 80032a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69da      	ldr	r2, [r3, #28]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0204 	bic.w	r2, r2, #4
 80032b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69d9      	ldr	r1, [r3, #28]
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	61da      	str	r2, [r3, #28]
      break;
 80032c4:	e064      	b.n	8003390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fbb1 	bl	8003a34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69da      	ldr	r2, [r3, #28]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69da      	ldr	r2, [r3, #28]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	69d9      	ldr	r1, [r3, #28]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	021a      	lsls	r2, r3, #8
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	61da      	str	r2, [r3, #28]
      break;
 8003306:	e043      	b.n	8003390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fbfe 	bl	8003b10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0208 	orr.w	r2, r2, #8
 8003322:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0204 	bic.w	r2, r2, #4
 8003332:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003346:	e023      	b.n	8003390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fc48 	bl	8003be4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003362:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003372:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	021a      	lsls	r2, r3, #8
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003388:	e002      	b.n	8003390 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	75fb      	strb	r3, [r7, #23]
      break;
 800338e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003398:	7dfb      	ldrb	r3, [r7, #23]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop

080033a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_TIM_ConfigClockSource+0x1c>
 80033bc:	2302      	movs	r3, #2
 80033be:	e0b6      	b.n	800352e <HAL_TIM_ConfigClockSource+0x18a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033fc:	d03e      	beq.n	800347c <HAL_TIM_ConfigClockSource+0xd8>
 80033fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003402:	f200 8087 	bhi.w	8003514 <HAL_TIM_ConfigClockSource+0x170>
 8003406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340a:	f000 8086 	beq.w	800351a <HAL_TIM_ConfigClockSource+0x176>
 800340e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003412:	d87f      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x170>
 8003414:	2b70      	cmp	r3, #112	; 0x70
 8003416:	d01a      	beq.n	800344e <HAL_TIM_ConfigClockSource+0xaa>
 8003418:	2b70      	cmp	r3, #112	; 0x70
 800341a:	d87b      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x170>
 800341c:	2b60      	cmp	r3, #96	; 0x60
 800341e:	d050      	beq.n	80034c2 <HAL_TIM_ConfigClockSource+0x11e>
 8003420:	2b60      	cmp	r3, #96	; 0x60
 8003422:	d877      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x170>
 8003424:	2b50      	cmp	r3, #80	; 0x50
 8003426:	d03c      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0xfe>
 8003428:	2b50      	cmp	r3, #80	; 0x50
 800342a:	d873      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x170>
 800342c:	2b40      	cmp	r3, #64	; 0x40
 800342e:	d058      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x13e>
 8003430:	2b40      	cmp	r3, #64	; 0x40
 8003432:	d86f      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x170>
 8003434:	2b30      	cmp	r3, #48	; 0x30
 8003436:	d064      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0x15e>
 8003438:	2b30      	cmp	r3, #48	; 0x30
 800343a:	d86b      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x170>
 800343c:	2b20      	cmp	r3, #32
 800343e:	d060      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0x15e>
 8003440:	2b20      	cmp	r3, #32
 8003442:	d867      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x170>
 8003444:	2b00      	cmp	r3, #0
 8003446:	d05c      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0x15e>
 8003448:	2b10      	cmp	r3, #16
 800344a:	d05a      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0x15e>
 800344c:	e062      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	6899      	ldr	r1, [r3, #8]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f000 fca2 	bl	8003da6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003470:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	609a      	str	r2, [r3, #8]
      break;
 800347a:	e04f      	b.n	800351c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	6899      	ldr	r1, [r3, #8]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f000 fc8b 	bl	8003da6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800349e:	609a      	str	r2, [r3, #8]
      break;
 80034a0:	e03c      	b.n	800351c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6859      	ldr	r1, [r3, #4]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	461a      	mov	r2, r3
 80034b0:	f000 fc02 	bl	8003cb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2150      	movs	r1, #80	; 0x50
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fc59 	bl	8003d72 <TIM_ITRx_SetConfig>
      break;
 80034c0:	e02c      	b.n	800351c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	6859      	ldr	r1, [r3, #4]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	461a      	mov	r2, r3
 80034d0:	f000 fc20 	bl	8003d14 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2160      	movs	r1, #96	; 0x60
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fc49 	bl	8003d72 <TIM_ITRx_SetConfig>
      break;
 80034e0:	e01c      	b.n	800351c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	6859      	ldr	r1, [r3, #4]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	461a      	mov	r2, r3
 80034f0:	f000 fbe2 	bl	8003cb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2140      	movs	r1, #64	; 0x40
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fc39 	bl	8003d72 <TIM_ITRx_SetConfig>
      break;
 8003500:	e00c      	b.n	800351c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4619      	mov	r1, r3
 800350c:	4610      	mov	r0, r2
 800350e:	f000 fc30 	bl	8003d72 <TIM_ITRx_SetConfig>
      break;
 8003512:	e003      	b.n	800351c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
      break;
 8003518:	e000      	b.n	800351c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800351a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800352c:	7bfb      	ldrb	r3, [r7, #15]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr

08003548 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr

0800355a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr

0800356c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	bc80      	pop	{r7}
 800357c:	4770      	bx	lr
	...

08003580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a41      	ldr	r2, [pc, #260]	; (8003698 <TIM_Base_SetConfig+0x118>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d013      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359e:	d00f      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a3e      	ldr	r2, [pc, #248]	; (800369c <TIM_Base_SetConfig+0x11c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00b      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a3d      	ldr	r2, [pc, #244]	; (80036a0 <TIM_Base_SetConfig+0x120>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d007      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a3c      	ldr	r2, [pc, #240]	; (80036a4 <TIM_Base_SetConfig+0x124>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d003      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a3b      	ldr	r2, [pc, #236]	; (80036a8 <TIM_Base_SetConfig+0x128>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d108      	bne.n	80035d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a30      	ldr	r2, [pc, #192]	; (8003698 <TIM_Base_SetConfig+0x118>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d01f      	beq.n	800361a <TIM_Base_SetConfig+0x9a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e0:	d01b      	beq.n	800361a <TIM_Base_SetConfig+0x9a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a2d      	ldr	r2, [pc, #180]	; (800369c <TIM_Base_SetConfig+0x11c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d017      	beq.n	800361a <TIM_Base_SetConfig+0x9a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a2c      	ldr	r2, [pc, #176]	; (80036a0 <TIM_Base_SetConfig+0x120>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <TIM_Base_SetConfig+0x9a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a2b      	ldr	r2, [pc, #172]	; (80036a4 <TIM_Base_SetConfig+0x124>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00f      	beq.n	800361a <TIM_Base_SetConfig+0x9a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a2b      	ldr	r2, [pc, #172]	; (80036ac <TIM_Base_SetConfig+0x12c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00b      	beq.n	800361a <TIM_Base_SetConfig+0x9a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a2a      	ldr	r2, [pc, #168]	; (80036b0 <TIM_Base_SetConfig+0x130>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d007      	beq.n	800361a <TIM_Base_SetConfig+0x9a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a29      	ldr	r2, [pc, #164]	; (80036b4 <TIM_Base_SetConfig+0x134>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d003      	beq.n	800361a <TIM_Base_SetConfig+0x9a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a24      	ldr	r2, [pc, #144]	; (80036a8 <TIM_Base_SetConfig+0x128>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d108      	bne.n	800362c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a11      	ldr	r2, [pc, #68]	; (8003698 <TIM_Base_SetConfig+0x118>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d013      	beq.n	8003680 <TIM_Base_SetConfig+0x100>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a12      	ldr	r2, [pc, #72]	; (80036a4 <TIM_Base_SetConfig+0x124>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00f      	beq.n	8003680 <TIM_Base_SetConfig+0x100>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a12      	ldr	r2, [pc, #72]	; (80036ac <TIM_Base_SetConfig+0x12c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00b      	beq.n	8003680 <TIM_Base_SetConfig+0x100>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a11      	ldr	r2, [pc, #68]	; (80036b0 <TIM_Base_SetConfig+0x130>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d007      	beq.n	8003680 <TIM_Base_SetConfig+0x100>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a10      	ldr	r2, [pc, #64]	; (80036b4 <TIM_Base_SetConfig+0x134>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d003      	beq.n	8003680 <TIM_Base_SetConfig+0x100>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <TIM_Base_SetConfig+0x128>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d103      	bne.n	8003688 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	615a      	str	r2, [r3, #20]
}
 800368e:	bf00      	nop
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr
 8003698:	40012c00 	.word	0x40012c00
 800369c:	40000400 	.word	0x40000400
 80036a0:	40000800 	.word	0x40000800
 80036a4:	40013400 	.word	0x40013400
 80036a8:	40015000 	.word	0x40015000
 80036ac:	40014000 	.word	0x40014000
 80036b0:	40014400 	.word	0x40014400
 80036b4:	40014800 	.word	0x40014800

080036b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	f023 0201 	bic.w	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 0303 	bic.w	r3, r3, #3
 80036f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f023 0302 	bic.w	r3, r3, #2
 8003704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a30      	ldr	r2, [pc, #192]	; (80037d4 <TIM_OC1_SetConfig+0x11c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d013      	beq.n	8003740 <TIM_OC1_SetConfig+0x88>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a2f      	ldr	r2, [pc, #188]	; (80037d8 <TIM_OC1_SetConfig+0x120>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00f      	beq.n	8003740 <TIM_OC1_SetConfig+0x88>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a2e      	ldr	r2, [pc, #184]	; (80037dc <TIM_OC1_SetConfig+0x124>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00b      	beq.n	8003740 <TIM_OC1_SetConfig+0x88>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a2d      	ldr	r2, [pc, #180]	; (80037e0 <TIM_OC1_SetConfig+0x128>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d007      	beq.n	8003740 <TIM_OC1_SetConfig+0x88>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a2c      	ldr	r2, [pc, #176]	; (80037e4 <TIM_OC1_SetConfig+0x12c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d003      	beq.n	8003740 <TIM_OC1_SetConfig+0x88>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a2b      	ldr	r2, [pc, #172]	; (80037e8 <TIM_OC1_SetConfig+0x130>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d10c      	bne.n	800375a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f023 0308 	bic.w	r3, r3, #8
 8003746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f023 0304 	bic.w	r3, r3, #4
 8003758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a1d      	ldr	r2, [pc, #116]	; (80037d4 <TIM_OC1_SetConfig+0x11c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d013      	beq.n	800378a <TIM_OC1_SetConfig+0xd2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a1c      	ldr	r2, [pc, #112]	; (80037d8 <TIM_OC1_SetConfig+0x120>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00f      	beq.n	800378a <TIM_OC1_SetConfig+0xd2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a1b      	ldr	r2, [pc, #108]	; (80037dc <TIM_OC1_SetConfig+0x124>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00b      	beq.n	800378a <TIM_OC1_SetConfig+0xd2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a1a      	ldr	r2, [pc, #104]	; (80037e0 <TIM_OC1_SetConfig+0x128>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d007      	beq.n	800378a <TIM_OC1_SetConfig+0xd2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a19      	ldr	r2, [pc, #100]	; (80037e4 <TIM_OC1_SetConfig+0x12c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d003      	beq.n	800378a <TIM_OC1_SetConfig+0xd2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a18      	ldr	r2, [pc, #96]	; (80037e8 <TIM_OC1_SetConfig+0x130>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d111      	bne.n	80037ae <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	621a      	str	r2, [r3, #32]
}
 80037c8:	bf00      	nop
 80037ca:	371c      	adds	r7, #28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40012c00 	.word	0x40012c00
 80037d8:	40013400 	.word	0x40013400
 80037dc:	40014000 	.word	0x40014000
 80037e0:	40014400 	.word	0x40014400
 80037e4:	40014800 	.word	0x40014800
 80037e8:	40015000 	.word	0x40015000

080037ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	f023 0210 	bic.w	r2, r3, #16
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800381a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800381e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f023 0320 	bic.w	r3, r3, #32
 800383a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a2b      	ldr	r2, [pc, #172]	; (80038f8 <TIM_OC2_SetConfig+0x10c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d007      	beq.n	8003860 <TIM_OC2_SetConfig+0x74>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a2a      	ldr	r2, [pc, #168]	; (80038fc <TIM_OC2_SetConfig+0x110>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d003      	beq.n	8003860 <TIM_OC2_SetConfig+0x74>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a29      	ldr	r2, [pc, #164]	; (8003900 <TIM_OC2_SetConfig+0x114>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d10d      	bne.n	800387c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800387a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a1e      	ldr	r2, [pc, #120]	; (80038f8 <TIM_OC2_SetConfig+0x10c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d013      	beq.n	80038ac <TIM_OC2_SetConfig+0xc0>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a1d      	ldr	r2, [pc, #116]	; (80038fc <TIM_OC2_SetConfig+0x110>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00f      	beq.n	80038ac <TIM_OC2_SetConfig+0xc0>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <TIM_OC2_SetConfig+0x118>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00b      	beq.n	80038ac <TIM_OC2_SetConfig+0xc0>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a1c      	ldr	r2, [pc, #112]	; (8003908 <TIM_OC2_SetConfig+0x11c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d007      	beq.n	80038ac <TIM_OC2_SetConfig+0xc0>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a1b      	ldr	r2, [pc, #108]	; (800390c <TIM_OC2_SetConfig+0x120>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d003      	beq.n	80038ac <TIM_OC2_SetConfig+0xc0>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a16      	ldr	r2, [pc, #88]	; (8003900 <TIM_OC2_SetConfig+0x114>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d113      	bne.n	80038d4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038b2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ba:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	621a      	str	r2, [r3, #32]
}
 80038ee:	bf00      	nop
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr
 80038f8:	40012c00 	.word	0x40012c00
 80038fc:	40013400 	.word	0x40013400
 8003900:	40015000 	.word	0x40015000
 8003904:	40014000 	.word	0x40014000
 8003908:	40014400 	.word	0x40014400
 800390c:	40014800 	.word	0x40014800

08003910 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800393e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 0303 	bic.w	r3, r3, #3
 800394a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800395c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	021b      	lsls	r3, r3, #8
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a2b      	ldr	r2, [pc, #172]	; (8003a1c <TIM_OC3_SetConfig+0x10c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d007      	beq.n	8003982 <TIM_OC3_SetConfig+0x72>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a2a      	ldr	r2, [pc, #168]	; (8003a20 <TIM_OC3_SetConfig+0x110>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d003      	beq.n	8003982 <TIM_OC3_SetConfig+0x72>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a29      	ldr	r2, [pc, #164]	; (8003a24 <TIM_OC3_SetConfig+0x114>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d10d      	bne.n	800399e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003988:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	021b      	lsls	r3, r3, #8
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800399c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a1e      	ldr	r2, [pc, #120]	; (8003a1c <TIM_OC3_SetConfig+0x10c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <TIM_OC3_SetConfig+0xbe>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a1d      	ldr	r2, [pc, #116]	; (8003a20 <TIM_OC3_SetConfig+0x110>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00f      	beq.n	80039ce <TIM_OC3_SetConfig+0xbe>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <TIM_OC3_SetConfig+0x118>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00b      	beq.n	80039ce <TIM_OC3_SetConfig+0xbe>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a1c      	ldr	r2, [pc, #112]	; (8003a2c <TIM_OC3_SetConfig+0x11c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d007      	beq.n	80039ce <TIM_OC3_SetConfig+0xbe>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a1b      	ldr	r2, [pc, #108]	; (8003a30 <TIM_OC3_SetConfig+0x120>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d003      	beq.n	80039ce <TIM_OC3_SetConfig+0xbe>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a16      	ldr	r2, [pc, #88]	; (8003a24 <TIM_OC3_SetConfig+0x114>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d113      	bne.n	80039f6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	621a      	str	r2, [r3, #32]
}
 8003a10:	bf00      	nop
 8003a12:	371c      	adds	r7, #28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40012c00 	.word	0x40012c00
 8003a20:	40013400 	.word	0x40013400
 8003a24:	40015000 	.word	0x40015000
 8003a28:	40014000 	.word	0x40014000
 8003a2c:	40014400 	.word	0x40014400
 8003a30:	40014800 	.word	0x40014800

08003a34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	031b      	lsls	r3, r3, #12
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a19      	ldr	r2, [pc, #100]	; (8003af8 <TIM_OC4_SetConfig+0xc4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d013      	beq.n	8003ac0 <TIM_OC4_SetConfig+0x8c>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a18      	ldr	r2, [pc, #96]	; (8003afc <TIM_OC4_SetConfig+0xc8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00f      	beq.n	8003ac0 <TIM_OC4_SetConfig+0x8c>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a17      	ldr	r2, [pc, #92]	; (8003b00 <TIM_OC4_SetConfig+0xcc>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00b      	beq.n	8003ac0 <TIM_OC4_SetConfig+0x8c>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a16      	ldr	r2, [pc, #88]	; (8003b04 <TIM_OC4_SetConfig+0xd0>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d007      	beq.n	8003ac0 <TIM_OC4_SetConfig+0x8c>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a15      	ldr	r2, [pc, #84]	; (8003b08 <TIM_OC4_SetConfig+0xd4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d003      	beq.n	8003ac0 <TIM_OC4_SetConfig+0x8c>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <TIM_OC4_SetConfig+0xd8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d109      	bne.n	8003ad4 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ac6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	019b      	lsls	r3, r3, #6
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	621a      	str	r2, [r3, #32]
}
 8003aee:	bf00      	nop
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr
 8003af8:	40012c00 	.word	0x40012c00
 8003afc:	40013400 	.word	0x40013400
 8003b00:	40014000 	.word	0x40014000
 8003b04:	40014400 	.word	0x40014400
 8003b08:	40014800 	.word	0x40014800
 8003b0c:	40015000 	.word	0x40015000

08003b10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	041b      	lsls	r3, r3, #16
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a19      	ldr	r2, [pc, #100]	; (8003bcc <TIM_OC5_SetConfig+0xbc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d013      	beq.n	8003b92 <TIM_OC5_SetConfig+0x82>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a18      	ldr	r2, [pc, #96]	; (8003bd0 <TIM_OC5_SetConfig+0xc0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00f      	beq.n	8003b92 <TIM_OC5_SetConfig+0x82>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a17      	ldr	r2, [pc, #92]	; (8003bd4 <TIM_OC5_SetConfig+0xc4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00b      	beq.n	8003b92 <TIM_OC5_SetConfig+0x82>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a16      	ldr	r2, [pc, #88]	; (8003bd8 <TIM_OC5_SetConfig+0xc8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d007      	beq.n	8003b92 <TIM_OC5_SetConfig+0x82>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a15      	ldr	r2, [pc, #84]	; (8003bdc <TIM_OC5_SetConfig+0xcc>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d003      	beq.n	8003b92 <TIM_OC5_SetConfig+0x82>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <TIM_OC5_SetConfig+0xd0>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d109      	bne.n	8003ba6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	021b      	lsls	r3, r3, #8
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	621a      	str	r2, [r3, #32]
}
 8003bc0:	bf00      	nop
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40012c00 	.word	0x40012c00
 8003bd0:	40013400 	.word	0x40013400
 8003bd4:	40014000 	.word	0x40014000
 8003bd8:	40014400 	.word	0x40014400
 8003bdc:	40014800 	.word	0x40014800
 8003be0:	40015000 	.word	0x40015000

08003be4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	021b      	lsls	r3, r3, #8
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	051b      	lsls	r3, r3, #20
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a19      	ldr	r2, [pc, #100]	; (8003ca0 <TIM_OC6_SetConfig+0xbc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d013      	beq.n	8003c68 <TIM_OC6_SetConfig+0x84>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a18      	ldr	r2, [pc, #96]	; (8003ca4 <TIM_OC6_SetConfig+0xc0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00f      	beq.n	8003c68 <TIM_OC6_SetConfig+0x84>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a17      	ldr	r2, [pc, #92]	; (8003ca8 <TIM_OC6_SetConfig+0xc4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00b      	beq.n	8003c68 <TIM_OC6_SetConfig+0x84>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a16      	ldr	r2, [pc, #88]	; (8003cac <TIM_OC6_SetConfig+0xc8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d007      	beq.n	8003c68 <TIM_OC6_SetConfig+0x84>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a15      	ldr	r2, [pc, #84]	; (8003cb0 <TIM_OC6_SetConfig+0xcc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d003      	beq.n	8003c68 <TIM_OC6_SetConfig+0x84>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a14      	ldr	r2, [pc, #80]	; (8003cb4 <TIM_OC6_SetConfig+0xd0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d109      	bne.n	8003c7c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	029b      	lsls	r3, r3, #10
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	621a      	str	r2, [r3, #32]
}
 8003c96:	bf00      	nop
 8003c98:	371c      	adds	r7, #28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	40012c00 	.word	0x40012c00
 8003ca4:	40013400 	.word	0x40013400
 8003ca8:	40014000 	.word	0x40014000
 8003cac:	40014400 	.word	0x40014400
 8003cb0:	40014800 	.word	0x40014800
 8003cb4:	40015000 	.word	0x40015000

08003cb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	f023 0201 	bic.w	r2, r3, #1
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f023 030a 	bic.w	r3, r3, #10
 8003cf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	621a      	str	r2, [r3, #32]
}
 8003d0a:	bf00      	nop
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr

08003d14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	f023 0210 	bic.w	r2, r3, #16
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	031b      	lsls	r3, r3, #12
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	621a      	str	r2, [r3, #32]
}
 8003d68:	bf00      	nop
 8003d6a:	371c      	adds	r7, #28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr

08003d72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b085      	sub	sp, #20
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f043 0307 	orr.w	r3, r3, #7
 8003d94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	609a      	str	r2, [r3, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b087      	sub	sp, #28
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	021a      	lsls	r2, r3, #8
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	609a      	str	r2, [r3, #8]
}
 8003dda:	bf00      	nop
 8003ddc:	371c      	adds	r7, #28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr

08003de4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 031f 	and.w	r3, r3, #31
 8003df6:	2201      	movs	r2, #1
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a1a      	ldr	r2, [r3, #32]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	401a      	ands	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a1a      	ldr	r2, [r3, #32]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	621a      	str	r2, [r3, #32]
}
 8003e22:	bf00      	nop
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr

08003e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e06d      	b.n	8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a30      	ldr	r2, [pc, #192]	; (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d009      	beq.n	8003e82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a2f      	ldr	r2, [pc, #188]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d004      	beq.n	8003e82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a2d      	ldr	r2, [pc, #180]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d108      	bne.n	8003e94 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1e      	ldr	r2, [pc, #120]	; (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d01d      	beq.n	8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec0:	d018      	beq.n	8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1c      	ldr	r2, [pc, #112]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d013      	beq.n	8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1a      	ldr	r2, [pc, #104]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00e      	beq.n	8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a15      	ldr	r2, [pc, #84]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d009      	beq.n	8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a16      	ldr	r2, [pc, #88]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a11      	ldr	r2, [pc, #68]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d10c      	bne.n	8003f0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003efa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40012c00 	.word	0x40012c00
 8003f30:	40013400 	.word	0x40013400
 8003f34:	40015000 	.word	0x40015000
 8003f38:	40000400 	.word	0x40000400
 8003f3c:	40000800 	.word	0x40000800
 8003f40:	40014000 	.word	0x40014000

08003f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr

08003f56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr
	...

08003f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e0a7      	b.n	80040de <HAL_I2C_Init+0x162>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d12c      	bne.n	8003ff4 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a50      	ldr	r2, [pc, #320]	; (80040e8 <HAL_I2C_Init+0x16c>)
 8003fa6:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a50      	ldr	r2, [pc, #320]	; (80040ec <HAL_I2C_Init+0x170>)
 8003fac:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a4f      	ldr	r2, [pc, #316]	; (80040f0 <HAL_I2C_Init+0x174>)
 8003fb2:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a4f      	ldr	r2, [pc, #316]	; (80040f4 <HAL_I2C_Init+0x178>)
 8003fb8:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a4e      	ldr	r2, [pc, #312]	; (80040f8 <HAL_I2C_Init+0x17c>)
 8003fbe:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a4e      	ldr	r2, [pc, #312]	; (80040fc <HAL_I2C_Init+0x180>)
 8003fc4:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a4d      	ldr	r2, [pc, #308]	; (8004100 <HAL_I2C_Init+0x184>)
 8003fca:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a4d      	ldr	r2, [pc, #308]	; (8004104 <HAL_I2C_Init+0x188>)
 8003fd0:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a4c      	ldr	r2, [pc, #304]	; (8004108 <HAL_I2C_Init+0x18c>)
 8003fd6:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a4c      	ldr	r2, [pc, #304]	; (800410c <HAL_I2C_Init+0x190>)
 8003fdc:	671a      	str	r2, [r3, #112]	; 0x70

    if (hi2c->MspInitCallback == NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d102      	bne.n	8003fec <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a49      	ldr	r2, [pc, #292]	; (8004110 <HAL_I2C_Init+0x194>)
 8003fea:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2224      	movs	r2, #36	; 0x24
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0201 	bic.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004018:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004028:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d107      	bne.n	8004042 <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800403e:	609a      	str	r2, [r3, #8]
 8004040:	e006      	b.n	8004050 <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800404e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d104      	bne.n	8004062 <HAL_I2C_Init+0xe6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004060:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004074:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004084:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69d9      	ldr	r1, [r3, #28]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1a      	ldr	r2, [r3, #32]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	08004149 	.word	0x08004149
 80040ec:	0800415b 	.word	0x0800415b
 80040f0:	0800416d 	.word	0x0800416d
 80040f4:	0800417f 	.word	0x0800417f
 80040f8:	080041ab 	.word	0x080041ab
 80040fc:	080041bd 	.word	0x080041bd
 8004100:	080041cf 	.word	0x080041cf
 8004104:	080041e1 	.word	0x080041e1
 8004108:	080041f3 	.word	0x080041f3
 800410c:	08004191 	.word	0x08004191
 8004110:	08004749 	.word	0x08004749

08004114 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	68f9      	ldr	r1, [r7, #12]
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	4798      	blx	r3
  }
}
 8004140:	bf00      	nop
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr

0800415a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr

08004190 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	70fb      	strb	r3, [r7, #3]
 800419c:	4613      	mov	r3, r2
 800419e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr

080041aa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr

080041f2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr

08004204 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b20      	cmp	r3, #32
 8004218:	d138      	bne.n	800428c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004224:	2302      	movs	r3, #2
 8004226:	e032      	b.n	800428e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2224      	movs	r2, #36	; 0x24
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0201 	bic.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004256:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6819      	ldr	r1, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	e000      	b.n	800428e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800428c:	2302      	movs	r3, #2
  }
}
 800428e:	4618      	mov	r0, r3
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr

08004298 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d139      	bne.n	8004322 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e033      	b.n	8004324 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2224      	movs	r2, #36	; 0x24
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0201 	orr.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	e000      	b.n	8004324 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004322:	2302      	movs	r3, #2
  }
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr
	...

08004330 <HAL_GPIO_EXTI_Callback>:
#include "stm32f3xx_hal.h"
#include "avProj_Config.h"


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	80fb      	strh	r3, [r7, #6]
	/* Check if interrupt is triggered by PC13 */
	if(GPIO_Pin == BUTTON_Pin)
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004340:	d10e      	bne.n	8004360 <HAL_GPIO_EXTI_Callback+0x30>
	{
		/* Check Pin state */
        if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8004342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004346:	4808      	ldr	r0, [pc, #32]	; (8004368 <HAL_GPIO_EXTI_Callback+0x38>)
 8004348:	f7fe f842 	bl	80023d0 <HAL_GPIO_ReadPin>
 800434c:	4603      	mov	r3, r0
 800434e:	2b01      	cmp	r3, #1
 8004350:	d103      	bne.n	800435a <HAL_GPIO_EXTI_Callback+0x2a>
        {
            Rte_Write_PC13_Pin_State(1u);
 8004352:	2001      	movs	r0, #1
 8004354:	f003 ffe2 	bl	800831c <Rte_Write_PC13_Pin_State>
        else
        {
        	Rte_Write_PC13_Pin_State(0u);
        }
	}
}
 8004358:	e002      	b.n	8004360 <HAL_GPIO_EXTI_Callback+0x30>
        	Rte_Write_PC13_Pin_State(0u);
 800435a:	2000      	movs	r0, #0
 800435c:	f003 ffde 	bl	800831c <Rte_Write_PC13_Pin_State>
}
 8004360:	bf00      	nop
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	48000800 	.word	0x48000800

0800436c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004370:	bf00      	nop
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800437c:	4b08      	ldr	r3, [pc, #32]	; (80043a0 <HAL_Init+0x28>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a07      	ldr	r2, [pc, #28]	; (80043a0 <HAL_Init+0x28>)
 8004382:	f043 0310 	orr.w	r3, r3, #16
 8004386:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004388:	2003      	movs	r0, #3
 800438a:	f000 f911 	bl	80045b0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800438e:	200f      	movs	r0, #15
 8004390:	f000 f808 	bl	80043a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004394:	f000 f94e 	bl	8004634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40022000 	.word	0x40022000

080043a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043ac:	4b12      	ldr	r3, [pc, #72]	; (80043f8 <HAL_InitTick+0x54>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b12      	ldr	r3, [pc, #72]	; (80043fc <HAL_InitTick+0x58>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	4619      	mov	r1, r3
 80043b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80043be:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 f929 	bl	800461a <HAL_SYSTICK_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e00e      	b.n	80043f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b0f      	cmp	r3, #15
 80043d6:	d80a      	bhi.n	80043ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043d8:	2200      	movs	r2, #0
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	f04f 30ff 	mov.w	r0, #4294967295
 80043e0:	f000 f8f1 	bl	80045c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043e4:	4a06      	ldr	r2, [pc, #24]	; (8004400 <HAL_InitTick+0x5c>)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e000      	b.n	80043f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20000000 	.word	0x20000000
 80043fc:	20000008 	.word	0x20000008
 8004400:	20000004 	.word	0x20000004

08004404 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  return uwTick;  
 8004408:	4b02      	ldr	r3, [pc, #8]	; (8004414 <HAL_GetTick+0x10>)
 800440a:	681b      	ldr	r3, [r3, #0]
}
 800440c:	4618      	mov	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr
 8004414:	20000114 	.word	0x20000114

08004418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004428:	4b0c      	ldr	r3, [pc, #48]	; (800445c <__NVIC_SetPriorityGrouping+0x44>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004434:	4013      	ands	r3, r2
 8004436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800444a:	4a04      	ldr	r2, [pc, #16]	; (800445c <__NVIC_SetPriorityGrouping+0x44>)
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	60d3      	str	r3, [r2, #12]
}
 8004450:	bf00      	nop
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	e000ed00 	.word	0xe000ed00

08004460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004464:	4b04      	ldr	r3, [pc, #16]	; (8004478 <__NVIC_GetPriorityGrouping+0x18>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	0a1b      	lsrs	r3, r3, #8
 800446a:	f003 0307 	and.w	r3, r3, #7
}
 800446e:	4618      	mov	r0, r3
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	e000ed00 	.word	0xe000ed00

0800447c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448a:	2b00      	cmp	r3, #0
 800448c:	db0b      	blt.n	80044a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	f003 021f 	and.w	r2, r3, #31
 8004494:	4906      	ldr	r1, [pc, #24]	; (80044b0 <__NVIC_EnableIRQ+0x34>)
 8004496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	2001      	movs	r0, #1
 800449e:	fa00 f202 	lsl.w	r2, r0, r2
 80044a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr
 80044b0:	e000e100 	.word	0xe000e100

080044b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	6039      	str	r1, [r7, #0]
 80044be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	db0a      	blt.n	80044de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	490c      	ldr	r1, [pc, #48]	; (8004500 <__NVIC_SetPriority+0x4c>)
 80044ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d2:	0112      	lsls	r2, r2, #4
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	440b      	add	r3, r1
 80044d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044dc:	e00a      	b.n	80044f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	4908      	ldr	r1, [pc, #32]	; (8004504 <__NVIC_SetPriority+0x50>)
 80044e4:	79fb      	ldrb	r3, [r7, #7]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	3b04      	subs	r3, #4
 80044ec:	0112      	lsls	r2, r2, #4
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	440b      	add	r3, r1
 80044f2:	761a      	strb	r2, [r3, #24]
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bc80      	pop	{r7}
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	e000e100 	.word	0xe000e100
 8004504:	e000ed00 	.word	0xe000ed00

08004508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004508:	b480      	push	{r7}
 800450a:	b089      	sub	sp, #36	; 0x24
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f1c3 0307 	rsb	r3, r3, #7
 8004522:	2b04      	cmp	r3, #4
 8004524:	bf28      	it	cs
 8004526:	2304      	movcs	r3, #4
 8004528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	3304      	adds	r3, #4
 800452e:	2b06      	cmp	r3, #6
 8004530:	d902      	bls.n	8004538 <NVIC_EncodePriority+0x30>
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3b03      	subs	r3, #3
 8004536:	e000      	b.n	800453a <NVIC_EncodePriority+0x32>
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800453c:	f04f 32ff 	mov.w	r2, #4294967295
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43da      	mvns	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	401a      	ands	r2, r3
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004550:	f04f 31ff 	mov.w	r1, #4294967295
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	fa01 f303 	lsl.w	r3, r1, r3
 800455a:	43d9      	mvns	r1, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004560:	4313      	orrs	r3, r2
         );
}
 8004562:	4618      	mov	r0, r3
 8004564:	3724      	adds	r7, #36	; 0x24
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr

0800456c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3b01      	subs	r3, #1
 8004578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800457c:	d301      	bcc.n	8004582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800457e:	2301      	movs	r3, #1
 8004580:	e00f      	b.n	80045a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004582:	4a0a      	ldr	r2, [pc, #40]	; (80045ac <SysTick_Config+0x40>)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3b01      	subs	r3, #1
 8004588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800458a:	210f      	movs	r1, #15
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	f7ff ff90 	bl	80044b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <SysTick_Config+0x40>)
 8004596:	2200      	movs	r2, #0
 8004598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800459a:	4b04      	ldr	r3, [pc, #16]	; (80045ac <SysTick_Config+0x40>)
 800459c:	2207      	movs	r2, #7
 800459e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	e000e010 	.word	0xe000e010

080045b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff ff2d 	bl	8004418 <__NVIC_SetPriorityGrouping>
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b086      	sub	sp, #24
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	4603      	mov	r3, r0
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
 80045d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045d8:	f7ff ff42 	bl	8004460 <__NVIC_GetPriorityGrouping>
 80045dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	6978      	ldr	r0, [r7, #20]
 80045e4:	f7ff ff90 	bl	8004508 <NVIC_EncodePriority>
 80045e8:	4602      	mov	r2, r0
 80045ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ee:	4611      	mov	r1, r2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff ff5f 	bl	80044b4 <__NVIC_SetPriority>
}
 80045f6:	bf00      	nop
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	4603      	mov	r3, r0
 8004606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff ff35 	bl	800447c <__NVIC_EnableIRQ>
}
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff ffa2 	bl	800456c <SysTick_Config>
 8004628:	4603      	mov	r3, r0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800463a:	4b0e      	ldr	r3, [pc, #56]	; (8004674 <HAL_MspInit+0x40>)
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	4a0d      	ldr	r2, [pc, #52]	; (8004674 <HAL_MspInit+0x40>)
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	6193      	str	r3, [r2, #24]
 8004646:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <HAL_MspInit+0x40>)
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	607b      	str	r3, [r7, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004652:	4b08      	ldr	r3, [pc, #32]	; (8004674 <HAL_MspInit+0x40>)
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	4a07      	ldr	r2, [pc, #28]	; (8004674 <HAL_MspInit+0x40>)
 8004658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800465c:	61d3      	str	r3, [r2, #28]
 800465e:	4b05      	ldr	r3, [pc, #20]	; (8004674 <HAL_MspInit+0x40>)
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr
 8004674:	40021000 	.word	0x40021000

08004678 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08a      	sub	sp, #40	; 0x28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004680:	f107 0314 	add.w	r3, r7, #20
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	60da      	str	r2, [r3, #12]
 800468e:	611a      	str	r2, [r3, #16]
	  if(hadc->Instance==ADC1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004698:	d14c      	bne.n	8004734 <HAL_ADC_MspInit+0xbc>
	  {
	  /* USER CODE BEGIN ADC1_MspInit 0 */

	  /* USER CODE END ADC1_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_ADC12_CLK_ENABLE();
 800469a:	4b28      	ldr	r3, [pc, #160]	; (800473c <HAL_ADC_MspInit+0xc4>)
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	4a27      	ldr	r2, [pc, #156]	; (800473c <HAL_ADC_MspInit+0xc4>)
 80046a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a4:	6153      	str	r3, [r2, #20]
 80046a6:	4b25      	ldr	r3, [pc, #148]	; (800473c <HAL_ADC_MspInit+0xc4>)
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ae:	613b      	str	r3, [r7, #16]
 80046b0:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046b2:	4b22      	ldr	r3, [pc, #136]	; (800473c <HAL_ADC_MspInit+0xc4>)
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	4a21      	ldr	r2, [pc, #132]	; (800473c <HAL_ADC_MspInit+0xc4>)
 80046b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046bc:	6153      	str	r3, [r2, #20]
 80046be:	4b1f      	ldr	r3, [pc, #124]	; (800473c <HAL_ADC_MspInit+0xc4>)
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]
	    /**ADC1 GPIO Configuration
	    PA0     ------> ADC1_IN1
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80046ca:	2301      	movs	r3, #1
 80046cc:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046ce:	2303      	movs	r3, #3
 80046d0:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046d6:	f107 0314 	add.w	r3, r7, #20
 80046da:	4619      	mov	r1, r3
 80046dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046e0:	f7fd fcec 	bl	80020bc <HAL_GPIO_Init>

	    /* ADC1 DMA Init */
	    /* ADC1 Init */
	    hdma_adc1.Instance = DMA1_Channel1;
 80046e4:	4b16      	ldr	r3, [pc, #88]	; (8004740 <HAL_ADC_MspInit+0xc8>)
 80046e6:	4a17      	ldr	r2, [pc, #92]	; (8004744 <HAL_ADC_MspInit+0xcc>)
 80046e8:	601a      	str	r2, [r3, #0]
	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046ea:	4b15      	ldr	r3, [pc, #84]	; (8004740 <HAL_ADC_MspInit+0xc8>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	605a      	str	r2, [r3, #4]
	    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80046f0:	4b13      	ldr	r3, [pc, #76]	; (8004740 <HAL_ADC_MspInit+0xc8>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	609a      	str	r2, [r3, #8]
	    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80046f6:	4b12      	ldr	r3, [pc, #72]	; (8004740 <HAL_ADC_MspInit+0xc8>)
 80046f8:	2280      	movs	r2, #128	; 0x80
 80046fa:	60da      	str	r2, [r3, #12]
	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80046fc:	4b10      	ldr	r3, [pc, #64]	; (8004740 <HAL_ADC_MspInit+0xc8>)
 80046fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004702:	611a      	str	r2, [r3, #16]
	    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004704:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <HAL_ADC_MspInit+0xc8>)
 8004706:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800470a:	615a      	str	r2, [r3, #20]
	    hdma_adc1.Init.Mode = DMA_NORMAL;
 800470c:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <HAL_ADC_MspInit+0xc8>)
 800470e:	2200      	movs	r2, #0
 8004710:	619a      	str	r2, [r3, #24]
	    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004712:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <HAL_ADC_MspInit+0xc8>)
 8004714:	2200      	movs	r2, #0
 8004716:	61da      	str	r2, [r3, #28]
	    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004718:	4809      	ldr	r0, [pc, #36]	; (8004740 <HAL_ADC_MspInit+0xc8>)
 800471a:	f7fd fe9f 	bl	800245c <HAL_DMA_Init>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <HAL_ADC_MspInit+0xb0>
	    {
	    	Msp_Error_Handler();
 8004724:	f000 f952 	bl	80049cc <Msp_Error_Handler>
	    }

	    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a05      	ldr	r2, [pc, #20]	; (8004740 <HAL_ADC_MspInit+0xc8>)
 800472c:	639a      	str	r2, [r3, #56]	; 0x38
 800472e:	4a04      	ldr	r2, [pc, #16]	; (8004740 <HAL_ADC_MspInit+0xc8>)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6253      	str	r3, [r2, #36]	; 0x24

	  /* USER CODE BEGIN ADC1_MspInit 1 */

	  /* USER CODE END ADC1_MspInit 1 */
	  }
}
 8004734:	bf00      	nop
 8004736:	3728      	adds	r7, #40	; 0x28
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40021000 	.word	0x40021000
 8004740:	2000016c 	.word	0x2000016c
 8004744:	40020008 	.word	0x40020008

08004748 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	; 0x28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004750:	f107 0314 	add.w	r3, r7, #20
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	605a      	str	r2, [r3, #4]
 800475a:	609a      	str	r2, [r3, #8]
 800475c:	60da      	str	r2, [r3, #12]
 800475e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1b      	ldr	r2, [pc, #108]	; (80047d4 <HAL_I2C_MspInit+0x8c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d130      	bne.n	80047cc <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800476a:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <HAL_I2C_MspInit+0x90>)
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	4a1a      	ldr	r2, [pc, #104]	; (80047d8 <HAL_I2C_MspInit+0x90>)
 8004770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004774:	6153      	str	r3, [r2, #20]
 8004776:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <HAL_I2C_MspInit+0x90>)
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800477e:	613b      	str	r3, [r7, #16]
 8004780:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004782:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004788:	2312      	movs	r3, #18
 800478a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478c:	2300      	movs	r3, #0
 800478e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004790:	2303      	movs	r3, #3
 8004792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004794:	2304      	movs	r3, #4
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004798:	f107 0314 	add.w	r3, r7, #20
 800479c:	4619      	mov	r1, r3
 800479e:	480f      	ldr	r0, [pc, #60]	; (80047dc <HAL_I2C_MspInit+0x94>)
 80047a0:	f7fd fc8c 	bl	80020bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80047a4:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <HAL_I2C_MspInit+0x90>)
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	4a0b      	ldr	r2, [pc, #44]	; (80047d8 <HAL_I2C_MspInit+0x90>)
 80047aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047ae:	61d3      	str	r3, [r2, #28]
 80047b0:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <HAL_I2C_MspInit+0x90>)
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80047bc:	2200      	movs	r2, #0
 80047be:	2100      	movs	r1, #0
 80047c0:	201f      	movs	r0, #31
 80047c2:	f7ff ff00 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80047c6:	201f      	movs	r0, #31
 80047c8:	f7ff ff19 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80047cc:	bf00      	nop
 80047ce:	3728      	adds	r7, #40	; 0x28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40005400 	.word	0x40005400
 80047d8:	40021000 	.word	0x40021000
 80047dc:	48000400 	.word	0x48000400

080047e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08a      	sub	sp, #40	; 0x28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e8:	f107 0314 	add.w	r3, r7, #20
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	605a      	str	r2, [r3, #4]
 80047f2:	609a      	str	r2, [r3, #8]
 80047f4:	60da      	str	r2, [r3, #12]
 80047f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1b      	ldr	r2, [pc, #108]	; (800486c <HAL_SPI_MspInit+0x8c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d130      	bne.n	8004864 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004802:	4b1b      	ldr	r3, [pc, #108]	; (8004870 <HAL_SPI_MspInit+0x90>)
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	4a1a      	ldr	r2, [pc, #104]	; (8004870 <HAL_SPI_MspInit+0x90>)
 8004808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800480c:	61d3      	str	r3, [r2, #28]
 800480e:	4b18      	ldr	r3, [pc, #96]	; (8004870 <HAL_SPI_MspInit+0x90>)
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800481a:	4b15      	ldr	r3, [pc, #84]	; (8004870 <HAL_SPI_MspInit+0x90>)
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	4a14      	ldr	r2, [pc, #80]	; (8004870 <HAL_SPI_MspInit+0x90>)
 8004820:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004824:	6153      	str	r3, [r2, #20]
 8004826:	4b12      	ldr	r3, [pc, #72]	; (8004870 <HAL_SPI_MspInit+0x90>)
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004832:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004838:	2302      	movs	r3, #2
 800483a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483c:	2300      	movs	r3, #0
 800483e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004840:	2303      	movs	r3, #3
 8004842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004844:	2306      	movs	r3, #6
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004848:	f107 0314 	add.w	r3, r7, #20
 800484c:	4619      	mov	r1, r3
 800484e:	4809      	ldr	r0, [pc, #36]	; (8004874 <HAL_SPI_MspInit+0x94>)
 8004850:	f7fd fc34 	bl	80020bc <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8004854:	2200      	movs	r2, #0
 8004856:	2100      	movs	r1, #0
 8004858:	2033      	movs	r0, #51	; 0x33
 800485a:	f7ff feb4 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800485e:	2033      	movs	r0, #51	; 0x33
 8004860:	f7ff fecd 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004864:	bf00      	nop
 8004866:	3728      	adds	r7, #40	; 0x28
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40003c00 	.word	0x40003c00
 8004870:	40021000 	.word	0x40021000
 8004874:	48000800 	.word	0x48000800

08004878 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a0d      	ldr	r2, [pc, #52]	; (80048bc <HAL_TIM_Base_MspInit+0x44>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d113      	bne.n	80048b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800488a:	4b0d      	ldr	r3, [pc, #52]	; (80048c0 <HAL_TIM_Base_MspInit+0x48>)
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	4a0c      	ldr	r2, [pc, #48]	; (80048c0 <HAL_TIM_Base_MspInit+0x48>)
 8004890:	f043 0302 	orr.w	r3, r3, #2
 8004894:	61d3      	str	r3, [r2, #28]
 8004896:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <HAL_TIM_Base_MspInit+0x48>)
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80048a2:	2200      	movs	r2, #0
 80048a4:	2100      	movs	r1, #0
 80048a6:	201d      	movs	r0, #29
 80048a8:	f7ff fe8d 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80048ac:	201d      	movs	r0, #29
 80048ae:	f7ff fea6 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80048b2:	bf00      	nop
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40000400 	.word	0x40000400
 80048c0:	40021000 	.word	0x40021000

080048c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08c      	sub	sp, #48	; 0x30
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048cc:	f107 031c 	add.w	r3, r7, #28
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	605a      	str	r2, [r3, #4]
 80048d6:	609a      	str	r2, [r3, #8]
 80048d8:	60da      	str	r2, [r3, #12]
 80048da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a36      	ldr	r2, [pc, #216]	; (80049bc <HAL_UART_MspInit+0xf8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d130      	bne.n	8004948 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048e6:	4b36      	ldr	r3, [pc, #216]	; (80049c0 <HAL_UART_MspInit+0xfc>)
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	4a35      	ldr	r2, [pc, #212]	; (80049c0 <HAL_UART_MspInit+0xfc>)
 80048ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048f0:	6193      	str	r3, [r2, #24]
 80048f2:	4b33      	ldr	r3, [pc, #204]	; (80049c0 <HAL_UART_MspInit+0xfc>)
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fa:	61bb      	str	r3, [r7, #24]
 80048fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048fe:	4b30      	ldr	r3, [pc, #192]	; (80049c0 <HAL_UART_MspInit+0xfc>)
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	4a2f      	ldr	r2, [pc, #188]	; (80049c0 <HAL_UART_MspInit+0xfc>)
 8004904:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004908:	6153      	str	r3, [r2, #20]
 800490a:	4b2d      	ldr	r3, [pc, #180]	; (80049c0 <HAL_UART_MspInit+0xfc>)
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004916:	2330      	movs	r3, #48	; 0x30
 8004918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800491a:	2302      	movs	r3, #2
 800491c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491e:	2300      	movs	r3, #0
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004922:	2303      	movs	r3, #3
 8004924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004926:	2307      	movs	r3, #7
 8004928:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800492a:	f107 031c 	add.w	r3, r7, #28
 800492e:	4619      	mov	r1, r3
 8004930:	4824      	ldr	r0, [pc, #144]	; (80049c4 <HAL_UART_MspInit+0x100>)
 8004932:	f7fd fbc3 	bl	80020bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004936:	2200      	movs	r2, #0
 8004938:	2100      	movs	r1, #0
 800493a:	2025      	movs	r0, #37	; 0x25
 800493c:	f7ff fe43 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004940:	2025      	movs	r0, #37	; 0x25
 8004942:	f7ff fe5c 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004946:	e035      	b.n	80049b4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a1e      	ldr	r2, [pc, #120]	; (80049c8 <HAL_UART_MspInit+0x104>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d130      	bne.n	80049b4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004952:	4b1b      	ldr	r3, [pc, #108]	; (80049c0 <HAL_UART_MspInit+0xfc>)
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	4a1a      	ldr	r2, [pc, #104]	; (80049c0 <HAL_UART_MspInit+0xfc>)
 8004958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800495c:	61d3      	str	r3, [r2, #28]
 800495e:	4b18      	ldr	r3, [pc, #96]	; (80049c0 <HAL_UART_MspInit+0xfc>)
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800496a:	4b15      	ldr	r3, [pc, #84]	; (80049c0 <HAL_UART_MspInit+0xfc>)
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	4a14      	ldr	r2, [pc, #80]	; (80049c0 <HAL_UART_MspInit+0xfc>)
 8004970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004974:	6153      	str	r3, [r2, #20]
 8004976:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <HAL_UART_MspInit+0xfc>)
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004982:	230c      	movs	r3, #12
 8004984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004986:	2302      	movs	r3, #2
 8004988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498a:	2300      	movs	r3, #0
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800498e:	2303      	movs	r3, #3
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004992:	2307      	movs	r3, #7
 8004994:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004996:	f107 031c 	add.w	r3, r7, #28
 800499a:	4619      	mov	r1, r3
 800499c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049a0:	f7fd fb8c 	bl	80020bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80049a4:	2200      	movs	r2, #0
 80049a6:	2100      	movs	r1, #0
 80049a8:	2026      	movs	r0, #38	; 0x26
 80049aa:	f7ff fe0c 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80049ae:	2026      	movs	r0, #38	; 0x26
 80049b0:	f7ff fe25 	bl	80045fe <HAL_NVIC_EnableIRQ>
}
 80049b4:	bf00      	nop
 80049b6:	3730      	adds	r7, #48	; 0x30
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40013800 	.word	0x40013800
 80049c0:	40021000 	.word	0x40021000
 80049c4:	48000800 	.word	0x48000800
 80049c8:	40004400 	.word	0x40004400

080049cc <Msp_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Msp_Error_Handler(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80049d0:	b672      	cpsid	i
}
 80049d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80049d4:	e7fe      	b.n	80049d4 <Msp_Error_Handler+0x8>
	...

080049d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80049de:	af00      	add	r7, sp, #0
 80049e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049e8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d102      	bne.n	80049fe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	f001 b83a 	b.w	8005a72 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 816f 	beq.w	8004cf2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a14:	4bb5      	ldr	r3, [pc, #724]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f003 030c 	and.w	r3, r3, #12
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d00c      	beq.n	8004a3a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a20:	4bb2      	ldr	r3, [pc, #712]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 030c 	and.w	r3, r3, #12
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d15c      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x10e>
 8004a2c:	4baf      	ldr	r3, [pc, #700]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a38:	d155      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x10e>
 8004a3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a3e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004a46:	fa93 f3a3 	rbit	r3, r3
 8004a4a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a52:	fab3 f383 	clz	r3, r3
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d102      	bne.n	8004a6c <HAL_RCC_OscConfig+0x94>
 8004a66:	4ba1      	ldr	r3, [pc, #644]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	e015      	b.n	8004a98 <HAL_RCC_OscConfig+0xc0>
 8004a6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a70:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a74:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004a78:	fa93 f3a3 	rbit	r3, r3
 8004a7c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a84:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004a88:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004a8c:	fa93 f3a3 	rbit	r3, r3
 8004a90:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004a94:	4b95      	ldr	r3, [pc, #596]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a9c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004aa0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004aa4:	fa92 f2a2 	rbit	r2, r2
 8004aa8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004aac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004ab0:	fab2 f282 	clz	r2, r2
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	f042 0220 	orr.w	r2, r2, #32
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	f002 021f 	and.w	r2, r2, #31
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 8111 	beq.w	8004cf0 <HAL_RCC_OscConfig+0x318>
 8004ace:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ad2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f040 8108 	bne.w	8004cf0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f000 bfc6 	b.w	8005a72 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ae6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af6:	d106      	bne.n	8004b06 <HAL_RCC_OscConfig+0x12e>
 8004af8:	4b7c      	ldr	r3, [pc, #496]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a7b      	ldr	r2, [pc, #492]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	e036      	b.n	8004b74 <HAL_RCC_OscConfig+0x19c>
 8004b06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10c      	bne.n	8004b30 <HAL_RCC_OscConfig+0x158>
 8004b16:	4b75      	ldr	r3, [pc, #468]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a74      	ldr	r2, [pc, #464]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	4b72      	ldr	r3, [pc, #456]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a71      	ldr	r2, [pc, #452]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	e021      	b.n	8004b74 <HAL_RCC_OscConfig+0x19c>
 8004b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b40:	d10c      	bne.n	8004b5c <HAL_RCC_OscConfig+0x184>
 8004b42:	4b6a      	ldr	r3, [pc, #424]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a69      	ldr	r2, [pc, #420]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	4b67      	ldr	r3, [pc, #412]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a66      	ldr	r2, [pc, #408]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e00b      	b.n	8004b74 <HAL_RCC_OscConfig+0x19c>
 8004b5c:	4b63      	ldr	r3, [pc, #396]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a62      	ldr	r2, [pc, #392]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	4b60      	ldr	r3, [pc, #384]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a5f      	ldr	r2, [pc, #380]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b72:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d059      	beq.n	8004c38 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b84:	f7ff fc3e 	bl	8004404 <HAL_GetTick>
 8004b88:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8c:	e00a      	b.n	8004ba4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b8e:	f7ff fc39 	bl	8004404 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b64      	cmp	r3, #100	; 0x64
 8004b9c:	d902      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	f000 bf67 	b.w	8005a72 <HAL_RCC_OscConfig+0x109a>
 8004ba4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ba8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bac:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004bb0:	fa93 f3a3 	rbit	r3, r3
 8004bb4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004bb8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bbc:	fab3 f383 	clz	r3, r3
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d102      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x1fe>
 8004bd0:	4b46      	ldr	r3, [pc, #280]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	e015      	b.n	8004c02 <HAL_RCC_OscConfig+0x22a>
 8004bd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bda:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bde:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004be2:	fa93 f3a3 	rbit	r3, r3
 8004be6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004bea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004bf2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004bf6:	fa93 f3a3 	rbit	r3, r3
 8004bfa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004bfe:	4b3b      	ldr	r3, [pc, #236]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c06:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004c0a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004c0e:	fa92 f2a2 	rbit	r2, r2
 8004c12:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004c16:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004c1a:	fab2 f282 	clz	r2, r2
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	f042 0220 	orr.w	r2, r2, #32
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	f002 021f 	and.w	r2, r2, #31
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0ab      	beq.n	8004b8e <HAL_RCC_OscConfig+0x1b6>
 8004c36:	e05c      	b.n	8004cf2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c38:	f7ff fbe4 	bl	8004404 <HAL_GetTick>
 8004c3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c40:	e00a      	b.n	8004c58 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c42:	f7ff fbdf 	bl	8004404 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b64      	cmp	r3, #100	; 0x64
 8004c50:	d902      	bls.n	8004c58 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	f000 bf0d 	b.w	8005a72 <HAL_RCC_OscConfig+0x109a>
 8004c58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c5c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c60:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004c64:	fa93 f3a3 	rbit	r3, r3
 8004c68:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004c6c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c70:	fab3 f383 	clz	r3, r3
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	f043 0301 	orr.w	r3, r3, #1
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d102      	bne.n	8004c8a <HAL_RCC_OscConfig+0x2b2>
 8004c84:	4b19      	ldr	r3, [pc, #100]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	e015      	b.n	8004cb6 <HAL_RCC_OscConfig+0x2de>
 8004c8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c8e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004c96:	fa93 f3a3 	rbit	r3, r3
 8004c9a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004c9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ca2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004ca6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004caa:	fa93 f3a3 	rbit	r3, r3
 8004cae:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004cb2:	4b0e      	ldr	r3, [pc, #56]	; (8004cec <HAL_RCC_OscConfig+0x314>)
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004cba:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004cbe:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004cc2:	fa92 f2a2 	rbit	r2, r2
 8004cc6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004cca:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004cce:	fab2 f282 	clz	r2, r2
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	f042 0220 	orr.w	r2, r2, #32
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	f002 021f 	and.w	r2, r2, #31
 8004cde:	2101      	movs	r1, #1
 8004ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1ab      	bne.n	8004c42 <HAL_RCC_OscConfig+0x26a>
 8004cea:	e002      	b.n	8004cf2 <HAL_RCC_OscConfig+0x31a>
 8004cec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cf6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 817f 	beq.w	8005006 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004d08:	4ba7      	ldr	r3, [pc, #668]	; (8004fa8 <HAL_RCC_OscConfig+0x5d0>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f003 030c 	and.w	r3, r3, #12
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00c      	beq.n	8004d2e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004d14:	4ba4      	ldr	r3, [pc, #656]	; (8004fa8 <HAL_RCC_OscConfig+0x5d0>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f003 030c 	and.w	r3, r3, #12
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d173      	bne.n	8004e08 <HAL_RCC_OscConfig+0x430>
 8004d20:	4ba1      	ldr	r3, [pc, #644]	; (8004fa8 <HAL_RCC_OscConfig+0x5d0>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d2c:	d16c      	bne.n	8004e08 <HAL_RCC_OscConfig+0x430>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d34:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004d38:	fa93 f3a3 	rbit	r3, r3
 8004d3c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004d40:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d44:	fab3 f383 	clz	r3, r3
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	f043 0301 	orr.w	r3, r3, #1
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d102      	bne.n	8004d5e <HAL_RCC_OscConfig+0x386>
 8004d58:	4b93      	ldr	r3, [pc, #588]	; (8004fa8 <HAL_RCC_OscConfig+0x5d0>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	e013      	b.n	8004d86 <HAL_RCC_OscConfig+0x3ae>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d64:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004d68:	fa93 f3a3 	rbit	r3, r3
 8004d6c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004d70:	2302      	movs	r3, #2
 8004d72:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004d76:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004d7a:	fa93 f3a3 	rbit	r3, r3
 8004d7e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004d82:	4b89      	ldr	r3, [pc, #548]	; (8004fa8 <HAL_RCC_OscConfig+0x5d0>)
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	2202      	movs	r2, #2
 8004d88:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004d8c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004d90:	fa92 f2a2 	rbit	r2, r2
 8004d94:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004d98:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004d9c:	fab2 f282 	clz	r2, r2
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	f042 0220 	orr.w	r2, r2, #32
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	f002 021f 	and.w	r2, r2, #31
 8004dac:	2101      	movs	r1, #1
 8004dae:	fa01 f202 	lsl.w	r2, r1, r2
 8004db2:	4013      	ands	r3, r2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <HAL_RCC_OscConfig+0x3f6>
 8004db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d002      	beq.n	8004dce <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	f000 be52 	b.w	8005a72 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dce:	4b76      	ldr	r3, [pc, #472]	; (8004fa8 <HAL_RCC_OscConfig+0x5d0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dda:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	21f8      	movs	r1, #248	; 0xf8
 8004de4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004dec:	fa91 f1a1 	rbit	r1, r1
 8004df0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004df4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004df8:	fab1 f181 	clz	r1, r1
 8004dfc:	b2c9      	uxtb	r1, r1
 8004dfe:	408b      	lsls	r3, r1
 8004e00:	4969      	ldr	r1, [pc, #420]	; (8004fa8 <HAL_RCC_OscConfig+0x5d0>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e06:	e0fe      	b.n	8005006 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 8088 	beq.w	8004f2a <HAL_RCC_OscConfig+0x552>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e20:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004e24:	fa93 f3a3 	rbit	r3, r3
 8004e28:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004e2c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e30:	fab3 f383 	clz	r3, r3
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	461a      	mov	r2, r3
 8004e42:	2301      	movs	r3, #1
 8004e44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e46:	f7ff fadd 	bl	8004404 <HAL_GetTick>
 8004e4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4e:	e00a      	b.n	8004e66 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e50:	f7ff fad8 	bl	8004404 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d902      	bls.n	8004e66 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	f000 be06 	b.w	8005a72 <HAL_RCC_OscConfig+0x109a>
 8004e66:	2302      	movs	r3, #2
 8004e68:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004e70:	fa93 f3a3 	rbit	r3, r3
 8004e74:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004e78:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e7c:	fab3 f383 	clz	r3, r3
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	f043 0301 	orr.w	r3, r3, #1
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d102      	bne.n	8004e96 <HAL_RCC_OscConfig+0x4be>
 8004e90:	4b45      	ldr	r3, [pc, #276]	; (8004fa8 <HAL_RCC_OscConfig+0x5d0>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	e013      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e6>
 8004e96:	2302      	movs	r3, #2
 8004e98:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004ea0:	fa93 f3a3 	rbit	r3, r3
 8004ea4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004eae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004eb2:	fa93 f3a3 	rbit	r3, r3
 8004eb6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004eba:	4b3b      	ldr	r3, [pc, #236]	; (8004fa8 <HAL_RCC_OscConfig+0x5d0>)
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004ec4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004ec8:	fa92 f2a2 	rbit	r2, r2
 8004ecc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004ed0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004ed4:	fab2 f282 	clz	r2, r2
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	f042 0220 	orr.w	r2, r2, #32
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	f002 021f 	and.w	r2, r2, #31
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0af      	beq.n	8004e50 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef0:	4b2d      	ldr	r3, [pc, #180]	; (8004fa8 <HAL_RCC_OscConfig+0x5d0>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004efc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	21f8      	movs	r1, #248	; 0xf8
 8004f06:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004f0e:	fa91 f1a1 	rbit	r1, r1
 8004f12:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004f16:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004f1a:	fab1 f181 	clz	r1, r1
 8004f1e:	b2c9      	uxtb	r1, r1
 8004f20:	408b      	lsls	r3, r1
 8004f22:	4921      	ldr	r1, [pc, #132]	; (8004fa8 <HAL_RCC_OscConfig+0x5d0>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	600b      	str	r3, [r1, #0]
 8004f28:	e06d      	b.n	8005006 <HAL_RCC_OscConfig+0x62e>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f30:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004f34:	fa93 f3a3 	rbit	r3, r3
 8004f38:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004f3c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f40:	fab3 f383 	clz	r3, r3
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	461a      	mov	r2, r3
 8004f52:	2300      	movs	r3, #0
 8004f54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f56:	f7ff fa55 	bl	8004404 <HAL_GetTick>
 8004f5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f60:	f7ff fa50 	bl	8004404 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d902      	bls.n	8004f76 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	f000 bd7e 	b.w	8005a72 <HAL_RCC_OscConfig+0x109a>
 8004f76:	2302      	movs	r3, #2
 8004f78:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f80:	fa93 f3a3 	rbit	r3, r3
 8004f84:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004f88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f8c:	fab3 f383 	clz	r3, r3
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	f043 0301 	orr.w	r3, r3, #1
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d105      	bne.n	8004fac <HAL_RCC_OscConfig+0x5d4>
 8004fa0:	4b01      	ldr	r3, [pc, #4]	; (8004fa8 <HAL_RCC_OscConfig+0x5d0>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	e016      	b.n	8004fd4 <HAL_RCC_OscConfig+0x5fc>
 8004fa6:	bf00      	nop
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	2302      	movs	r3, #2
 8004fae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fb6:	fa93 f3a3 	rbit	r3, r3
 8004fba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004fc4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004fc8:	fa93 f3a3 	rbit	r3, r3
 8004fcc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004fd0:	4bbf      	ldr	r3, [pc, #764]	; (80052d0 <HAL_RCC_OscConfig+0x8f8>)
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004fda:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004fde:	fa92 f2a2 	rbit	r2, r2
 8004fe2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004fe6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004fea:	fab2 f282 	clz	r2, r2
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	f042 0220 	orr.w	r2, r2, #32
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	f002 021f 	and.w	r2, r2, #31
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8005000:	4013      	ands	r3, r2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1ac      	bne.n	8004f60 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005006:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800500a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 8113 	beq.w	8005242 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800501c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005020:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d07c      	beq.n	8005126 <HAL_RCC_OscConfig+0x74e>
 800502c:	2301      	movs	r3, #1
 800502e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005036:	fa93 f3a3 	rbit	r3, r3
 800503a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800503e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005042:	fab3 f383 	clz	r3, r3
 8005046:	b2db      	uxtb	r3, r3
 8005048:	461a      	mov	r2, r3
 800504a:	4ba2      	ldr	r3, [pc, #648]	; (80052d4 <HAL_RCC_OscConfig+0x8fc>)
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	461a      	mov	r2, r3
 8005052:	2301      	movs	r3, #1
 8005054:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005056:	f7ff f9d5 	bl	8004404 <HAL_GetTick>
 800505a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800505e:	e00a      	b.n	8005076 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005060:	f7ff f9d0 	bl	8004404 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d902      	bls.n	8005076 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	f000 bcfe 	b.w	8005a72 <HAL_RCC_OscConfig+0x109a>
 8005076:	2302      	movs	r3, #2
 8005078:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005080:	fa93 f2a3 	rbit	r2, r3
 8005084:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005088:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005096:	2202      	movs	r2, #2
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800509e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	fa93 f2a3 	rbit	r2, r3
 80050a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050ba:	2202      	movs	r2, #2
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	fa93 f2a3 	rbit	r2, r3
 80050cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80050d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050d6:	4b7e      	ldr	r3, [pc, #504]	; (80052d0 <HAL_RCC_OscConfig+0x8f8>)
 80050d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80050e2:	2102      	movs	r1, #2
 80050e4:	6019      	str	r1, [r3, #0]
 80050e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	fa93 f1a3 	rbit	r1, r3
 80050f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80050fc:	6019      	str	r1, [r3, #0]
  return result;
 80050fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005102:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	fab3 f383 	clz	r3, r3
 800510c:	b2db      	uxtb	r3, r3
 800510e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005112:	b2db      	uxtb	r3, r3
 8005114:	f003 031f 	and.w	r3, r3, #31
 8005118:	2101      	movs	r1, #1
 800511a:	fa01 f303 	lsl.w	r3, r1, r3
 800511e:	4013      	ands	r3, r2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d09d      	beq.n	8005060 <HAL_RCC_OscConfig+0x688>
 8005124:	e08d      	b.n	8005242 <HAL_RCC_OscConfig+0x86a>
 8005126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800512a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800512e:	2201      	movs	r2, #1
 8005130:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005132:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005136:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	fa93 f2a3 	rbit	r2, r3
 8005140:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005144:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005148:	601a      	str	r2, [r3, #0]
  return result;
 800514a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800514e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005152:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005154:	fab3 f383 	clz	r3, r3
 8005158:	b2db      	uxtb	r3, r3
 800515a:	461a      	mov	r2, r3
 800515c:	4b5d      	ldr	r3, [pc, #372]	; (80052d4 <HAL_RCC_OscConfig+0x8fc>)
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	461a      	mov	r2, r3
 8005164:	2300      	movs	r3, #0
 8005166:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005168:	f7ff f94c 	bl	8004404 <HAL_GetTick>
 800516c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005170:	e00a      	b.n	8005188 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005172:	f7ff f947 	bl	8004404 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d902      	bls.n	8005188 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	f000 bc75 	b.w	8005a72 <HAL_RCC_OscConfig+0x109a>
 8005188:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800518c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005190:	2202      	movs	r2, #2
 8005192:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005194:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005198:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	fa93 f2a3 	rbit	r2, r3
 80051a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051b4:	2202      	movs	r2, #2
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	fa93 f2a3 	rbit	r2, r3
 80051c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80051d8:	2202      	movs	r2, #2
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	fa93 f2a3 	rbit	r2, r3
 80051ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80051f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051f4:	4b36      	ldr	r3, [pc, #216]	; (80052d0 <HAL_RCC_OscConfig+0x8f8>)
 80051f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005200:	2102      	movs	r1, #2
 8005202:	6019      	str	r1, [r3, #0]
 8005204:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005208:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	fa93 f1a3 	rbit	r1, r3
 8005212:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005216:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800521a:	6019      	str	r1, [r3, #0]
  return result;
 800521c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005220:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	fab3 f383 	clz	r3, r3
 800522a:	b2db      	uxtb	r3, r3
 800522c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005230:	b2db      	uxtb	r3, r3
 8005232:	f003 031f 	and.w	r3, r3, #31
 8005236:	2101      	movs	r1, #1
 8005238:	fa01 f303 	lsl.w	r3, r1, r3
 800523c:	4013      	ands	r3, r2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d197      	bne.n	8005172 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005246:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 81a5 	beq.w	80055a2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005258:	2300      	movs	r3, #0
 800525a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800525e:	4b1c      	ldr	r3, [pc, #112]	; (80052d0 <HAL_RCC_OscConfig+0x8f8>)
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d116      	bne.n	8005298 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800526a:	4b19      	ldr	r3, [pc, #100]	; (80052d0 <HAL_RCC_OscConfig+0x8f8>)
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	4a18      	ldr	r2, [pc, #96]	; (80052d0 <HAL_RCC_OscConfig+0x8f8>)
 8005270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005274:	61d3      	str	r3, [r2, #28]
 8005276:	4b16      	ldr	r3, [pc, #88]	; (80052d0 <HAL_RCC_OscConfig+0x8f8>)
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800527e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005282:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800528c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005290:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005292:	2301      	movs	r3, #1
 8005294:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005298:	4b0f      	ldr	r3, [pc, #60]	; (80052d8 <HAL_RCC_OscConfig+0x900>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d121      	bne.n	80052e8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052a4:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <HAL_RCC_OscConfig+0x900>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a0b      	ldr	r2, [pc, #44]	; (80052d8 <HAL_RCC_OscConfig+0x900>)
 80052aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ae:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052b0:	f7ff f8a8 	bl	8004404 <HAL_GetTick>
 80052b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b8:	e010      	b.n	80052dc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ba:	f7ff f8a3 	bl	8004404 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b64      	cmp	r3, #100	; 0x64
 80052c8:	d908      	bls.n	80052dc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e3d1      	b.n	8005a72 <HAL_RCC_OscConfig+0x109a>
 80052ce:	bf00      	nop
 80052d0:	40021000 	.word	0x40021000
 80052d4:	10908120 	.word	0x10908120
 80052d8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052dc:	4b8d      	ldr	r3, [pc, #564]	; (8005514 <HAL_RCC_OscConfig+0xb3c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0e8      	beq.n	80052ba <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d106      	bne.n	8005306 <HAL_RCC_OscConfig+0x92e>
 80052f8:	4b87      	ldr	r3, [pc, #540]	; (8005518 <HAL_RCC_OscConfig+0xb40>)
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	4a86      	ldr	r2, [pc, #536]	; (8005518 <HAL_RCC_OscConfig+0xb40>)
 80052fe:	f043 0301 	orr.w	r3, r3, #1
 8005302:	6213      	str	r3, [r2, #32]
 8005304:	e035      	b.n	8005372 <HAL_RCC_OscConfig+0x99a>
 8005306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800530a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10c      	bne.n	8005330 <HAL_RCC_OscConfig+0x958>
 8005316:	4b80      	ldr	r3, [pc, #512]	; (8005518 <HAL_RCC_OscConfig+0xb40>)
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	4a7f      	ldr	r2, [pc, #508]	; (8005518 <HAL_RCC_OscConfig+0xb40>)
 800531c:	f023 0301 	bic.w	r3, r3, #1
 8005320:	6213      	str	r3, [r2, #32]
 8005322:	4b7d      	ldr	r3, [pc, #500]	; (8005518 <HAL_RCC_OscConfig+0xb40>)
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	4a7c      	ldr	r2, [pc, #496]	; (8005518 <HAL_RCC_OscConfig+0xb40>)
 8005328:	f023 0304 	bic.w	r3, r3, #4
 800532c:	6213      	str	r3, [r2, #32]
 800532e:	e020      	b.n	8005372 <HAL_RCC_OscConfig+0x99a>
 8005330:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005334:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	2b05      	cmp	r3, #5
 800533e:	d10c      	bne.n	800535a <HAL_RCC_OscConfig+0x982>
 8005340:	4b75      	ldr	r3, [pc, #468]	; (8005518 <HAL_RCC_OscConfig+0xb40>)
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	4a74      	ldr	r2, [pc, #464]	; (8005518 <HAL_RCC_OscConfig+0xb40>)
 8005346:	f043 0304 	orr.w	r3, r3, #4
 800534a:	6213      	str	r3, [r2, #32]
 800534c:	4b72      	ldr	r3, [pc, #456]	; (8005518 <HAL_RCC_OscConfig+0xb40>)
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	4a71      	ldr	r2, [pc, #452]	; (8005518 <HAL_RCC_OscConfig+0xb40>)
 8005352:	f043 0301 	orr.w	r3, r3, #1
 8005356:	6213      	str	r3, [r2, #32]
 8005358:	e00b      	b.n	8005372 <HAL_RCC_OscConfig+0x99a>
 800535a:	4b6f      	ldr	r3, [pc, #444]	; (8005518 <HAL_RCC_OscConfig+0xb40>)
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	4a6e      	ldr	r2, [pc, #440]	; (8005518 <HAL_RCC_OscConfig+0xb40>)
 8005360:	f023 0301 	bic.w	r3, r3, #1
 8005364:	6213      	str	r3, [r2, #32]
 8005366:	4b6c      	ldr	r3, [pc, #432]	; (8005518 <HAL_RCC_OscConfig+0xb40>)
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	4a6b      	ldr	r2, [pc, #428]	; (8005518 <HAL_RCC_OscConfig+0xb40>)
 800536c:	f023 0304 	bic.w	r3, r3, #4
 8005370:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005372:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005376:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 8081 	beq.w	8005486 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005384:	f7ff f83e 	bl	8004404 <HAL_GetTick>
 8005388:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800538c:	e00b      	b.n	80053a6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800538e:	f7ff f839 	bl	8004404 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	f241 3288 	movw	r2, #5000	; 0x1388
 800539e:	4293      	cmp	r3, r2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e365      	b.n	8005a72 <HAL_RCC_OscConfig+0x109a>
 80053a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80053ae:	2202      	movs	r2, #2
 80053b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	fa93 f2a3 	rbit	r2, r3
 80053c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053ce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80053d2:	2202      	movs	r2, #2
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053da:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	fa93 f2a3 	rbit	r2, r3
 80053e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80053ec:	601a      	str	r2, [r3, #0]
  return result;
 80053ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053f2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80053f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f8:	fab3 f383 	clz	r3, r3
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	b2db      	uxtb	r3, r3
 8005402:	f043 0302 	orr.w	r3, r3, #2
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d102      	bne.n	8005412 <HAL_RCC_OscConfig+0xa3a>
 800540c:	4b42      	ldr	r3, [pc, #264]	; (8005518 <HAL_RCC_OscConfig+0xb40>)
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	e013      	b.n	800543a <HAL_RCC_OscConfig+0xa62>
 8005412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005416:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800541a:	2202      	movs	r2, #2
 800541c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005422:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	fa93 f2a3 	rbit	r2, r3
 800542c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005430:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	4b38      	ldr	r3, [pc, #224]	; (8005518 <HAL_RCC_OscConfig+0xb40>)
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800543e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005442:	2102      	movs	r1, #2
 8005444:	6011      	str	r1, [r2, #0]
 8005446:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800544a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800544e:	6812      	ldr	r2, [r2, #0]
 8005450:	fa92 f1a2 	rbit	r1, r2
 8005454:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005458:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800545c:	6011      	str	r1, [r2, #0]
  return result;
 800545e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005462:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005466:	6812      	ldr	r2, [r2, #0]
 8005468:	fab2 f282 	clz	r2, r2
 800546c:	b2d2      	uxtb	r2, r2
 800546e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	f002 021f 	and.w	r2, r2, #31
 8005478:	2101      	movs	r1, #1
 800547a:	fa01 f202 	lsl.w	r2, r1, r2
 800547e:	4013      	ands	r3, r2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d084      	beq.n	800538e <HAL_RCC_OscConfig+0x9b6>
 8005484:	e083      	b.n	800558e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005486:	f7fe ffbd 	bl	8004404 <HAL_GetTick>
 800548a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800548e:	e00b      	b.n	80054a8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005490:	f7fe ffb8 	bl	8004404 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e2e4      	b.n	8005a72 <HAL_RCC_OscConfig+0x109a>
 80054a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054ac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80054b0:	2202      	movs	r2, #2
 80054b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054b8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	fa93 f2a3 	rbit	r2, r3
 80054c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054c6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054d0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80054d4:	2202      	movs	r2, #2
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054dc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	fa93 f2a3 	rbit	r2, r3
 80054e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80054ee:	601a      	str	r2, [r3, #0]
  return result;
 80054f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054f4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80054f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054fa:	fab3 f383 	clz	r3, r3
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	095b      	lsrs	r3, r3, #5
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f043 0302 	orr.w	r3, r3, #2
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d106      	bne.n	800551c <HAL_RCC_OscConfig+0xb44>
 800550e:	4b02      	ldr	r3, [pc, #8]	; (8005518 <HAL_RCC_OscConfig+0xb40>)
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	e017      	b.n	8005544 <HAL_RCC_OscConfig+0xb6c>
 8005514:	40007000 	.word	0x40007000
 8005518:	40021000 	.word	0x40021000
 800551c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005520:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005524:	2202      	movs	r2, #2
 8005526:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005528:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800552c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	fa93 f2a3 	rbit	r2, r3
 8005536:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800553a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	4bb3      	ldr	r3, [pc, #716]	; (8005810 <HAL_RCC_OscConfig+0xe38>)
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005548:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800554c:	2102      	movs	r1, #2
 800554e:	6011      	str	r1, [r2, #0]
 8005550:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005554:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005558:	6812      	ldr	r2, [r2, #0]
 800555a:	fa92 f1a2 	rbit	r1, r2
 800555e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005562:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8005566:	6011      	str	r1, [r2, #0]
  return result;
 8005568:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800556c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8005570:	6812      	ldr	r2, [r2, #0]
 8005572:	fab2 f282 	clz	r2, r2
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800557c:	b2d2      	uxtb	r2, r2
 800557e:	f002 021f 	and.w	r2, r2, #31
 8005582:	2101      	movs	r1, #1
 8005584:	fa01 f202 	lsl.w	r2, r1, r2
 8005588:	4013      	ands	r3, r2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d180      	bne.n	8005490 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800558e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8005592:	2b01      	cmp	r3, #1
 8005594:	d105      	bne.n	80055a2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005596:	4b9e      	ldr	r3, [pc, #632]	; (8005810 <HAL_RCC_OscConfig+0xe38>)
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	4a9d      	ldr	r2, [pc, #628]	; (8005810 <HAL_RCC_OscConfig+0xe38>)
 800559c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055a0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 825e 	beq.w	8005a70 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055b4:	4b96      	ldr	r3, [pc, #600]	; (8005810 <HAL_RCC_OscConfig+0xe38>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f003 030c 	and.w	r3, r3, #12
 80055bc:	2b08      	cmp	r3, #8
 80055be:	f000 821f 	beq.w	8005a00 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	f040 8170 	bne.w	80058b4 <HAL_RCC_OscConfig+0xedc>
 80055d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055d8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80055dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055e6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	fa93 f2a3 	rbit	r2, r3
 80055f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055f4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80055f8:	601a      	str	r2, [r3, #0]
  return result;
 80055fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055fe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005602:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005604:	fab3 f383 	clz	r3, r3
 8005608:	b2db      	uxtb	r3, r3
 800560a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800560e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	461a      	mov	r2, r3
 8005616:	2300      	movs	r3, #0
 8005618:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800561a:	f7fe fef3 	bl	8004404 <HAL_GetTick>
 800561e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005622:	e009      	b.n	8005638 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005624:	f7fe feee 	bl	8004404 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e21c      	b.n	8005a72 <HAL_RCC_OscConfig+0x109a>
 8005638:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800563c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005640:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005644:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005646:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800564a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	fa93 f2a3 	rbit	r2, r3
 8005654:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005658:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800565c:	601a      	str	r2, [r3, #0]
  return result;
 800565e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005662:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005666:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005668:	fab3 f383 	clz	r3, r3
 800566c:	b2db      	uxtb	r3, r3
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	b2db      	uxtb	r3, r3
 8005672:	f043 0301 	orr.w	r3, r3, #1
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b01      	cmp	r3, #1
 800567a:	d102      	bne.n	8005682 <HAL_RCC_OscConfig+0xcaa>
 800567c:	4b64      	ldr	r3, [pc, #400]	; (8005810 <HAL_RCC_OscConfig+0xe38>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	e027      	b.n	80056d2 <HAL_RCC_OscConfig+0xcfa>
 8005682:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005686:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800568a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800568e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005694:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	fa93 f2a3 	rbit	r2, r3
 800569e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056a2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056ac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80056b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056ba:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	fa93 f2a3 	rbit	r2, r3
 80056c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056c8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	4b50      	ldr	r3, [pc, #320]	; (8005810 <HAL_RCC_OscConfig+0xe38>)
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80056d6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80056da:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80056de:	6011      	str	r1, [r2, #0]
 80056e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80056e4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80056e8:	6812      	ldr	r2, [r2, #0]
 80056ea:	fa92 f1a2 	rbit	r1, r2
 80056ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80056f2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80056f6:	6011      	str	r1, [r2, #0]
  return result;
 80056f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80056fc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8005700:	6812      	ldr	r2, [r2, #0]
 8005702:	fab2 f282 	clz	r2, r2
 8005706:	b2d2      	uxtb	r2, r2
 8005708:	f042 0220 	orr.w	r2, r2, #32
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	f002 021f 	and.w	r2, r2, #31
 8005712:	2101      	movs	r1, #1
 8005714:	fa01 f202 	lsl.w	r2, r1, r2
 8005718:	4013      	ands	r3, r2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d182      	bne.n	8005624 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800571e:	4b3c      	ldr	r3, [pc, #240]	; (8005810 <HAL_RCC_OscConfig+0xe38>)
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	f023 020f 	bic.w	r2, r3, #15
 8005726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800572a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	4937      	ldr	r1, [pc, #220]	; (8005810 <HAL_RCC_OscConfig+0xe38>)
 8005734:	4313      	orrs	r3, r2
 8005736:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005738:	4b35      	ldr	r3, [pc, #212]	; (8005810 <HAL_RCC_OscConfig+0xe38>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005740:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005744:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6a19      	ldr	r1, [r3, #32]
 800574c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005750:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	430b      	orrs	r3, r1
 800575a:	492d      	ldr	r1, [pc, #180]	; (8005810 <HAL_RCC_OscConfig+0xe38>)
 800575c:	4313      	orrs	r3, r2
 800575e:	604b      	str	r3, [r1, #4]
 8005760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005764:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005768:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800576c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005772:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	fa93 f2a3 	rbit	r2, r3
 800577c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005780:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005784:	601a      	str	r2, [r3, #0]
  return result;
 8005786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800578a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800578e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005790:	fab3 f383 	clz	r3, r3
 8005794:	b2db      	uxtb	r3, r3
 8005796:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800579a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	461a      	mov	r2, r3
 80057a2:	2301      	movs	r3, #1
 80057a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a6:	f7fe fe2d 	bl	8004404 <HAL_GetTick>
 80057aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057ae:	e009      	b.n	80057c4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057b0:	f7fe fe28 	bl	8004404 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e156      	b.n	8005a72 <HAL_RCC_OscConfig+0x109a>
 80057c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057c8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80057cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057d6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	fa93 f2a3 	rbit	r2, r3
 80057e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057e4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80057e8:	601a      	str	r2, [r3, #0]
  return result;
 80057ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057ee:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80057f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057f4:	fab3 f383 	clz	r3, r3
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	095b      	lsrs	r3, r3, #5
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	d105      	bne.n	8005814 <HAL_RCC_OscConfig+0xe3c>
 8005808:	4b01      	ldr	r3, [pc, #4]	; (8005810 <HAL_RCC_OscConfig+0xe38>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	e02a      	b.n	8005864 <HAL_RCC_OscConfig+0xe8c>
 800580e:	bf00      	nop
 8005810:	40021000 	.word	0x40021000
 8005814:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005818:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800581c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005820:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005822:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005826:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	fa93 f2a3 	rbit	r2, r3
 8005830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005834:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800583e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005842:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800584c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	fa93 f2a3 	rbit	r2, r3
 8005856:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800585a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	4b86      	ldr	r3, [pc, #536]	; (8005a7c <HAL_RCC_OscConfig+0x10a4>)
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005868:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800586c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005870:	6011      	str	r1, [r2, #0]
 8005872:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005876:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800587a:	6812      	ldr	r2, [r2, #0]
 800587c:	fa92 f1a2 	rbit	r1, r2
 8005880:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005884:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005888:	6011      	str	r1, [r2, #0]
  return result;
 800588a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800588e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005892:	6812      	ldr	r2, [r2, #0]
 8005894:	fab2 f282 	clz	r2, r2
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	f042 0220 	orr.w	r2, r2, #32
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	f002 021f 	and.w	r2, r2, #31
 80058a4:	2101      	movs	r1, #1
 80058a6:	fa01 f202 	lsl.w	r2, r1, r2
 80058aa:	4013      	ands	r3, r2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f43f af7f 	beq.w	80057b0 <HAL_RCC_OscConfig+0xdd8>
 80058b2:	e0dd      	b.n	8005a70 <HAL_RCC_OscConfig+0x1098>
 80058b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058b8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80058bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058c6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	fa93 f2a3 	rbit	r2, r3
 80058d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058d4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80058d8:	601a      	str	r2, [r3, #0]
  return result;
 80058da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058de:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80058e2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e4:	fab3 f383 	clz	r3, r3
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80058ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	461a      	mov	r2, r3
 80058f6:	2300      	movs	r3, #0
 80058f8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fa:	f7fe fd83 	bl	8004404 <HAL_GetTick>
 80058fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005902:	e009      	b.n	8005918 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005904:	f7fe fd7e 	bl	8004404 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d901      	bls.n	8005918 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e0ac      	b.n	8005a72 <HAL_RCC_OscConfig+0x109a>
 8005918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800591c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005920:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005926:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800592a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	fa93 f2a3 	rbit	r2, r3
 8005934:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005938:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800593c:	601a      	str	r2, [r3, #0]
  return result;
 800593e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005942:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005946:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005948:	fab3 f383 	clz	r3, r3
 800594c:	b2db      	uxtb	r3, r3
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	b2db      	uxtb	r3, r3
 8005952:	f043 0301 	orr.w	r3, r3, #1
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b01      	cmp	r3, #1
 800595a:	d102      	bne.n	8005962 <HAL_RCC_OscConfig+0xf8a>
 800595c:	4b47      	ldr	r3, [pc, #284]	; (8005a7c <HAL_RCC_OscConfig+0x10a4>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	e027      	b.n	80059b2 <HAL_RCC_OscConfig+0xfda>
 8005962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005966:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800596a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800596e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005970:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005974:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	fa93 f2a3 	rbit	r2, r3
 800597e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005982:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800598c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005990:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800599a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	fa93 f2a3 	rbit	r2, r3
 80059a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059a8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	4b33      	ldr	r3, [pc, #204]	; (8005a7c <HAL_RCC_OscConfig+0x10a4>)
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80059b6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80059ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80059be:	6011      	str	r1, [r2, #0]
 80059c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80059c4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80059c8:	6812      	ldr	r2, [r2, #0]
 80059ca:	fa92 f1a2 	rbit	r1, r2
 80059ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80059d2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80059d6:	6011      	str	r1, [r2, #0]
  return result;
 80059d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80059dc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80059e0:	6812      	ldr	r2, [r2, #0]
 80059e2:	fab2 f282 	clz	r2, r2
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	f042 0220 	orr.w	r2, r2, #32
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	f002 021f 	and.w	r2, r2, #31
 80059f2:	2101      	movs	r1, #1
 80059f4:	fa01 f202 	lsl.w	r2, r1, r2
 80059f8:	4013      	ands	r3, r2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d182      	bne.n	8005904 <HAL_RCC_OscConfig+0xf2c>
 80059fe:	e037      	b.n	8005a70 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e02e      	b.n	8005a72 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a14:	4b19      	ldr	r3, [pc, #100]	; (8005a7c <HAL_RCC_OscConfig+0x10a4>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005a1c:	4b17      	ldr	r3, [pc, #92]	; (8005a7c <HAL_RCC_OscConfig+0x10a4>)
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005a24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005a28:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d117      	bne.n	8005a6c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005a3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005a40:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d10b      	bne.n	8005a6c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005a54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a58:	f003 020f 	and.w	r2, r3, #15
 8005a5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d001      	beq.n	8005a70 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e000      	b.n	8005a72 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	40021000 	.word	0x40021000

08005a80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b09e      	sub	sp, #120	; 0x78
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e162      	b.n	8005d5e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a98:	4b90      	ldr	r3, [pc, #576]	; (8005cdc <HAL_RCC_ClockConfig+0x25c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0307 	and.w	r3, r3, #7
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d910      	bls.n	8005ac8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aa6:	4b8d      	ldr	r3, [pc, #564]	; (8005cdc <HAL_RCC_ClockConfig+0x25c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f023 0207 	bic.w	r2, r3, #7
 8005aae:	498b      	ldr	r1, [pc, #556]	; (8005cdc <HAL_RCC_ClockConfig+0x25c>)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab6:	4b89      	ldr	r3, [pc, #548]	; (8005cdc <HAL_RCC_ClockConfig+0x25c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e14a      	b.n	8005d5e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d008      	beq.n	8005ae6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ad4:	4b82      	ldr	r3, [pc, #520]	; (8005ce0 <HAL_RCC_ClockConfig+0x260>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	497f      	ldr	r1, [pc, #508]	; (8005ce0 <HAL_RCC_ClockConfig+0x260>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 80dc 	beq.w	8005cac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d13c      	bne.n	8005b76 <HAL_RCC_ClockConfig+0xf6>
 8005afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b00:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b04:	fa93 f3a3 	rbit	r3, r3
 8005b08:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b0c:	fab3 f383 	clz	r3, r3
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	f043 0301 	orr.w	r3, r3, #1
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d102      	bne.n	8005b26 <HAL_RCC_ClockConfig+0xa6>
 8005b20:	4b6f      	ldr	r3, [pc, #444]	; (8005ce0 <HAL_RCC_ClockConfig+0x260>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	e00f      	b.n	8005b46 <HAL_RCC_ClockConfig+0xc6>
 8005b26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b2e:	fa93 f3a3 	rbit	r3, r3
 8005b32:	667b      	str	r3, [r7, #100]	; 0x64
 8005b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b38:	663b      	str	r3, [r7, #96]	; 0x60
 8005b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b3c:	fa93 f3a3 	rbit	r3, r3
 8005b40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b42:	4b67      	ldr	r3, [pc, #412]	; (8005ce0 <HAL_RCC_ClockConfig+0x260>)
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b4e:	fa92 f2a2 	rbit	r2, r2
 8005b52:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005b54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b56:	fab2 f282 	clz	r2, r2
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	f042 0220 	orr.w	r2, r2, #32
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	f002 021f 	and.w	r2, r2, #31
 8005b66:	2101      	movs	r1, #1
 8005b68:	fa01 f202 	lsl.w	r2, r1, r2
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d17b      	bne.n	8005c6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e0f3      	b.n	8005d5e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d13c      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0x178>
 8005b7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b86:	fa93 f3a3 	rbit	r3, r3
 8005b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b8e:	fab3 f383 	clz	r3, r3
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	095b      	lsrs	r3, r3, #5
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	f043 0301 	orr.w	r3, r3, #1
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d102      	bne.n	8005ba8 <HAL_RCC_ClockConfig+0x128>
 8005ba2:	4b4f      	ldr	r3, [pc, #316]	; (8005ce0 <HAL_RCC_ClockConfig+0x260>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	e00f      	b.n	8005bc8 <HAL_RCC_ClockConfig+0x148>
 8005ba8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb0:	fa93 f3a3 	rbit	r3, r3
 8005bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bba:	643b      	str	r3, [r7, #64]	; 0x40
 8005bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bbe:	fa93 f3a3 	rbit	r3, r3
 8005bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bc4:	4b46      	ldr	r3, [pc, #280]	; (8005ce0 <HAL_RCC_ClockConfig+0x260>)
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bcc:	63ba      	str	r2, [r7, #56]	; 0x38
 8005bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bd0:	fa92 f2a2 	rbit	r2, r2
 8005bd4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bd8:	fab2 f282 	clz	r2, r2
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	f042 0220 	orr.w	r2, r2, #32
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	f002 021f 	and.w	r2, r2, #31
 8005be8:	2101      	movs	r1, #1
 8005bea:	fa01 f202 	lsl.w	r2, r1, r2
 8005bee:	4013      	ands	r3, r2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d13a      	bne.n	8005c6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e0b2      	b.n	8005d5e <HAL_RCC_ClockConfig+0x2de>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	fa93 f3a3 	rbit	r3, r3
 8005c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c06:	fab3 f383 	clz	r3, r3
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	095b      	lsrs	r3, r3, #5
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	f043 0301 	orr.w	r3, r3, #1
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d102      	bne.n	8005c20 <HAL_RCC_ClockConfig+0x1a0>
 8005c1a:	4b31      	ldr	r3, [pc, #196]	; (8005ce0 <HAL_RCC_ClockConfig+0x260>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	e00d      	b.n	8005c3c <HAL_RCC_ClockConfig+0x1bc>
 8005c20:	2302      	movs	r3, #2
 8005c22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c26:	fa93 f3a3 	rbit	r3, r3
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	623b      	str	r3, [r7, #32]
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	fa93 f3a3 	rbit	r3, r3
 8005c36:	61fb      	str	r3, [r7, #28]
 8005c38:	4b29      	ldr	r3, [pc, #164]	; (8005ce0 <HAL_RCC_ClockConfig+0x260>)
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	61ba      	str	r2, [r7, #24]
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	fa92 f2a2 	rbit	r2, r2
 8005c46:	617a      	str	r2, [r7, #20]
  return result;
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	fab2 f282 	clz	r2, r2
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	f042 0220 	orr.w	r2, r2, #32
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	f002 021f 	and.w	r2, r2, #31
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c60:	4013      	ands	r3, r2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e079      	b.n	8005d5e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c6a:	4b1d      	ldr	r3, [pc, #116]	; (8005ce0 <HAL_RCC_ClockConfig+0x260>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f023 0203 	bic.w	r2, r3, #3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	491a      	ldr	r1, [pc, #104]	; (8005ce0 <HAL_RCC_ClockConfig+0x260>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c7c:	f7fe fbc2 	bl	8004404 <HAL_GetTick>
 8005c80:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c82:	e00a      	b.n	8005c9a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c84:	f7fe fbbe 	bl	8004404 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e061      	b.n	8005d5e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c9a:	4b11      	ldr	r3, [pc, #68]	; (8005ce0 <HAL_RCC_ClockConfig+0x260>)
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f003 020c 	and.w	r2, r3, #12
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d1eb      	bne.n	8005c84 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cac:	4b0b      	ldr	r3, [pc, #44]	; (8005cdc <HAL_RCC_ClockConfig+0x25c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d214      	bcs.n	8005ce4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cba:	4b08      	ldr	r3, [pc, #32]	; (8005cdc <HAL_RCC_ClockConfig+0x25c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f023 0207 	bic.w	r2, r3, #7
 8005cc2:	4906      	ldr	r1, [pc, #24]	; (8005cdc <HAL_RCC_ClockConfig+0x25c>)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cca:	4b04      	ldr	r3, [pc, #16]	; (8005cdc <HAL_RCC_ClockConfig+0x25c>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d005      	beq.n	8005ce4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e040      	b.n	8005d5e <HAL_RCC_ClockConfig+0x2de>
 8005cdc:	40022000 	.word	0x40022000
 8005ce0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d008      	beq.n	8005d02 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cf0:	4b1d      	ldr	r3, [pc, #116]	; (8005d68 <HAL_RCC_ClockConfig+0x2e8>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	491a      	ldr	r1, [pc, #104]	; (8005d68 <HAL_RCC_ClockConfig+0x2e8>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d009      	beq.n	8005d22 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d0e:	4b16      	ldr	r3, [pc, #88]	; (8005d68 <HAL_RCC_ClockConfig+0x2e8>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	4912      	ldr	r1, [pc, #72]	; (8005d68 <HAL_RCC_ClockConfig+0x2e8>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005d22:	f000 f829 	bl	8005d78 <HAL_RCC_GetSysClockFreq>
 8005d26:	4601      	mov	r1, r0
 8005d28:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <HAL_RCC_ClockConfig+0x2e8>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d30:	22f0      	movs	r2, #240	; 0xf0
 8005d32:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	fa92 f2a2 	rbit	r2, r2
 8005d3a:	60fa      	str	r2, [r7, #12]
  return result;
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	fab2 f282 	clz	r2, r2
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	40d3      	lsrs	r3, r2
 8005d46:	4a09      	ldr	r2, [pc, #36]	; (8005d6c <HAL_RCC_ClockConfig+0x2ec>)
 8005d48:	5cd3      	ldrb	r3, [r2, r3]
 8005d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8005d4e:	4a08      	ldr	r2, [pc, #32]	; (8005d70 <HAL_RCC_ClockConfig+0x2f0>)
 8005d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005d52:	4b08      	ldr	r3, [pc, #32]	; (8005d74 <HAL_RCC_ClockConfig+0x2f4>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe fb24 	bl	80043a4 <HAL_InitTick>
  
  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3778      	adds	r7, #120	; 0x78
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	08008cfc 	.word	0x08008cfc
 8005d70:	20000000 	.word	0x20000000
 8005d74:	20000004 	.word	0x20000004

08005d78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b08b      	sub	sp, #44	; 0x2c
 8005d7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61fb      	str	r3, [r7, #28]
 8005d82:	2300      	movs	r3, #0
 8005d84:	61bb      	str	r3, [r7, #24]
 8005d86:	2300      	movs	r3, #0
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005d92:	4b2a      	ldr	r3, [pc, #168]	; (8005e3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	f003 030c 	and.w	r3, r3, #12
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d002      	beq.n	8005da8 <HAL_RCC_GetSysClockFreq+0x30>
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d003      	beq.n	8005dae <HAL_RCC_GetSysClockFreq+0x36>
 8005da6:	e03f      	b.n	8005e28 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005da8:	4b25      	ldr	r3, [pc, #148]	; (8005e40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005daa:	623b      	str	r3, [r7, #32]
      break;
 8005dac:	e03f      	b.n	8005e2e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005db4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005db8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	fa92 f2a2 	rbit	r2, r2
 8005dc0:	607a      	str	r2, [r7, #4]
  return result;
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	fab2 f282 	clz	r2, r2
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	40d3      	lsrs	r3, r2
 8005dcc:	4a1d      	ldr	r2, [pc, #116]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005dce:	5cd3      	ldrb	r3, [r2, r3]
 8005dd0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005dd2:	4b1a      	ldr	r3, [pc, #104]	; (8005e3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	220f      	movs	r2, #15
 8005ddc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	fa92 f2a2 	rbit	r2, r2
 8005de4:	60fa      	str	r2, [r7, #12]
  return result;
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	fab2 f282 	clz	r2, r2
 8005dec:	b2d2      	uxtb	r2, r2
 8005dee:	40d3      	lsrs	r3, r2
 8005df0:	4a15      	ldr	r2, [pc, #84]	; (8005e48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005df2:	5cd3      	ldrb	r3, [r2, r3]
 8005df4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d008      	beq.n	8005e12 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005e00:	4a0f      	ldr	r2, [pc, #60]	; (8005e40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	fb02 f303 	mul.w	r3, r2, r3
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e10:	e007      	b.n	8005e22 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005e12:	4a0b      	ldr	r2, [pc, #44]	; (8005e40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	fb02 f303 	mul.w	r3, r2, r3
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	623b      	str	r3, [r7, #32]
      break;
 8005e26:	e002      	b.n	8005e2e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e28:	4b05      	ldr	r3, [pc, #20]	; (8005e40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005e2a:	623b      	str	r3, [r7, #32]
      break;
 8005e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	372c      	adds	r7, #44	; 0x2c
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	007a1200 	.word	0x007a1200
 8005e44:	08008d14 	.word	0x08008d14
 8005e48:	08008d24 	.word	0x08008d24

08005e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e50:	4b02      	ldr	r3, [pc, #8]	; (8005e5c <HAL_RCC_GetHCLKFreq+0x10>)
 8005e52:	681b      	ldr	r3, [r3, #0]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bc80      	pop	{r7}
 8005e5a:	4770      	bx	lr
 8005e5c:	20000000 	.word	0x20000000

08005e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005e66:	f7ff fff1 	bl	8005e4c <HAL_RCC_GetHCLKFreq>
 8005e6a:	4601      	mov	r1, r0
 8005e6c:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e74:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005e78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	fa92 f2a2 	rbit	r2, r2
 8005e80:	603a      	str	r2, [r7, #0]
  return result;
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	fab2 f282 	clz	r2, r2
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	40d3      	lsrs	r3, r2
 8005e8c:	4a04      	ldr	r2, [pc, #16]	; (8005ea0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005e8e:	5cd3      	ldrb	r3, [r2, r3]
 8005e90:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	08008d0c 	.word	0x08008d0c

08005ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005eaa:	f7ff ffcf 	bl	8005e4c <HAL_RCC_GetHCLKFreq>
 8005eae:	4601      	mov	r1, r0
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005eb8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005ebc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	fa92 f2a2 	rbit	r2, r2
 8005ec4:	603a      	str	r2, [r7, #0]
  return result;
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	fab2 f282 	clz	r2, r2
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	40d3      	lsrs	r3, r2
 8005ed0:	4a04      	ldr	r2, [pc, #16]	; (8005ee4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005ed2:	5cd3      	ldrb	r3, [r2, r3]
 8005ed4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	08008d0c 	.word	0x08008d0c

08005ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b092      	sub	sp, #72	; 0x48
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 80d4 	beq.w	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f0c:	4b4e      	ldr	r3, [pc, #312]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10e      	bne.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f18:	4b4b      	ldr	r3, [pc, #300]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	4a4a      	ldr	r2, [pc, #296]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f22:	61d3      	str	r3, [r2, #28]
 8005f24:	4b48      	ldr	r3, [pc, #288]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f2c:	60bb      	str	r3, [r7, #8]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f30:	2301      	movs	r3, #1
 8005f32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f36:	4b45      	ldr	r3, [pc, #276]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d118      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f42:	4b42      	ldr	r3, [pc, #264]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a41      	ldr	r2, [pc, #260]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f4e:	f7fe fa59 	bl	8004404 <HAL_GetTick>
 8005f52:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f54:	e008      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f56:	f7fe fa55 	bl	8004404 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b64      	cmp	r3, #100	; 0x64
 8005f62:	d901      	bls.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e1d6      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f68:	4b38      	ldr	r3, [pc, #224]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d0f0      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f74:	4b34      	ldr	r3, [pc, #208]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 8084 	beq.w	800608e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d07c      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f94:	4b2c      	ldr	r3, [pc, #176]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fa2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	fa93 f3a3 	rbit	r3, r3
 8005faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fae:	fab3 f383 	clz	r3, r3
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	4b26      	ldr	r3, [pc, #152]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fb8:	4413      	add	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	6013      	str	r3, [r2, #0]
 8005fc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fca:	fa93 f3a3 	rbit	r3, r3
 8005fce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fd2:	fab3 f383 	clz	r3, r3
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	461a      	mov	r2, r3
 8005fda:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005fe6:	4a18      	ldr	r2, [pc, #96]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d04b      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff6:	f7fe fa05 	bl	8004404 <HAL_GetTick>
 8005ffa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ffc:	e00a      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ffe:	f7fe fa01 	bl	8004404 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	f241 3288 	movw	r2, #5000	; 0x1388
 800600c:	4293      	cmp	r3, r2
 800600e:	d901      	bls.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e180      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006014:	2302      	movs	r3, #2
 8006016:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	fa93 f3a3 	rbit	r3, r3
 800601e:	627b      	str	r3, [r7, #36]	; 0x24
 8006020:	2302      	movs	r3, #2
 8006022:	623b      	str	r3, [r7, #32]
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	fa93 f3a3 	rbit	r3, r3
 800602a:	61fb      	str	r3, [r7, #28]
  return result;
 800602c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800602e:	fab3 f383 	clz	r3, r3
 8006032:	b2db      	uxtb	r3, r3
 8006034:	095b      	lsrs	r3, r3, #5
 8006036:	b2db      	uxtb	r3, r3
 8006038:	f043 0302 	orr.w	r3, r3, #2
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d108      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006042:	4b01      	ldr	r3, [pc, #4]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	e00d      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006048:	40021000 	.word	0x40021000
 800604c:	40007000 	.word	0x40007000
 8006050:	10908100 	.word	0x10908100
 8006054:	2302      	movs	r3, #2
 8006056:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	fa93 f3a3 	rbit	r3, r3
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	4b9a      	ldr	r3, [pc, #616]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	2202      	movs	r2, #2
 8006066:	613a      	str	r2, [r7, #16]
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	fa92 f2a2 	rbit	r2, r2
 800606e:	60fa      	str	r2, [r7, #12]
  return result;
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	fab2 f282 	clz	r2, r2
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800607c:	b2d2      	uxtb	r2, r2
 800607e:	f002 021f 	and.w	r2, r2, #31
 8006082:	2101      	movs	r1, #1
 8006084:	fa01 f202 	lsl.w	r2, r1, r2
 8006088:	4013      	ands	r3, r2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0b7      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800608e:	4b8f      	ldr	r3, [pc, #572]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	498c      	ldr	r1, [pc, #560]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800609c:	4313      	orrs	r3, r2
 800609e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80060a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d105      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a8:	4b88      	ldr	r3, [pc, #544]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	4a87      	ldr	r2, [pc, #540]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060c0:	4b82      	ldr	r3, [pc, #520]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c4:	f023 0203 	bic.w	r2, r3, #3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	497f      	ldr	r1, [pc, #508]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d008      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060de:	4b7b      	ldr	r3, [pc, #492]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	4978      	ldr	r1, [pc, #480]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0304 	and.w	r3, r3, #4
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d008      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060fc:	4b73      	ldr	r3, [pc, #460]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	4970      	ldr	r1, [pc, #448]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800610a:	4313      	orrs	r3, r2
 800610c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0320 	and.w	r3, r3, #32
 8006116:	2b00      	cmp	r3, #0
 8006118:	d008      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800611a:	4b6c      	ldr	r3, [pc, #432]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611e:	f023 0210 	bic.w	r2, r3, #16
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	4969      	ldr	r1, [pc, #420]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006128:	4313      	orrs	r3, r2
 800612a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d008      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006138:	4b64      	ldr	r3, [pc, #400]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006144:	4961      	ldr	r1, [pc, #388]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006146:	4313      	orrs	r3, r2
 8006148:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006152:	2b00      	cmp	r3, #0
 8006154:	d008      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006156:	4b5d      	ldr	r3, [pc, #372]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615a:	f023 0220 	bic.w	r2, r3, #32
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	495a      	ldr	r1, [pc, #360]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006164:	4313      	orrs	r3, r2
 8006166:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d008      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006174:	4b55      	ldr	r3, [pc, #340]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006178:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	4952      	ldr	r1, [pc, #328]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006182:	4313      	orrs	r3, r2
 8006184:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d008      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006192:	4b4e      	ldr	r3, [pc, #312]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006196:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	494b      	ldr	r1, [pc, #300]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0310 	and.w	r3, r3, #16
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d008      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061b0:	4b46      	ldr	r3, [pc, #280]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	4943      	ldr	r1, [pc, #268]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d008      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80061ce:	4b3f      	ldr	r3, [pc, #252]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	493c      	ldr	r1, [pc, #240]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d008      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80061ec:	4b37      	ldr	r3, [pc, #220]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f8:	4934      	ldr	r1, [pc, #208]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006206:	2b00      	cmp	r3, #0
 8006208:	d008      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800620a:	4b30      	ldr	r3, [pc, #192]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006216:	492d      	ldr	r1, [pc, #180]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006218:	4313      	orrs	r3, r2
 800621a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d008      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006228:	4b28      	ldr	r3, [pc, #160]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800622a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006234:	4925      	ldr	r1, [pc, #148]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006236:	4313      	orrs	r3, r2
 8006238:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d008      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006246:	4b21      	ldr	r3, [pc, #132]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	491e      	ldr	r1, [pc, #120]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006254:	4313      	orrs	r3, r2
 8006256:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d008      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006264:	4b19      	ldr	r3, [pc, #100]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006268:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006270:	4916      	ldr	r1, [pc, #88]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006272:	4313      	orrs	r3, r2
 8006274:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d008      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006282:	4b12      	ldr	r3, [pc, #72]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006286:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800628e:	490f      	ldr	r1, [pc, #60]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006290:	4313      	orrs	r3, r2
 8006292:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d008      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80062a0:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ac:	4907      	ldr	r1, [pc, #28]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00c      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80062be:	4b03      	ldr	r3, [pc, #12]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	e002      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80062ca:	bf00      	nop
 80062cc:	40021000 	.word	0x40021000
 80062d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062d2:	4913      	ldr	r1, [pc, #76]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d008      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80062e4:	4b0e      	ldr	r3, [pc, #56]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80062e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062f0:	490b      	ldr	r1, [pc, #44]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d008      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8006302:	4b07      	ldr	r3, [pc, #28]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006306:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800630e:	4904      	ldr	r1, [pc, #16]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006310:	4313      	orrs	r3, r2
 8006312:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3748      	adds	r7, #72	; 0x48
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	40021000 	.word	0x40021000

08006324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006324:	b480      	push	{r7}
 8006326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006328:	e7fe      	b.n	8006328 <NMI_Handler+0x4>

0800632a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800632a:	b480      	push	{r7}
 800632c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800632e:	e7fe      	b.n	800632e <HardFault_Handler+0x4>

08006330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006334:	e7fe      	b.n	8006334 <MemManage_Handler+0x4>

08006336 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006336:	b480      	push	{r7}
 8006338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800633a:	e7fe      	b.n	800633a <BusFault_Handler+0x4>

0800633c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006340:	e7fe      	b.n	8006340 <UsageFault_Handler+0x4>

08006342 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006342:	b480      	push	{r7}
 8006344:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006346:	bf00      	nop
 8006348:	46bd      	mov	sp, r7
 800634a:	bc80      	pop	{r7}
 800634c:	4770      	bx	lr

0800634e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800634e:	b480      	push	{r7}
 8006350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006352:	bf00      	nop
 8006354:	46bd      	mov	sp, r7
 8006356:	bc80      	pop	{r7}
 8006358:	4770      	bx	lr

0800635a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800635a:	b480      	push	{r7}
 800635c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800635e:	bf00      	nop
 8006360:	46bd      	mov	sp, r7
 8006362:	bc80      	pop	{r7}
 8006364:	4770      	bx	lr
	...

08006368 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800636c:	4802      	ldr	r0, [pc, #8]	; (8006378 <DMA1_Channel1_IRQHandler+0x10>)
 800636e:	f7fc f991 	bl	8002694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006372:	bf00      	nop
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	2000016c 	.word	0x2000016c

0800637c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006380:	4802      	ldr	r0, [pc, #8]	; (800638c <TIM3_IRQHandler+0x10>)
 8006382:	f7fc fddb 	bl	8002f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006386:	bf00      	nop
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	200000c4 	.word	0x200000c4

08006390 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006394:	4802      	ldr	r0, [pc, #8]	; (80063a0 <I2C1_EV_IRQHandler+0x10>)
 8006396:	f7fd febd 	bl	8004114 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800639a:	bf00      	nop
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	200001b0 	.word	0x200001b0

080063a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80063a8:	4802      	ldr	r0, [pc, #8]	; (80063b4 <USART1_IRQHandler+0x10>)
 80063aa:	f000 fb79 	bl	8006aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80063ae:	bf00      	nop
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	200002b8 	.word	0x200002b8

080063b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80063bc:	4802      	ldr	r0, [pc, #8]	; (80063c8 <USART2_IRQHandler+0x10>)
 80063be:	f000 fb6f 	bl	8006aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80063c2:	bf00      	nop
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	2000033c 	.word	0x2000033c

080063cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80063d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80063d4:	f7fc f82a 	bl	800242c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80063d8:	bf00      	nop
 80063da:	bd80      	pop	{r7, pc}

080063dc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80063e0:	4802      	ldr	r0, [pc, #8]	; (80063ec <SPI3_IRQHandler+0x10>)
 80063e2:	f000 f91d 	bl	8006620 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80063e6:	bf00      	nop
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	2000022c 	.word	0x2000022c

080063f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80063f8:	4a14      	ldr	r2, [pc, #80]	; (800644c <_sbrk+0x5c>)
 80063fa:	4b15      	ldr	r3, [pc, #84]	; (8006450 <_sbrk+0x60>)
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006404:	4b13      	ldr	r3, [pc, #76]	; (8006454 <_sbrk+0x64>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d102      	bne.n	8006412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800640c:	4b11      	ldr	r3, [pc, #68]	; (8006454 <_sbrk+0x64>)
 800640e:	4a12      	ldr	r2, [pc, #72]	; (8006458 <_sbrk+0x68>)
 8006410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006412:	4b10      	ldr	r3, [pc, #64]	; (8006454 <_sbrk+0x64>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4413      	add	r3, r2
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	429a      	cmp	r2, r3
 800641e:	d207      	bcs.n	8006430 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006420:	f001 ffbe 	bl	80083a0 <__errno>
 8006424:	4603      	mov	r3, r0
 8006426:	220c      	movs	r2, #12
 8006428:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800642a:	f04f 33ff 	mov.w	r3, #4294967295
 800642e:	e009      	b.n	8006444 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006430:	4b08      	ldr	r3, [pc, #32]	; (8006454 <_sbrk+0x64>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006436:	4b07      	ldr	r3, [pc, #28]	; (8006454 <_sbrk+0x64>)
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4413      	add	r3, r2
 800643e:	4a05      	ldr	r2, [pc, #20]	; (8006454 <_sbrk+0x64>)
 8006440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006442:	68fb      	ldr	r3, [r7, #12]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	20010000 	.word	0x20010000
 8006450:	00000400 	.word	0x00000400
 8006454:	20000118 	.word	0x20000118
 8006458:	20001710 	.word	0x20001710

0800645c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e0c1      	b.n	80065f2 <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	2b00      	cmp	r3, #0
 8006474:	d108      	bne.n	8006488 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800647e:	d009      	beq.n	8006494 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	61da      	str	r2, [r3, #28]
 8006486:	e005      	b.n	8006494 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d12a      	bne.n	80064fc <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a52      	ldr	r2, [pc, #328]	; (80065fc <HAL_SPI_Init+0x1a0>)
 80064b2:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a52      	ldr	r2, [pc, #328]	; (8006600 <HAL_SPI_Init+0x1a4>)
 80064b8:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a51      	ldr	r2, [pc, #324]	; (8006604 <HAL_SPI_Init+0x1a8>)
 80064be:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a51      	ldr	r2, [pc, #324]	; (8006608 <HAL_SPI_Init+0x1ac>)
 80064c4:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a50      	ldr	r2, [pc, #320]	; (800660c <HAL_SPI_Init+0x1b0>)
 80064ca:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a50      	ldr	r2, [pc, #320]	; (8006610 <HAL_SPI_Init+0x1b4>)
 80064d0:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a4f      	ldr	r2, [pc, #316]	; (8006614 <HAL_SPI_Init+0x1b8>)
 80064d6:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a4f      	ldr	r2, [pc, #316]	; (8006618 <HAL_SPI_Init+0x1bc>)
 80064dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d103      	bne.n	80064f2 <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a4b      	ldr	r2, [pc, #300]	; (800661c <HAL_SPI_Init+0x1c0>)
 80064ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006512:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800651c:	d902      	bls.n	8006524 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
 8006522:	e002      	b.n	800652a <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006528:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006532:	d007      	beq.n	8006544 <HAL_SPI_Init+0xe8>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800653c:	d002      	beq.n	8006544 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006554:	431a      	orrs	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	431a      	orrs	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800657c:	431a      	orrs	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006586:	ea42 0103 	orr.w	r1, r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	0c1b      	lsrs	r3, r3, #16
 80065a0:	f003 0204 	and.w	r2, r3, #4
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	f003 0310 	and.w	r3, r3, #16
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b2:	f003 0308 	and.w	r3, r3, #8
 80065b6:	431a      	orrs	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80065c0:	ea42 0103 	orr.w	r1, r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69da      	ldr	r2, [r3, #28]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	08006821 	.word	0x08006821
 8006600:	08006833 	.word	0x08006833
 8006604:	08006845 	.word	0x08006845
 8006608:	08006857 	.word	0x08006857
 800660c:	08006869 	.word	0x08006869
 8006610:	0800687b 	.word	0x0800687b
 8006614:	0800688d 	.word	0x0800688d
 8006618:	0800689f 	.word	0x0800689f
 800661c:	080047e1 	.word	0x080047e1

08006620 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	099b      	lsrs	r3, r3, #6
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10f      	bne.n	8006664 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00a      	beq.n	8006664 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	099b      	lsrs	r3, r3, #6
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d004      	beq.n	8006664 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	4798      	blx	r3
    return;
 8006662:	e0d8      	b.n	8006816 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	085b      	lsrs	r3, r3, #1
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00a      	beq.n	8006686 <HAL_SPI_IRQHandler+0x66>
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	09db      	lsrs	r3, r3, #7
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b00      	cmp	r3, #0
 800667a:	d004      	beq.n	8006686 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	4798      	blx	r3
    return;
 8006684:	e0c7      	b.n	8006816 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	095b      	lsrs	r3, r3, #5
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10c      	bne.n	80066ac <HAL_SPI_IRQHandler+0x8c>
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	099b      	lsrs	r3, r3, #6
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d106      	bne.n	80066ac <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	0a1b      	lsrs	r3, r3, #8
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 80b5 	beq.w	8006816 <HAL_SPI_IRQHandler+0x1f6>
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	095b      	lsrs	r3, r3, #5
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 80ae 	beq.w	8006816 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	099b      	lsrs	r3, r3, #6
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d023      	beq.n	800670e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b03      	cmp	r3, #3
 80066d0:	d011      	beq.n	80066f6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d6:	f043 0204 	orr.w	r2, r3, #4
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066de:	2300      	movs	r3, #0
 80066e0:	617b      	str	r3, [r7, #20]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	617b      	str	r3, [r7, #20]
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	e00b      	b.n	800670e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066f6:	2300      	movs	r3, #0
 80066f8:	613b      	str	r3, [r7, #16]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	613b      	str	r3, [r7, #16]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	613b      	str	r3, [r7, #16]
 800670a:	693b      	ldr	r3, [r7, #16]
        return;
 800670c:	e083      	b.n	8006816 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	095b      	lsrs	r3, r3, #5
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d014      	beq.n	8006744 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800671e:	f043 0201 	orr.w	r2, r3, #1
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006726:	2300      	movs	r3, #0
 8006728:	60fb      	str	r3, [r7, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006740:	601a      	str	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	0a1b      	lsrs	r3, r3, #8
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00c      	beq.n	800676a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006754:	f043 0208 	orr.w	r2, r3, #8
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800675c:	2300      	movs	r3, #0
 800675e:	60bb      	str	r3, [r7, #8]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	60bb      	str	r3, [r7, #8]
 8006768:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800676e:	2b00      	cmp	r3, #0
 8006770:	d050      	beq.n	8006814 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006780:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d104      	bne.n	800679e <HAL_SPI_IRQHandler+0x17e>
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	d034      	beq.n	8006808 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 0203 	bic.w	r2, r2, #3
 80067ac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d011      	beq.n	80067da <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ba:	4a18      	ldr	r2, [pc, #96]	; (800681c <HAL_SPI_IRQHandler+0x1fc>)
 80067bc:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fb ff28 	bl	8002618 <HAL_DMA_Abort_IT>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d005      	beq.n	80067da <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d017      	beq.n	8006812 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e6:	4a0d      	ldr	r2, [pc, #52]	; (800681c <HAL_SPI_IRQHandler+0x1fc>)
 80067e8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fb ff12 	bl	8002618 <HAL_DMA_Abort_IT>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00b      	beq.n	8006812 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006806:	e004      	b.n	8006812 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006810:	e000      	b.n	8006814 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8006812:	bf00      	nop
    return;
 8006814:	bf00      	nop
  }
}
 8006816:	3720      	adds	r7, #32
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	080068b1 	.word	0x080068b1

08006820 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	bc80      	pop	{r7}
 8006830:	4770      	bx	lr

08006832 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr

08006844 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	bc80      	pop	{r7}
 8006854:	4770      	bx	lr

08006856 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	bc80      	pop	{r7}
 8006866:	4770      	bx	lr

08006868 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	bc80      	pop	{r7}
 8006878:	4770      	bx	lr

0800687a <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006882:	bf00      	nop
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	bc80      	pop	{r7}
 800688a:	4770      	bx	lr

0800688c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	bc80      	pop	{r7}
 800689c:	4770      	bx	lr

0800689e <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bc80      	pop	{r7}
 80068ae:	4770      	bx	lr

080068b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068d4:	bf00      	nop
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e040      	b.n	8006970 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d106      	bne.n	8006904 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fd ffe0 	bl	80048c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2224      	movs	r2, #36	; 0x24
 8006908:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0201 	bic.w	r2, r2, #1
 8006918:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fbbc 	bl	8007098 <UART_SetConfig>
 8006920:	4603      	mov	r3, r0
 8006922:	2b01      	cmp	r3, #1
 8006924:	d101      	bne.n	800692a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e022      	b.n	8006970 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	2b00      	cmp	r3, #0
 8006930:	d002      	beq.n	8006938 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fd86 	bl	8007444 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006946:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006956:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0201 	orr.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fe0c 	bl	8007586 <UART_CheckIdleState>
 800696e:	4603      	mov	r3, r0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08a      	sub	sp, #40	; 0x28
 800697c:	af02      	add	r7, sp, #8
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	603b      	str	r3, [r7, #0]
 8006984:	4613      	mov	r3, r2
 8006986:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800698c:	2b20      	cmp	r3, #32
 800698e:	f040 8082 	bne.w	8006a96 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <HAL_UART_Transmit+0x26>
 8006998:	88fb      	ldrh	r3, [r7, #6]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e07a      	b.n	8006a98 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d101      	bne.n	80069b0 <HAL_UART_Transmit+0x38>
 80069ac:	2302      	movs	r3, #2
 80069ae:	e073      	b.n	8006a98 <HAL_UART_Transmit+0x120>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2221      	movs	r2, #33	; 0x21
 80069c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069c6:	f7fd fd1d 	bl	8004404 <HAL_GetTick>
 80069ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	88fa      	ldrh	r2, [r7, #6]
 80069d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	88fa      	ldrh	r2, [r7, #6]
 80069d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e4:	d108      	bne.n	80069f8 <HAL_UART_Transmit+0x80>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d104      	bne.n	80069f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80069ee:	2300      	movs	r3, #0
 80069f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	61bb      	str	r3, [r7, #24]
 80069f6:	e003      	b.n	8006a00 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069fc:	2300      	movs	r3, #0
 80069fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006a08:	e02d      	b.n	8006a66 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2200      	movs	r2, #0
 8006a12:	2180      	movs	r1, #128	; 0x80
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 fdff 	bl	8007618 <UART_WaitOnFlagUntilTimeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e039      	b.n	8006a98 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10b      	bne.n	8006a42 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	881a      	ldrh	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a36:	b292      	uxth	r2, r2
 8006a38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	3302      	adds	r3, #2
 8006a3e:	61bb      	str	r3, [r7, #24]
 8006a40:	e008      	b.n	8006a54 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	781a      	ldrb	r2, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	b292      	uxth	r2, r2
 8006a4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	3301      	adds	r3, #1
 8006a52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1cb      	bne.n	8006a0a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2140      	movs	r1, #64	; 0x40
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 fdcb 	bl	8007618 <UART_WaitOnFlagUntilTimeout>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e005      	b.n	8006a98 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	e000      	b.n	8006a98 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006a96:	2302      	movs	r3, #2
  }
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3720      	adds	r7, #32
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b0ba      	sub	sp, #232	; 0xe8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ac6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006aca:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ace:	4013      	ands	r3, r2
 8006ad0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ad4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d115      	bne.n	8006b08 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00f      	beq.n	8006b08 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aec:	f003 0320 	and.w	r3, r3, #32
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d009      	beq.n	8006b08 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 82a3 	beq.w	8007044 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	4798      	blx	r3
      }
      return;
 8006b06:	e29d      	b.n	8007044 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 8117 	beq.w	8006d40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d106      	bne.n	8006b2c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b22:	4b85      	ldr	r3, [pc, #532]	; (8006d38 <HAL_UART_IRQHandler+0x298>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 810a 	beq.w	8006d40 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d011      	beq.n	8006b5c <HAL_UART_IRQHandler+0xbc>
 8006b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00b      	beq.n	8006b5c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b52:	f043 0201 	orr.w	r2, r3, #1
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d011      	beq.n	8006b8c <HAL_UART_IRQHandler+0xec>
 8006b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00b      	beq.n	8006b8c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b82:	f043 0204 	orr.w	r2, r3, #4
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d011      	beq.n	8006bbc <HAL_UART_IRQHandler+0x11c>
 8006b98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00b      	beq.n	8006bbc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2204      	movs	r2, #4
 8006baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bb2:	f043 0202 	orr.w	r2, r3, #2
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc0:	f003 0308 	and.w	r3, r3, #8
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d017      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bcc:	f003 0320 	and.w	r3, r3, #32
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d105      	bne.n	8006be0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bd8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00b      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2208      	movs	r2, #8
 8006be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bee:	f043 0208 	orr.w	r2, r3, #8
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d012      	beq.n	8006c2a <HAL_UART_IRQHandler+0x18a>
 8006c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00c      	beq.n	8006c2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c20:	f043 0220 	orr.w	r2, r3, #32
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 8209 	beq.w	8007048 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c3a:	f003 0320 	and.w	r3, r3, #32
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00d      	beq.n	8006c5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d007      	beq.n	8006c5e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c72:	2b40      	cmp	r3, #64	; 0x40
 8006c74:	d005      	beq.n	8006c82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d04f      	beq.n	8006d22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fd8c 	bl	80077a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c92:	2b40      	cmp	r3, #64	; 0x40
 8006c94:	d141      	bne.n	8006d1a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ca4:	e853 3f00 	ldrex	r3, [r3]
 8006ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006cc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006cce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006cd2:	e841 2300 	strex	r3, r2, [r1]
 8006cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1d9      	bne.n	8006c96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d013      	beq.n	8006d12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cee:	4a13      	ldr	r2, [pc, #76]	; (8006d3c <HAL_UART_IRQHandler+0x29c>)
 8006cf0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fb fc8e 	bl	8002618 <HAL_DMA_Abort_IT>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d017      	beq.n	8006d32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d10:	e00f      	b.n	8006d32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f9ab 	bl	800706e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d18:	e00b      	b.n	8006d32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f9a7 	bl	800706e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d20:	e007      	b.n	8006d32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f9a3 	bl	800706e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006d30:	e18a      	b.n	8007048 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d32:	bf00      	nop
    return;
 8006d34:	e188      	b.n	8007048 <HAL_UART_IRQHandler+0x5a8>
 8006d36:	bf00      	nop
 8006d38:	04000120 	.word	0x04000120
 8006d3c:	08007865 	.word	0x08007865

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	f040 8143 	bne.w	8006fd0 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d4e:	f003 0310 	and.w	r3, r3, #16
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 813c 	beq.w	8006fd0 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 8135 	beq.w	8006fd0 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2210      	movs	r2, #16
 8006d6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d78:	2b40      	cmp	r3, #64	; 0x40
 8006d7a:	f040 80b1 	bne.w	8006ee0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 815c 	beq.w	800704c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	f080 8154 	bcs.w	800704c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006daa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	2b20      	cmp	r3, #32
 8006db6:	f000 8085 	beq.w	8006ec4 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006dce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006de4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006de8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006df0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006dfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1da      	bne.n	8006dba <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3308      	adds	r3, #8
 8006e0a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e0e:	e853 3f00 	ldrex	r3, [r3]
 8006e12:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e16:	f023 0301 	bic.w	r3, r3, #1
 8006e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3308      	adds	r3, #8
 8006e24:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e28:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e2c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e30:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e34:	e841 2300 	strex	r3, r2, [r1]
 8006e38:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e1      	bne.n	8006e04 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3308      	adds	r3, #8
 8006e46:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e4a:	e853 3f00 	ldrex	r3, [r3]
 8006e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3308      	adds	r3, #8
 8006e60:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e64:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e3      	bne.n	8006e40 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e94:	f023 0310 	bic.w	r3, r3, #16
 8006e98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ea6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ea8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eaa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006eac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006eae:	e841 2300 	strex	r3, r2, [r1]
 8006eb2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1e4      	bne.n	8006e84 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fb fb72 	bl	80025a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f8d1 	bl	8007080 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ede:	e0b5      	b.n	800704c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 80a7 	beq.w	8007050 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8006f02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f000 80a2 	beq.w	8007050 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f36:	e841 2300 	strex	r3, r2, [r1]
 8006f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1e4      	bne.n	8006f0c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3308      	adds	r3, #8
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	e853 3f00 	ldrex	r3, [r3]
 8006f50:	623b      	str	r3, [r7, #32]
   return(result);
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	f023 0301 	bic.w	r3, r3, #1
 8006f58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3308      	adds	r3, #8
 8006f62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f66:	633a      	str	r2, [r7, #48]	; 0x30
 8006f68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1e3      	bne.n	8006f42 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	e853 3f00 	ldrex	r3, [r3]
 8006f98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f023 0310 	bic.w	r3, r3, #16
 8006fa0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fae:	61fb      	str	r3, [r7, #28]
 8006fb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	69b9      	ldr	r1, [r7, #24]
 8006fb4:	69fa      	ldr	r2, [r7, #28]
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	617b      	str	r3, [r7, #20]
   return(result);
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e4      	bne.n	8006f8c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f859 	bl	8007080 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fce:	e03f      	b.n	8007050 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00e      	beq.n	8006ffa <HAL_UART_IRQHandler+0x55a>
 8006fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d008      	beq.n	8006ffa <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ff0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fc76 	bl	80078e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ff8:	e02d      	b.n	8007056 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00e      	beq.n	8007024 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800700a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800700e:	2b00      	cmp	r3, #0
 8007010:	d008      	beq.n	8007024 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007016:	2b00      	cmp	r3, #0
 8007018:	d01c      	beq.n	8007054 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	4798      	blx	r3
    }
    return;
 8007022:	e017      	b.n	8007054 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702c:	2b00      	cmp	r3, #0
 800702e:	d012      	beq.n	8007056 <HAL_UART_IRQHandler+0x5b6>
 8007030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00c      	beq.n	8007056 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fc27 	bl	8007890 <UART_EndTransmit_IT>
    return;
 8007042:	e008      	b.n	8007056 <HAL_UART_IRQHandler+0x5b6>
      return;
 8007044:	bf00      	nop
 8007046:	e006      	b.n	8007056 <HAL_UART_IRQHandler+0x5b6>
    return;
 8007048:	bf00      	nop
 800704a:	e004      	b.n	8007056 <HAL_UART_IRQHandler+0x5b6>
      return;
 800704c:	bf00      	nop
 800704e:	e002      	b.n	8007056 <HAL_UART_IRQHandler+0x5b6>
      return;
 8007050:	bf00      	nop
 8007052:	e000      	b.n	8007056 <HAL_UART_IRQHandler+0x5b6>
    return;
 8007054:	bf00      	nop
  }

}
 8007056:	37e8      	adds	r7, #232	; 0xe8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	bc80      	pop	{r7}
 800706c:	4770      	bx	lr

0800706e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800706e:	b480      	push	{r7}
 8007070:	b083      	sub	sp, #12
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007076:	bf00      	nop
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	bc80      	pop	{r7}
 800707e:	4770      	bx	lr

08007080 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	460b      	mov	r3, r1
 800708a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	bc80      	pop	{r7}
 8007094:	4770      	bx	lr
	...

08007098 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b088      	sub	sp, #32
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070a0:	2300      	movs	r3, #0
 80070a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	431a      	orrs	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	431a      	orrs	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	4b92      	ldr	r3, [pc, #584]	; (800730c <UART_SetConfig+0x274>)
 80070c4:	4013      	ands	r3, r2
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	6812      	ldr	r2, [r2, #0]
 80070ca:	6979      	ldr	r1, [r7, #20]
 80070cc:	430b      	orrs	r3, r1
 80070ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a1b      	ldr	r3, [r3, #32]
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	430a      	orrs	r2, r1
 8007108:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a80      	ldr	r2, [pc, #512]	; (8007310 <UART_SetConfig+0x278>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d120      	bne.n	8007156 <UART_SetConfig+0xbe>
 8007114:	4b7f      	ldr	r3, [pc, #508]	; (8007314 <UART_SetConfig+0x27c>)
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	f003 0303 	and.w	r3, r3, #3
 800711c:	2b03      	cmp	r3, #3
 800711e:	d817      	bhi.n	8007150 <UART_SetConfig+0xb8>
 8007120:	a201      	add	r2, pc, #4	; (adr r2, 8007128 <UART_SetConfig+0x90>)
 8007122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007126:	bf00      	nop
 8007128:	08007139 	.word	0x08007139
 800712c:	08007145 	.word	0x08007145
 8007130:	0800714b 	.word	0x0800714b
 8007134:	0800713f 	.word	0x0800713f
 8007138:	2301      	movs	r3, #1
 800713a:	77fb      	strb	r3, [r7, #31]
 800713c:	e0b5      	b.n	80072aa <UART_SetConfig+0x212>
 800713e:	2302      	movs	r3, #2
 8007140:	77fb      	strb	r3, [r7, #31]
 8007142:	e0b2      	b.n	80072aa <UART_SetConfig+0x212>
 8007144:	2304      	movs	r3, #4
 8007146:	77fb      	strb	r3, [r7, #31]
 8007148:	e0af      	b.n	80072aa <UART_SetConfig+0x212>
 800714a:	2308      	movs	r3, #8
 800714c:	77fb      	strb	r3, [r7, #31]
 800714e:	e0ac      	b.n	80072aa <UART_SetConfig+0x212>
 8007150:	2310      	movs	r3, #16
 8007152:	77fb      	strb	r3, [r7, #31]
 8007154:	e0a9      	b.n	80072aa <UART_SetConfig+0x212>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a6f      	ldr	r2, [pc, #444]	; (8007318 <UART_SetConfig+0x280>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d124      	bne.n	80071aa <UART_SetConfig+0x112>
 8007160:	4b6c      	ldr	r3, [pc, #432]	; (8007314 <UART_SetConfig+0x27c>)
 8007162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007164:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007168:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800716c:	d011      	beq.n	8007192 <UART_SetConfig+0xfa>
 800716e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007172:	d817      	bhi.n	80071a4 <UART_SetConfig+0x10c>
 8007174:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007178:	d011      	beq.n	800719e <UART_SetConfig+0x106>
 800717a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800717e:	d811      	bhi.n	80071a4 <UART_SetConfig+0x10c>
 8007180:	2b00      	cmp	r3, #0
 8007182:	d003      	beq.n	800718c <UART_SetConfig+0xf4>
 8007184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007188:	d006      	beq.n	8007198 <UART_SetConfig+0x100>
 800718a:	e00b      	b.n	80071a4 <UART_SetConfig+0x10c>
 800718c:	2300      	movs	r3, #0
 800718e:	77fb      	strb	r3, [r7, #31]
 8007190:	e08b      	b.n	80072aa <UART_SetConfig+0x212>
 8007192:	2302      	movs	r3, #2
 8007194:	77fb      	strb	r3, [r7, #31]
 8007196:	e088      	b.n	80072aa <UART_SetConfig+0x212>
 8007198:	2304      	movs	r3, #4
 800719a:	77fb      	strb	r3, [r7, #31]
 800719c:	e085      	b.n	80072aa <UART_SetConfig+0x212>
 800719e:	2308      	movs	r3, #8
 80071a0:	77fb      	strb	r3, [r7, #31]
 80071a2:	e082      	b.n	80072aa <UART_SetConfig+0x212>
 80071a4:	2310      	movs	r3, #16
 80071a6:	77fb      	strb	r3, [r7, #31]
 80071a8:	e07f      	b.n	80072aa <UART_SetConfig+0x212>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a5b      	ldr	r2, [pc, #364]	; (800731c <UART_SetConfig+0x284>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d124      	bne.n	80071fe <UART_SetConfig+0x166>
 80071b4:	4b57      	ldr	r3, [pc, #348]	; (8007314 <UART_SetConfig+0x27c>)
 80071b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80071bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80071c0:	d011      	beq.n	80071e6 <UART_SetConfig+0x14e>
 80071c2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80071c6:	d817      	bhi.n	80071f8 <UART_SetConfig+0x160>
 80071c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80071cc:	d011      	beq.n	80071f2 <UART_SetConfig+0x15a>
 80071ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80071d2:	d811      	bhi.n	80071f8 <UART_SetConfig+0x160>
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <UART_SetConfig+0x148>
 80071d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071dc:	d006      	beq.n	80071ec <UART_SetConfig+0x154>
 80071de:	e00b      	b.n	80071f8 <UART_SetConfig+0x160>
 80071e0:	2300      	movs	r3, #0
 80071e2:	77fb      	strb	r3, [r7, #31]
 80071e4:	e061      	b.n	80072aa <UART_SetConfig+0x212>
 80071e6:	2302      	movs	r3, #2
 80071e8:	77fb      	strb	r3, [r7, #31]
 80071ea:	e05e      	b.n	80072aa <UART_SetConfig+0x212>
 80071ec:	2304      	movs	r3, #4
 80071ee:	77fb      	strb	r3, [r7, #31]
 80071f0:	e05b      	b.n	80072aa <UART_SetConfig+0x212>
 80071f2:	2308      	movs	r3, #8
 80071f4:	77fb      	strb	r3, [r7, #31]
 80071f6:	e058      	b.n	80072aa <UART_SetConfig+0x212>
 80071f8:	2310      	movs	r3, #16
 80071fa:	77fb      	strb	r3, [r7, #31]
 80071fc:	e055      	b.n	80072aa <UART_SetConfig+0x212>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a47      	ldr	r2, [pc, #284]	; (8007320 <UART_SetConfig+0x288>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d124      	bne.n	8007252 <UART_SetConfig+0x1ba>
 8007208:	4b42      	ldr	r3, [pc, #264]	; (8007314 <UART_SetConfig+0x27c>)
 800720a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007210:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007214:	d011      	beq.n	800723a <UART_SetConfig+0x1a2>
 8007216:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800721a:	d817      	bhi.n	800724c <UART_SetConfig+0x1b4>
 800721c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007220:	d011      	beq.n	8007246 <UART_SetConfig+0x1ae>
 8007222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007226:	d811      	bhi.n	800724c <UART_SetConfig+0x1b4>
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <UART_SetConfig+0x19c>
 800722c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007230:	d006      	beq.n	8007240 <UART_SetConfig+0x1a8>
 8007232:	e00b      	b.n	800724c <UART_SetConfig+0x1b4>
 8007234:	2300      	movs	r3, #0
 8007236:	77fb      	strb	r3, [r7, #31]
 8007238:	e037      	b.n	80072aa <UART_SetConfig+0x212>
 800723a:	2302      	movs	r3, #2
 800723c:	77fb      	strb	r3, [r7, #31]
 800723e:	e034      	b.n	80072aa <UART_SetConfig+0x212>
 8007240:	2304      	movs	r3, #4
 8007242:	77fb      	strb	r3, [r7, #31]
 8007244:	e031      	b.n	80072aa <UART_SetConfig+0x212>
 8007246:	2308      	movs	r3, #8
 8007248:	77fb      	strb	r3, [r7, #31]
 800724a:	e02e      	b.n	80072aa <UART_SetConfig+0x212>
 800724c:	2310      	movs	r3, #16
 800724e:	77fb      	strb	r3, [r7, #31]
 8007250:	e02b      	b.n	80072aa <UART_SetConfig+0x212>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a33      	ldr	r2, [pc, #204]	; (8007324 <UART_SetConfig+0x28c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d124      	bne.n	80072a6 <UART_SetConfig+0x20e>
 800725c:	4b2d      	ldr	r3, [pc, #180]	; (8007314 <UART_SetConfig+0x27c>)
 800725e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007260:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007264:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007268:	d011      	beq.n	800728e <UART_SetConfig+0x1f6>
 800726a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800726e:	d817      	bhi.n	80072a0 <UART_SetConfig+0x208>
 8007270:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007274:	d011      	beq.n	800729a <UART_SetConfig+0x202>
 8007276:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800727a:	d811      	bhi.n	80072a0 <UART_SetConfig+0x208>
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <UART_SetConfig+0x1f0>
 8007280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007284:	d006      	beq.n	8007294 <UART_SetConfig+0x1fc>
 8007286:	e00b      	b.n	80072a0 <UART_SetConfig+0x208>
 8007288:	2300      	movs	r3, #0
 800728a:	77fb      	strb	r3, [r7, #31]
 800728c:	e00d      	b.n	80072aa <UART_SetConfig+0x212>
 800728e:	2302      	movs	r3, #2
 8007290:	77fb      	strb	r3, [r7, #31]
 8007292:	e00a      	b.n	80072aa <UART_SetConfig+0x212>
 8007294:	2304      	movs	r3, #4
 8007296:	77fb      	strb	r3, [r7, #31]
 8007298:	e007      	b.n	80072aa <UART_SetConfig+0x212>
 800729a:	2308      	movs	r3, #8
 800729c:	77fb      	strb	r3, [r7, #31]
 800729e:	e004      	b.n	80072aa <UART_SetConfig+0x212>
 80072a0:	2310      	movs	r3, #16
 80072a2:	77fb      	strb	r3, [r7, #31]
 80072a4:	e001      	b.n	80072aa <UART_SetConfig+0x212>
 80072a6:	2310      	movs	r3, #16
 80072a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072b2:	d16c      	bne.n	800738e <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80072b4:	7ffb      	ldrb	r3, [r7, #31]
 80072b6:	2b08      	cmp	r3, #8
 80072b8:	d838      	bhi.n	800732c <UART_SetConfig+0x294>
 80072ba:	a201      	add	r2, pc, #4	; (adr r2, 80072c0 <UART_SetConfig+0x228>)
 80072bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c0:	080072e5 	.word	0x080072e5
 80072c4:	080072ed 	.word	0x080072ed
 80072c8:	080072f5 	.word	0x080072f5
 80072cc:	0800732d 	.word	0x0800732d
 80072d0:	080072fb 	.word	0x080072fb
 80072d4:	0800732d 	.word	0x0800732d
 80072d8:	0800732d 	.word	0x0800732d
 80072dc:	0800732d 	.word	0x0800732d
 80072e0:	08007303 	.word	0x08007303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072e4:	f7fe fdbc 	bl	8005e60 <HAL_RCC_GetPCLK1Freq>
 80072e8:	61b8      	str	r0, [r7, #24]
        break;
 80072ea:	e024      	b.n	8007336 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072ec:	f7fe fdda 	bl	8005ea4 <HAL_RCC_GetPCLK2Freq>
 80072f0:	61b8      	str	r0, [r7, #24]
        break;
 80072f2:	e020      	b.n	8007336 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072f4:	4b0c      	ldr	r3, [pc, #48]	; (8007328 <UART_SetConfig+0x290>)
 80072f6:	61bb      	str	r3, [r7, #24]
        break;
 80072f8:	e01d      	b.n	8007336 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072fa:	f7fe fd3d 	bl	8005d78 <HAL_RCC_GetSysClockFreq>
 80072fe:	61b8      	str	r0, [r7, #24]
        break;
 8007300:	e019      	b.n	8007336 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007306:	61bb      	str	r3, [r7, #24]
        break;
 8007308:	e015      	b.n	8007336 <UART_SetConfig+0x29e>
 800730a:	bf00      	nop
 800730c:	efff69f3 	.word	0xefff69f3
 8007310:	40013800 	.word	0x40013800
 8007314:	40021000 	.word	0x40021000
 8007318:	40004400 	.word	0x40004400
 800731c:	40004800 	.word	0x40004800
 8007320:	40004c00 	.word	0x40004c00
 8007324:	40005000 	.word	0x40005000
 8007328:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	77bb      	strb	r3, [r7, #30]
        break;
 8007334:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d075      	beq.n	8007428 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	005a      	lsls	r2, r3, #1
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	085b      	lsrs	r3, r3, #1
 8007346:	441a      	add	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007350:	b29b      	uxth	r3, r3
 8007352:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	2b0f      	cmp	r3, #15
 8007358:	d916      	bls.n	8007388 <UART_SetConfig+0x2f0>
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007360:	d212      	bcs.n	8007388 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	b29b      	uxth	r3, r3
 8007366:	f023 030f 	bic.w	r3, r3, #15
 800736a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	085b      	lsrs	r3, r3, #1
 8007370:	b29b      	uxth	r3, r3
 8007372:	f003 0307 	and.w	r3, r3, #7
 8007376:	b29a      	uxth	r2, r3
 8007378:	89fb      	ldrh	r3, [r7, #14]
 800737a:	4313      	orrs	r3, r2
 800737c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	89fa      	ldrh	r2, [r7, #14]
 8007384:	60da      	str	r2, [r3, #12]
 8007386:	e04f      	b.n	8007428 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	77bb      	strb	r3, [r7, #30]
 800738c:	e04c      	b.n	8007428 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800738e:	7ffb      	ldrb	r3, [r7, #31]
 8007390:	2b08      	cmp	r3, #8
 8007392:	d828      	bhi.n	80073e6 <UART_SetConfig+0x34e>
 8007394:	a201      	add	r2, pc, #4	; (adr r2, 800739c <UART_SetConfig+0x304>)
 8007396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739a:	bf00      	nop
 800739c:	080073c1 	.word	0x080073c1
 80073a0:	080073c9 	.word	0x080073c9
 80073a4:	080073d1 	.word	0x080073d1
 80073a8:	080073e7 	.word	0x080073e7
 80073ac:	080073d7 	.word	0x080073d7
 80073b0:	080073e7 	.word	0x080073e7
 80073b4:	080073e7 	.word	0x080073e7
 80073b8:	080073e7 	.word	0x080073e7
 80073bc:	080073df 	.word	0x080073df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073c0:	f7fe fd4e 	bl	8005e60 <HAL_RCC_GetPCLK1Freq>
 80073c4:	61b8      	str	r0, [r7, #24]
        break;
 80073c6:	e013      	b.n	80073f0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073c8:	f7fe fd6c 	bl	8005ea4 <HAL_RCC_GetPCLK2Freq>
 80073cc:	61b8      	str	r0, [r7, #24]
        break;
 80073ce:	e00f      	b.n	80073f0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073d0:	4b1b      	ldr	r3, [pc, #108]	; (8007440 <UART_SetConfig+0x3a8>)
 80073d2:	61bb      	str	r3, [r7, #24]
        break;
 80073d4:	e00c      	b.n	80073f0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073d6:	f7fe fccf 	bl	8005d78 <HAL_RCC_GetSysClockFreq>
 80073da:	61b8      	str	r0, [r7, #24]
        break;
 80073dc:	e008      	b.n	80073f0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073e2:	61bb      	str	r3, [r7, #24]
        break;
 80073e4:	e004      	b.n	80073f0 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	77bb      	strb	r3, [r7, #30]
        break;
 80073ee:	bf00      	nop
    }

    if (pclk != 0U)
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d018      	beq.n	8007428 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	085a      	lsrs	r2, r3, #1
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	441a      	add	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	fbb2 f3f3 	udiv	r3, r2, r3
 8007408:	b29b      	uxth	r3, r3
 800740a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	2b0f      	cmp	r3, #15
 8007410:	d908      	bls.n	8007424 <UART_SetConfig+0x38c>
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007418:	d204      	bcs.n	8007424 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	60da      	str	r2, [r3, #12]
 8007422:	e001      	b.n	8007428 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007434:	7fbb      	ldrb	r3, [r7, #30]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3720      	adds	r7, #32
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	007a1200 	.word	0x007a1200

08007444 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00a      	beq.n	800746e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00a      	beq.n	8007490 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	430a      	orrs	r2, r1
 800748e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00a      	beq.n	80074b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	430a      	orrs	r2, r1
 80074b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	f003 0308 	and.w	r3, r3, #8
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d8:	f003 0310 	and.w	r3, r3, #16
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00a      	beq.n	80074f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	430a      	orrs	r2, r1
 80074f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	f003 0320 	and.w	r3, r3, #32
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00a      	beq.n	8007518 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007520:	2b00      	cmp	r3, #0
 8007522:	d01a      	beq.n	800755a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007542:	d10a      	bne.n	800755a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00a      	beq.n	800757c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	430a      	orrs	r2, r1
 800757a:	605a      	str	r2, [r3, #4]
  }
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	bc80      	pop	{r7}
 8007584:	4770      	bx	lr

08007586 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b086      	sub	sp, #24
 800758a:	af02      	add	r7, sp, #8
 800758c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007596:	f7fc ff35 	bl	8004404 <HAL_GetTick>
 800759a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b08      	cmp	r3, #8
 80075a8:	d10e      	bne.n	80075c8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f82d 	bl	8007618 <UART_WaitOnFlagUntilTimeout>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e023      	b.n	8007610 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0304 	and.w	r3, r3, #4
 80075d2:	2b04      	cmp	r3, #4
 80075d4:	d10e      	bne.n	80075f4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f817 	bl	8007618 <UART_WaitOnFlagUntilTimeout>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e00d      	b.n	8007610 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2220      	movs	r2, #32
 80075f8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2220      	movs	r2, #32
 80075fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b09c      	sub	sp, #112	; 0x70
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	603b      	str	r3, [r7, #0]
 8007624:	4613      	mov	r3, r2
 8007626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007628:	e0a5      	b.n	8007776 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800762a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800762c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007630:	f000 80a1 	beq.w	8007776 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007634:	f7fc fee6 	bl	8004404 <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007640:	429a      	cmp	r2, r3
 8007642:	d302      	bcc.n	800764a <UART_WaitOnFlagUntilTimeout+0x32>
 8007644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007646:	2b00      	cmp	r3, #0
 8007648:	d13e      	bne.n	80076c8 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007652:	e853 3f00 	ldrex	r3, [r3]
 8007656:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800765a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800765e:	667b      	str	r3, [r7, #100]	; 0x64
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007668:	65fb      	str	r3, [r7, #92]	; 0x5c
 800766a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800766e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007670:	e841 2300 	strex	r3, r2, [r1]
 8007674:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e6      	bne.n	800764a <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3308      	adds	r3, #8
 8007682:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007686:	e853 3f00 	ldrex	r3, [r3]
 800768a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800768c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768e:	f023 0301 	bic.w	r3, r3, #1
 8007692:	663b      	str	r3, [r7, #96]	; 0x60
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	3308      	adds	r3, #8
 800769a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800769c:	64ba      	str	r2, [r7, #72]	; 0x48
 800769e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e5      	bne.n	800767c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2220      	movs	r2, #32
 80076b4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2220      	movs	r2, #32
 80076ba:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e067      	b.n	8007798 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0304 	and.w	r3, r3, #4
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d04f      	beq.n	8007776 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076e4:	d147      	bne.n	8007776 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007704:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800770e:	637b      	str	r3, [r7, #52]	; 0x34
 8007710:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800771c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e6      	bne.n	80076f0 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3308      	adds	r3, #8
 8007728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	e853 3f00 	ldrex	r3, [r3]
 8007730:	613b      	str	r3, [r7, #16]
   return(result);
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f023 0301 	bic.w	r3, r3, #1
 8007738:	66bb      	str	r3, [r7, #104]	; 0x68
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3308      	adds	r3, #8
 8007740:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007742:	623a      	str	r2, [r7, #32]
 8007744:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007746:	69f9      	ldr	r1, [r7, #28]
 8007748:	6a3a      	ldr	r2, [r7, #32]
 800774a:	e841 2300 	strex	r3, r2, [r1]
 800774e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1e5      	bne.n	8007722 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2220      	movs	r2, #32
 800775a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2220      	movs	r2, #32
 8007760:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2220      	movs	r2, #32
 8007766:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e010      	b.n	8007798 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	69da      	ldr	r2, [r3, #28]
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	4013      	ands	r3, r2
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	429a      	cmp	r2, r3
 8007784:	bf0c      	ite	eq
 8007786:	2301      	moveq	r3, #1
 8007788:	2300      	movne	r3, #0
 800778a:	b2db      	uxtb	r3, r3
 800778c:	461a      	mov	r2, r3
 800778e:	79fb      	ldrb	r3, [r7, #7]
 8007790:	429a      	cmp	r2, r3
 8007792:	f43f af4a 	beq.w	800762a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3770      	adds	r7, #112	; 0x70
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b095      	sub	sp, #84	; 0x54
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b0:	e853 3f00 	ldrex	r3, [r3]
 80077b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	461a      	mov	r2, r3
 80077c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c6:	643b      	str	r3, [r7, #64]	; 0x40
 80077c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077ce:	e841 2300 	strex	r3, r2, [r1]
 80077d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1e6      	bne.n	80077a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	3308      	adds	r3, #8
 80077e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	e853 3f00 	ldrex	r3, [r3]
 80077e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	f023 0301 	bic.w	r3, r3, #1
 80077f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3308      	adds	r3, #8
 80077f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007802:	e841 2300 	strex	r3, r2, [r1]
 8007806:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1e5      	bne.n	80077da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007812:	2b01      	cmp	r3, #1
 8007814:	d118      	bne.n	8007848 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	60bb      	str	r3, [r7, #8]
   return(result);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f023 0310 	bic.w	r3, r3, #16
 800782a:	647b      	str	r3, [r7, #68]	; 0x44
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	461a      	mov	r2, r3
 8007832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007834:	61bb      	str	r3, [r7, #24]
 8007836:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007838:	6979      	ldr	r1, [r7, #20]
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	613b      	str	r3, [r7, #16]
   return(result);
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e6      	bne.n	8007816 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	665a      	str	r2, [r3, #100]	; 0x64
}
 800785a:	bf00      	nop
 800785c:	3754      	adds	r7, #84	; 0x54
 800785e:	46bd      	mov	sp, r7
 8007860:	bc80      	pop	{r7}
 8007862:	4770      	bx	lr

08007864 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007870:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f7ff fbf3 	bl	800706e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007888:	bf00      	nop
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ac:	61fb      	str	r3, [r7, #28]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	61bb      	str	r3, [r7, #24]
 80078b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ba:	6979      	ldr	r1, [r7, #20]
 80078bc:	69ba      	ldr	r2, [r7, #24]
 80078be:	e841 2300 	strex	r3, r2, [r1]
 80078c2:	613b      	str	r3, [r7, #16]
   return(result);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1e6      	bne.n	8007898 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2220      	movs	r2, #32
 80078ce:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7ff fbc0 	bl	800705c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078dc:	bf00      	nop
 80078de:	3720      	adds	r7, #32
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bc80      	pop	{r7}
 80078f4:	4770      	bx	lr

080078f6 <BswM_Init>:
static void MX_SPI3_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);

void BswM_Init(void)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	af00      	add	r7, sp, #0
	/* Init MCal drivers */
	SystemClock_Config();
 80078fa:	f000 f84d 	bl	8007998 <SystemClock_Config>
	MX_DMA_Init();
 80078fe:	f000 f8b1 	bl	8007a64 <MX_DMA_Init>
	MX_GPIO_Init();
 8007902:	f000 fa1b 	bl	8007d3c <MX_GPIO_Init>
	MX_ADC1_Init();
 8007906:	f000 f8cb 	bl	8007aa0 <MX_ADC1_Init>
	MX_I2C1_Init();
 800790a:	f000 f939 	bl	8007b80 <MX_I2C1_Init>
	MX_SPI3_Init();
 800790e:	f000 f977 	bl	8007c00 <MX_SPI3_Init>
	MX_USART1_UART_Init();
 8007912:	f000 f9b3 	bl	8007c7c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8007916:	f000 f9e1 	bl	8007cdc <MX_USART2_UART_Init>
	Gpt_Init();
 800791a:	f7fa ffc5 	bl	80028a8 <Gpt_Init>

	/* Init system services */
	Tm_Init();
 800791e:	f000 fc1b 	bl	8008158 <Tm_Init>

}
 8007922:	bf00      	nop
 8007924:	bd80      	pop	{r7, pc}
	...

08007928 <BswM_MainFunction>:

void BswM_MainFunction(void)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
	/* Start ADC AN1 conversion */
	//HAL_ADC_Start_IT(&hadc1);
	HAL_ADC_Start_DMA(&hadc1, (uint32 *)adc_val, adc_len);
 800792c:	4b04      	ldr	r3, [pc, #16]	; (8007940 <BswM_MainFunction+0x18>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	461a      	mov	r2, r3
 8007932:	4904      	ldr	r1, [pc, #16]	; (8007944 <BswM_MainFunction+0x1c>)
 8007934:	4804      	ldr	r0, [pc, #16]	; (8007948 <BswM_MainFunction+0x20>)
 8007936:	f7f9 fd99 	bl	800146c <HAL_ADC_Start_DMA>
}
 800793a:	bf00      	nop
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	2000000c 	.word	0x2000000c
 8007944:	200003c0 	.word	0x200003c0
 8007948:	2000011c 	.word	0x2000011c

0800794c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
	/* Convert ADC value to Voltage (mV) */
	ADC_AN0_Voltage = (uint16)((adc_val[0]*3300u)/4095u);
 8007954:	4b0d      	ldr	r3, [pc, #52]	; (800798c <HAL_ADC_ConvCpltCallback+0x40>)
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	b29b      	uxth	r3, r3
 800795a:	461a      	mov	r2, r3
 800795c:	f640 43e4 	movw	r3, #3300	; 0xce4
 8007960:	fb03 f202 	mul.w	r2, r3, r2
 8007964:	4b0a      	ldr	r3, [pc, #40]	; (8007990 <HAL_ADC_ConvCpltCallback+0x44>)
 8007966:	fba3 1302 	umull	r1, r3, r3, r2
 800796a:	1ad2      	subs	r2, r2, r3
 800796c:	0852      	lsrs	r2, r2, #1
 800796e:	4413      	add	r3, r2
 8007970:	0adb      	lsrs	r3, r3, #11
 8007972:	b29a      	uxth	r2, r3
 8007974:	4b07      	ldr	r3, [pc, #28]	; (8007994 <HAL_ADC_ConvCpltCallback+0x48>)
 8007976:	801a      	strh	r2, [r3, #0]
	Rte_Write_ADC_AN0_Voltage_u16(ADC_AN0_Voltage);
 8007978:	4b06      	ldr	r3, [pc, #24]	; (8007994 <HAL_ADC_ConvCpltCallback+0x48>)
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	b29b      	uxth	r3, r3
 800797e:	4618      	mov	r0, r3
 8007980:	f000 fcea 	bl	8008358 <Rte_Write_AN0_Voltage_u16>
}
 8007984:	bf00      	nop
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	200003c0 	.word	0x200003c0
 8007990:	00100101 	.word	0x00100101
 8007994:	200003c2 	.word	0x200003c2

08007998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b0a6      	sub	sp, #152	; 0x98
 800799c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800799e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80079a2:	2228      	movs	r2, #40	; 0x28
 80079a4:	2100      	movs	r1, #0
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 fd24 	bl	80083f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80079ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80079b0:	2200      	movs	r2, #0
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	605a      	str	r2, [r3, #4]
 80079b6:	609a      	str	r2, [r3, #8]
 80079b8:	60da      	str	r2, [r3, #12]
 80079ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80079bc:	1d3b      	adds	r3, r7, #4
 80079be:	2258      	movs	r2, #88	; 0x58
 80079c0:	2100      	movs	r1, #0
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 fd16 	bl	80083f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80079c8:	2302      	movs	r3, #2
 80079ca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80079cc:	2301      	movs	r3, #1
 80079ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80079d0:	2310      	movs	r3, #16
 80079d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80079d6:	2302      	movs	r3, #2
 80079d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80079dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80079e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80079e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80079ec:	2300      	movs	r3, #0
 80079ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80079f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fc ffee 	bl	80049d8 <HAL_RCC_OscConfig>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8007a02:	f000 f9ef 	bl	8007de4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007a06:	230f      	movs	r3, #15
 8007a08:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a16:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007a1c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007a20:	2102      	movs	r1, #2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fe f82c 	bl	8005a80 <HAL_RCC_ClockConfig>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8007a2e:	f000 f9d9 	bl	8007de4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8007a32:	23a3      	movs	r3, #163	; 0xa3
 8007a34:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007a36:	2300      	movs	r3, #0
 8007a38:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8007a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8007a44:	2310      	movs	r3, #16
 8007a46:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007a48:	1d3b      	adds	r3, r7, #4
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fe fa4c 	bl	8005ee8 <HAL_RCCEx_PeriphCLKConfig>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8007a56:	f000 f9c5 	bl	8007de4 <Error_Handler>
  }
}
 8007a5a:	bf00      	nop
 8007a5c:	3798      	adds	r7, #152	; 0x98
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
	...

08007a64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007a6a:	4b0c      	ldr	r3, [pc, #48]	; (8007a9c <MX_DMA_Init+0x38>)
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	4a0b      	ldr	r2, [pc, #44]	; (8007a9c <MX_DMA_Init+0x38>)
 8007a70:	f043 0301 	orr.w	r3, r3, #1
 8007a74:	6153      	str	r3, [r2, #20]
 8007a76:	4b09      	ldr	r3, [pc, #36]	; (8007a9c <MX_DMA_Init+0x38>)
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	607b      	str	r3, [r7, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007a82:	2200      	movs	r2, #0
 8007a84:	2100      	movs	r1, #0
 8007a86:	200b      	movs	r0, #11
 8007a88:	f7fc fd9d 	bl	80045c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007a8c:	200b      	movs	r0, #11
 8007a8e:	f7fc fdb6 	bl	80045fe <HAL_NVIC_EnableIRQ>

}
 8007a92:	bf00      	nop
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	40021000 	.word	0x40021000

08007aa0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08a      	sub	sp, #40	; 0x28
 8007aa4:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_MultiModeTypeDef multimode = {0};
 8007aa6:	f107 031c 	add.w	r3, r7, #28
 8007aaa:	2200      	movs	r2, #0
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	605a      	str	r2, [r3, #4]
 8007ab0:	609a      	str	r2, [r3, #8]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8007ab2:	1d3b      	adds	r3, r7, #4
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	605a      	str	r2, [r3, #4]
 8007aba:	609a      	str	r2, [r3, #8]
 8007abc:	60da      	str	r2, [r3, #12]
 8007abe:	611a      	str	r2, [r3, #16]
 8007ac0:	615a      	str	r2, [r3, #20]

	  /* USER CODE END ADC1_Init 1 */

	  /** Common config
	  */
	  hadc1.Instance = ADC1;
 8007ac2:	4b2e      	ldr	r3, [pc, #184]	; (8007b7c <MX_ADC1_Init+0xdc>)
 8007ac4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ac8:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8007aca:	4b2c      	ldr	r3, [pc, #176]	; (8007b7c <MX_ADC1_Init+0xdc>)
 8007acc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007ad0:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007ad2:	4b2a      	ldr	r3, [pc, #168]	; (8007b7c <MX_ADC1_Init+0xdc>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007ad8:	4b28      	ldr	r3, [pc, #160]	; (8007b7c <MX_ADC1_Init+0xdc>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8007ade:	4b27      	ldr	r3, [pc, #156]	; (8007b7c <MX_ADC1_Init+0xdc>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	765a      	strb	r2, [r3, #25]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007ae4:	4b25      	ldr	r3, [pc, #148]	; (8007b7c <MX_ADC1_Init+0xdc>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007aec:	4b23      	ldr	r3, [pc, #140]	; (8007b7c <MX_ADC1_Init+0xdc>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007af2:	4b22      	ldr	r3, [pc, #136]	; (8007b7c <MX_ADC1_Init+0xdc>)
 8007af4:	2201      	movs	r2, #1
 8007af6:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007af8:	4b20      	ldr	r3, [pc, #128]	; (8007b7c <MX_ADC1_Init+0xdc>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8007afe:	4b1f      	ldr	r3, [pc, #124]	; (8007b7c <MX_ADC1_Init+0xdc>)
 8007b00:	2201      	movs	r2, #1
 8007b02:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007b04:	4b1d      	ldr	r3, [pc, #116]	; (8007b7c <MX_ADC1_Init+0xdc>)
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007b0c:	4b1b      	ldr	r3, [pc, #108]	; (8007b7c <MX_ADC1_Init+0xdc>)
 8007b0e:	2204      	movs	r2, #4
 8007b10:	615a      	str	r2, [r3, #20]
	  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007b12:	4b1a      	ldr	r3, [pc, #104]	; (8007b7c <MX_ADC1_Init+0xdc>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007b18:	4b18      	ldr	r3, [pc, #96]	; (8007b7c <MX_ADC1_Init+0xdc>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	635a      	str	r2, [r3, #52]	; 0x34
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007b1e:	4817      	ldr	r0, [pc, #92]	; (8007b7c <MX_ADC1_Init+0xdc>)
 8007b20:	f7f9 faaa 	bl	8001078 <HAL_ADC_Init>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <MX_ADC1_Init+0x8e>
	  {
	    Error_Handler();
 8007b2a:	f000 f95b 	bl	8007de4 <Error_Handler>
	  }

	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007b32:	f107 031c 	add.w	r3, r7, #28
 8007b36:	4619      	mov	r1, r3
 8007b38:	4810      	ldr	r0, [pc, #64]	; (8007b7c <MX_ADC1_Init+0xdc>)
 8007b3a:	f7fa f89f 	bl	8001c7c <HAL_ADCEx_MultiModeConfigChannel>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <MX_ADC1_Init+0xa8>
	  {
	    Error_Handler();
 8007b44:	f000 f94e 	bl	8007de4 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007b50:	2300      	movs	r3, #0
 8007b52:	613b      	str	r3, [r7, #16]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007b54:	2300      	movs	r3, #0
 8007b56:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	617b      	str	r3, [r7, #20]
	  sConfig.Offset = 0;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b60:	1d3b      	adds	r3, r7, #4
 8007b62:	4619      	mov	r1, r3
 8007b64:	4805      	ldr	r0, [pc, #20]	; (8007b7c <MX_ADC1_Init+0xdc>)
 8007b66:	f7f9 fd9d 	bl	80016a4 <HAL_ADC_ConfigChannel>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <MX_ADC1_Init+0xd4>
	  {
	    Error_Handler();
 8007b70:	f000 f938 	bl	8007de4 <Error_Handler>
	  }
	  /* USER CODE BEGIN ADC1_Init 2 */

	  /* USER CODE END ADC1_Init 2 */

}
 8007b74:	bf00      	nop
 8007b76:	3728      	adds	r7, #40	; 0x28
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	2000011c 	.word	0x2000011c

08007b80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007b84:	4b1b      	ldr	r3, [pc, #108]	; (8007bf4 <MX_I2C1_Init+0x74>)
 8007b86:	4a1c      	ldr	r2, [pc, #112]	; (8007bf8 <MX_I2C1_Init+0x78>)
 8007b88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702681;
 8007b8a:	4b1a      	ldr	r3, [pc, #104]	; (8007bf4 <MX_I2C1_Init+0x74>)
 8007b8c:	4a1b      	ldr	r2, [pc, #108]	; (8007bfc <MX_I2C1_Init+0x7c>)
 8007b8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007b90:	4b18      	ldr	r3, [pc, #96]	; (8007bf4 <MX_I2C1_Init+0x74>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007b96:	4b17      	ldr	r3, [pc, #92]	; (8007bf4 <MX_I2C1_Init+0x74>)
 8007b98:	2201      	movs	r2, #1
 8007b9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007b9c:	4b15      	ldr	r3, [pc, #84]	; (8007bf4 <MX_I2C1_Init+0x74>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007ba2:	4b14      	ldr	r3, [pc, #80]	; (8007bf4 <MX_I2C1_Init+0x74>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007ba8:	4b12      	ldr	r3, [pc, #72]	; (8007bf4 <MX_I2C1_Init+0x74>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007bae:	4b11      	ldr	r3, [pc, #68]	; (8007bf4 <MX_I2C1_Init+0x74>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007bb4:	4b0f      	ldr	r3, [pc, #60]	; (8007bf4 <MX_I2C1_Init+0x74>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007bba:	480e      	ldr	r0, [pc, #56]	; (8007bf4 <MX_I2C1_Init+0x74>)
 8007bbc:	f7fc f9de 	bl	8003f7c <HAL_I2C_Init>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d001      	beq.n	8007bca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8007bc6:	f000 f90d 	bl	8007de4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007bca:	2100      	movs	r1, #0
 8007bcc:	4809      	ldr	r0, [pc, #36]	; (8007bf4 <MX_I2C1_Init+0x74>)
 8007bce:	f7fc fb19 	bl	8004204 <HAL_I2CEx_ConfigAnalogFilter>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007bd8:	f000 f904 	bl	8007de4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007bdc:	2100      	movs	r1, #0
 8007bde:	4805      	ldr	r0, [pc, #20]	; (8007bf4 <MX_I2C1_Init+0x74>)
 8007be0:	f7fc fb5a 	bl	8004298 <HAL_I2CEx_ConfigDigitalFilter>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8007bea:	f000 f8fb 	bl	8007de4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007bee:	bf00      	nop
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	200001b0 	.word	0x200001b0
 8007bf8:	40005400 	.word	0x40005400
 8007bfc:	00702681 	.word	0x00702681

08007c00 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8007c04:	4b1b      	ldr	r3, [pc, #108]	; (8007c74 <MX_SPI3_Init+0x74>)
 8007c06:	4a1c      	ldr	r2, [pc, #112]	; (8007c78 <MX_SPI3_Init+0x78>)
 8007c08:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007c0a:	4b1a      	ldr	r3, [pc, #104]	; (8007c74 <MX_SPI3_Init+0x74>)
 8007c0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007c10:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007c12:	4b18      	ldr	r3, [pc, #96]	; (8007c74 <MX_SPI3_Init+0x74>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8007c18:	4b16      	ldr	r3, [pc, #88]	; (8007c74 <MX_SPI3_Init+0x74>)
 8007c1a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007c1e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c20:	4b14      	ldr	r3, [pc, #80]	; (8007c74 <MX_SPI3_Init+0x74>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007c26:	4b13      	ldr	r3, [pc, #76]	; (8007c74 <MX_SPI3_Init+0x74>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007c2c:	4b11      	ldr	r3, [pc, #68]	; (8007c74 <MX_SPI3_Init+0x74>)
 8007c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c32:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c34:	4b0f      	ldr	r3, [pc, #60]	; (8007c74 <MX_SPI3_Init+0x74>)
 8007c36:	2200      	movs	r2, #0
 8007c38:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007c3a:	4b0e      	ldr	r3, [pc, #56]	; (8007c74 <MX_SPI3_Init+0x74>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007c40:	4b0c      	ldr	r3, [pc, #48]	; (8007c74 <MX_SPI3_Init+0x74>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c46:	4b0b      	ldr	r3, [pc, #44]	; (8007c74 <MX_SPI3_Init+0x74>)
 8007c48:	2200      	movs	r2, #0
 8007c4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007c4c:	4b09      	ldr	r3, [pc, #36]	; (8007c74 <MX_SPI3_Init+0x74>)
 8007c4e:	2207      	movs	r2, #7
 8007c50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007c52:	4b08      	ldr	r3, [pc, #32]	; (8007c74 <MX_SPI3_Init+0x74>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007c58:	4b06      	ldr	r3, [pc, #24]	; (8007c74 <MX_SPI3_Init+0x74>)
 8007c5a:	2208      	movs	r2, #8
 8007c5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007c5e:	4805      	ldr	r0, [pc, #20]	; (8007c74 <MX_SPI3_Init+0x74>)
 8007c60:	f7fe fbfc 	bl	800645c <HAL_SPI_Init>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007c6a:	f000 f8bb 	bl	8007de4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8007c6e:	bf00      	nop
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	2000022c 	.word	0x2000022c
 8007c78:	40003c00 	.word	0x40003c00

08007c7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007c80:	4b14      	ldr	r3, [pc, #80]	; (8007cd4 <MX_USART1_UART_Init+0x58>)
 8007c82:	4a15      	ldr	r2, [pc, #84]	; (8007cd8 <MX_USART1_UART_Init+0x5c>)
 8007c84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8007c86:	4b13      	ldr	r3, [pc, #76]	; (8007cd4 <MX_USART1_UART_Init+0x58>)
 8007c88:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8007c8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007c8e:	4b11      	ldr	r3, [pc, #68]	; (8007cd4 <MX_USART1_UART_Init+0x58>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007c94:	4b0f      	ldr	r3, [pc, #60]	; (8007cd4 <MX_USART1_UART_Init+0x58>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007c9a:	4b0e      	ldr	r3, [pc, #56]	; (8007cd4 <MX_USART1_UART_Init+0x58>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007ca0:	4b0c      	ldr	r3, [pc, #48]	; (8007cd4 <MX_USART1_UART_Init+0x58>)
 8007ca2:	220c      	movs	r2, #12
 8007ca4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007ca6:	4b0b      	ldr	r3, [pc, #44]	; (8007cd4 <MX_USART1_UART_Init+0x58>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007cac:	4b09      	ldr	r3, [pc, #36]	; (8007cd4 <MX_USART1_UART_Init+0x58>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007cb2:	4b08      	ldr	r3, [pc, #32]	; (8007cd4 <MX_USART1_UART_Init+0x58>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007cb8:	4b06      	ldr	r3, [pc, #24]	; (8007cd4 <MX_USART1_UART_Init+0x58>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007cbe:	4805      	ldr	r0, [pc, #20]	; (8007cd4 <MX_USART1_UART_Init+0x58>)
 8007cc0:	f7fe fe0c 	bl	80068dc <HAL_UART_Init>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8007cca:	f000 f88b 	bl	8007de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007cce:	bf00      	nop
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	200002b8 	.word	0x200002b8
 8007cd8:	40013800 	.word	0x40013800

08007cdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007ce0:	4b14      	ldr	r3, [pc, #80]	; (8007d34 <MX_USART2_UART_Init+0x58>)
 8007ce2:	4a15      	ldr	r2, [pc, #84]	; (8007d38 <MX_USART2_UART_Init+0x5c>)
 8007ce4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007ce6:	4b13      	ldr	r3, [pc, #76]	; (8007d34 <MX_USART2_UART_Init+0x58>)
 8007ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007cec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007cee:	4b11      	ldr	r3, [pc, #68]	; (8007d34 <MX_USART2_UART_Init+0x58>)
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007cf4:	4b0f      	ldr	r3, [pc, #60]	; (8007d34 <MX_USART2_UART_Init+0x58>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007cfa:	4b0e      	ldr	r3, [pc, #56]	; (8007d34 <MX_USART2_UART_Init+0x58>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007d00:	4b0c      	ldr	r3, [pc, #48]	; (8007d34 <MX_USART2_UART_Init+0x58>)
 8007d02:	220c      	movs	r2, #12
 8007d04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d06:	4b0b      	ldr	r3, [pc, #44]	; (8007d34 <MX_USART2_UART_Init+0x58>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d0c:	4b09      	ldr	r3, [pc, #36]	; (8007d34 <MX_USART2_UART_Init+0x58>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007d12:	4b08      	ldr	r3, [pc, #32]	; (8007d34 <MX_USART2_UART_Init+0x58>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007d18:	4b06      	ldr	r3, [pc, #24]	; (8007d34 <MX_USART2_UART_Init+0x58>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007d1e:	4805      	ldr	r0, [pc, #20]	; (8007d34 <MX_USART2_UART_Init+0x58>)
 8007d20:	f7fe fddc 	bl	80068dc <HAL_UART_Init>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d001      	beq.n	8007d2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8007d2a:	f000 f85b 	bl	8007de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007d2e:	bf00      	nop
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	2000033c 	.word	0x2000033c
 8007d38:	40004400 	.word	0x40004400

08007d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b088      	sub	sp, #32
 8007d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d42:	f107 030c 	add.w	r3, r7, #12
 8007d46:	2200      	movs	r2, #0
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	605a      	str	r2, [r3, #4]
 8007d4c:	609a      	str	r2, [r3, #8]
 8007d4e:	60da      	str	r2, [r3, #12]
 8007d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d52:	4b22      	ldr	r3, [pc, #136]	; (8007ddc <MX_GPIO_Init+0xa0>)
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	4a21      	ldr	r2, [pc, #132]	; (8007ddc <MX_GPIO_Init+0xa0>)
 8007d58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d5c:	6153      	str	r3, [r2, #20]
 8007d5e:	4b1f      	ldr	r3, [pc, #124]	; (8007ddc <MX_GPIO_Init+0xa0>)
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d66:	60bb      	str	r3, [r7, #8]
 8007d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d6a:	4b1c      	ldr	r3, [pc, #112]	; (8007ddc <MX_GPIO_Init+0xa0>)
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	4a1b      	ldr	r2, [pc, #108]	; (8007ddc <MX_GPIO_Init+0xa0>)
 8007d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d74:	6153      	str	r3, [r2, #20]
 8007d76:	4b19      	ldr	r3, [pc, #100]	; (8007ddc <MX_GPIO_Init+0xa0>)
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d7e:	607b      	str	r3, [r7, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d82:	4b16      	ldr	r3, [pc, #88]	; (8007ddc <MX_GPIO_Init+0xa0>)
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	4a15      	ldr	r2, [pc, #84]	; (8007ddc <MX_GPIO_Init+0xa0>)
 8007d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d8c:	6153      	str	r3, [r2, #20]
 8007d8e:	4b13      	ldr	r3, [pc, #76]	; (8007ddc <MX_GPIO_Init+0xa0>)
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d96:	603b      	str	r3, [r7, #0]
 8007d98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	2120      	movs	r1, #32
 8007d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007da2:	f7fa fb2c 	bl	80023fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8007da6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007daa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8007dac:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8007db0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007db2:	2300      	movs	r3, #0
 8007db4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8007db6:	f107 030c 	add.w	r3, r7, #12
 8007dba:	4619      	mov	r1, r3
 8007dbc:	4808      	ldr	r0, [pc, #32]	; (8007de0 <MX_GPIO_Init+0xa4>)
 8007dbe:	f7fa f97d 	bl	80020bc <HAL_GPIO_Init>
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	2028      	movs	r0, #40	; 0x28
 8007dc8:	f7fc fbfd 	bl	80045c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007dcc:	2028      	movs	r0, #40	; 0x28
 8007dce:	f7fc fc16 	bl	80045fe <HAL_NVIC_EnableIRQ>

}
 8007dd2:	bf00      	nop
 8007dd4:	3720      	adds	r7, #32
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	40021000 	.word	0x40021000
 8007de0:	48000800 	.word	0x48000800

08007de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 8007de4:	b480      	push	{r7}
 8007de6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007de8:	b672      	cpsid	i
}
 8007dea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007dec:	e7fe      	b.n	8007dec <Error_Handler+0x8>

08007dee <EcuM_StartUp_Two>:
#include "EcuM.h"
#include "Os_task.h"
#include "BswM.h"

void EcuM_StartUp_Two()
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	af00      	add	r7, sp, #0
	(void)HAL_Init();
 8007df2:	f7fc fac1 	bl	8004378 <HAL_Init>
	BswM_Init();
 8007df6:	f7ff fd7e 	bl	80078f6 <BswM_Init>
}
 8007dfa:	bf00      	nop
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <EcuM_Init>:

int EcuM_Init(void)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	af00      	add	r7, sp, #0

	Os_Task_StartUp();
 8007e02:	f000 f97f 	bl	8008104 <Os_Task_StartUp>

	/* Start Scheduler */
	Os_Start();
 8007e06:	f000 f803 	bl	8007e10 <Os_Start>

	return 0;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <Os_Start>:
#include "Os_scheduler.h"
#include "Os_task.h"


void Os_Start()
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	af00      	add	r7, sp, #0
	Os_Task_StartUp_0();
 8007e14:	f000 f8c8 	bl	8007fa8 <Os_Task_StartUp_0>
	Os_Scheduler_Init();
 8007e18:	f000 f81e 	bl	8007e58 <Os_Scheduler_Init>
	Os_Scheduler_Start();
 8007e1c:	f000 f8ae 	bl	8007f7c <Os_Scheduler_Start>

	while(1)
 8007e20:	e7fe      	b.n	8007e20 <Os_Start+0x10>
	...

08007e24 <SysTick_Handler>:

	/// At this point the processor has already pushed PSR, PC, LR, R12, R3, R2, R1 and R0
	/// onto the stack. We need to push the rest(i.e R4, R5, R6, R7, R8, R9, R10 & R11) to save the
	/// context of the current task.
	/// Disable interrupts
    __asm("CPSID   I");
 8007e24:	b672      	cpsid	i
    /// Push registers R4 to R7
    __asm("PUSH    {R4-R7}");
 8007e26:	b4f0      	push	{r4, r5, r6, r7}
    /// Push registers R8-R11
    __asm("MOV     R4, R8");
 8007e28:	4644      	mov	r4, r8
    __asm("MOV     R5, R9");
 8007e2a:	464d      	mov	r5, r9
    __asm("MOV     R6, R10");
 8007e2c:	4656      	mov	r6, sl
    __asm("MOV     R7, R11");
 8007e2e:	465f      	mov	r7, fp
    __asm("PUSH    {R4-R7}");
 8007e30:	b4f0      	push	{r4, r5, r6, r7}
    /// Load R0 with the address of pCurntTcb
    __asm("LDR     R0, =pCurntTcb");
 8007e32:	4808      	ldr	r0, [pc, #32]	; (8007e54 <SysTick_Handler+0x30>)
    /// Load R1 with the content of pCurntTcb(i.e post this, R1 will contain the address of current TCB).
    __asm("LDR     R1, [R0]");
 8007e34:	6801      	ldr	r1, [r0, #0]
    /// Move the SP value to R4
    __asm("MOV     R4, SP");
 8007e36:	466c      	mov	r4, sp
    /// Store the value of the stack pointer(copied in R4) to the current tasks "stackPt" element in its TCB.
    /// This marks an end to saving the context of the current task.
    __asm("STR     R4, [R1]");
 8007e38:	600c      	str	r4, [r1, #0]


    /// STEP 2: LOAD THE NEW TASK CONTEXT FROM ITS STACK TO THE CPU REGISTERS, UPDATE pCurntTcb.

    /// Load the address of the next task TCB onto the R1.
    __asm("LDR     R1, [R1,#4]");
 8007e3a:	6849      	ldr	r1, [r1, #4]
    /// Load the contents of the next tasks stack pointer to pCurntTcb, equivalent to pointing pCurntTcb to
    /// the newer tasks TCB. Remember R1 contains the address of pCurntTcb.
    __asm("STR     R1, [R0]");
 8007e3c:	6001      	str	r1, [r0, #0]
    /// Load the newer tasks TCB to the SP using R4.
    __asm("LDR     R4, [R1]");
 8007e3e:	680c      	ldr	r4, [r1, #0]
    __asm("MOV     SP, R4");
 8007e40:	46a5      	mov	sp, r4
    /// Pop registers R8-R11
    __asm("POP     {R4-R7}");
 8007e42:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 8007e44:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 8007e46:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 8007e48:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 8007e4a:	46bb      	mov	fp, r7
    /// Pop registers R4-R7
    __asm("POP     {R4-R7}");
 8007e4c:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("CPSIE   I ");
 8007e4e:	b662      	cpsie	i
    __asm("BX      LR");
 8007e50:	4770      	bx	lr

}
 8007e52:	bf00      	nop
 8007e54:	200003f4 	.word	0x200003f4

08007e58 <Os_Scheduler_Init>:

void Os_Scheduler_Init()
{
 8007e58:	b480      	push	{r7}
 8007e5a:	af00      	add	r7, sp, #0
	/// Enter critical section
	/// Disable interrupts
	__asm("CPSID   I");
 8007e5c:	b672      	cpsid	i
	/// Make the TCB linked list circular
	tcbs[0].nextPt = &tcbs[1];
 8007e5e:	4b33      	ldr	r3, [pc, #204]	; (8007f2c <Os_Scheduler_Init+0xd4>)
 8007e60:	4a33      	ldr	r2, [pc, #204]	; (8007f30 <Os_Scheduler_Init+0xd8>)
 8007e62:	605a      	str	r2, [r3, #4]
	tcbs[1].nextPt = &tcbs[2];
 8007e64:	4b31      	ldr	r3, [pc, #196]	; (8007f2c <Os_Scheduler_Init+0xd4>)
 8007e66:	4a33      	ldr	r2, [pc, #204]	; (8007f34 <Os_Scheduler_Init+0xdc>)
 8007e68:	60da      	str	r2, [r3, #12]
	tcbs[2].nextPt = &tcbs[3];
 8007e6a:	4b30      	ldr	r3, [pc, #192]	; (8007f2c <Os_Scheduler_Init+0xd4>)
 8007e6c:	4a32      	ldr	r2, [pc, #200]	; (8007f38 <Os_Scheduler_Init+0xe0>)
 8007e6e:	615a      	str	r2, [r3, #20]
	tcbs[3].nextPt = &tcbs[4];
 8007e70:	4b2e      	ldr	r3, [pc, #184]	; (8007f2c <Os_Scheduler_Init+0xd4>)
 8007e72:	4a32      	ldr	r2, [pc, #200]	; (8007f3c <Os_Scheduler_Init+0xe4>)
 8007e74:	61da      	str	r2, [r3, #28]
	tcbs[4].nextPt = &tcbs[5];
 8007e76:	4b2d      	ldr	r3, [pc, #180]	; (8007f2c <Os_Scheduler_Init+0xd4>)
 8007e78:	4a31      	ldr	r2, [pc, #196]	; (8007f40 <Os_Scheduler_Init+0xe8>)
 8007e7a:	625a      	str	r2, [r3, #36]	; 0x24
	tcbs[5].nextPt = &tcbs[0];
 8007e7c:	4b2b      	ldr	r3, [pc, #172]	; (8007f2c <Os_Scheduler_Init+0xd4>)
 8007e7e:	4a2b      	ldr	r2, [pc, #172]	; (8007f2c <Os_Scheduler_Init+0xd4>)
 8007e80:	62da      	str	r2, [r3, #44]	; 0x2c

	/// Setup stack for task0

	/// Setup the stack such that it is holding one task context.
	/// Remember it is a descending stack and a context consists of 16 registers.
	tcbs[0].stackPt = &TCB_STACK[0][STACKSIZE-16];
 8007e82:	4b2a      	ldr	r3, [pc, #168]	; (8007f2c <Os_Scheduler_Init+0xd4>)
 8007e84:	4a2f      	ldr	r2, [pc, #188]	; (8007f44 <Os_Scheduler_Init+0xec>)
 8007e86:	601a      	str	r2, [r3, #0]
	/// Set the 'T' bit in stacked xPSR to '1' to notify processor
	/// on exception return about the thumb state. V6-m and V7-m cores
	/// can only support thumb state hence this should be always set
	/// to '1'.
	TCB_STACK[0][STACKSIZE-1] = 0x01000000;
 8007e88:	4b2f      	ldr	r3, [pc, #188]	; (8007f48 <Os_Scheduler_Init+0xf0>)
 8007e8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e8e:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
	/// Set the stacked PC to point to the task
	TCB_STACK[0][STACKSIZE-2] = (int32_t)(Task5ms_0);
 8007e92:	4a2e      	ldr	r2, [pc, #184]	; (8007f4c <Os_Scheduler_Init+0xf4>)
 8007e94:	4b2c      	ldr	r3, [pc, #176]	; (8007f48 <Os_Scheduler_Init+0xf0>)
 8007e96:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

	/// Setup stack for task1

	/// Setup the stack such that it is holding one task context.
	/// Remember it is a descending stack and a context consists of 16 registers.
    tcbs[1].stackPt = &TCB_STACK[1][STACKSIZE-16];
 8007e9a:	4b24      	ldr	r3, [pc, #144]	; (8007f2c <Os_Scheduler_Init+0xd4>)
 8007e9c:	4a2c      	ldr	r2, [pc, #176]	; (8007f50 <Os_Scheduler_Init+0xf8>)
 8007e9e:	609a      	str	r2, [r3, #8]
    /// Set the 'T' bit in stacked xPSR to '1' to notify processor
    /// on exception return about the thumb state. V6-m and V7-m cores
    /// can only support thumb state hence this should be always set
    /// to '1'.
    TCB_STACK[1][STACKSIZE-1] = 0x01000000;
 8007ea0:	4b29      	ldr	r3, [pc, #164]	; (8007f48 <Os_Scheduler_Init+0xf0>)
 8007ea2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ea6:	f8c3 263c 	str.w	r2, [r3, #1596]	; 0x63c
    /// Set the stacked PC to point to the task
    TCB_STACK[1][STACKSIZE-2] = (int32_t)(Task10ms_0);
 8007eaa:	4a2a      	ldr	r2, [pc, #168]	; (8007f54 <Os_Scheduler_Init+0xfc>)
 8007eac:	4b26      	ldr	r3, [pc, #152]	; (8007f48 <Os_Scheduler_Init+0xf0>)
 8007eae:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638


    tcbs[2].stackPt = &TCB_STACK[2][STACKSIZE-16];
 8007eb2:	4b1e      	ldr	r3, [pc, #120]	; (8007f2c <Os_Scheduler_Init+0xd4>)
 8007eb4:	4a28      	ldr	r2, [pc, #160]	; (8007f58 <Os_Scheduler_Init+0x100>)
 8007eb6:	611a      	str	r2, [r3, #16]
    TCB_STACK[2][STACKSIZE-1] = 0x01000000;
 8007eb8:	4b23      	ldr	r3, [pc, #140]	; (8007f48 <Os_Scheduler_Init+0xf0>)
 8007eba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ebe:	f8c3 295c 	str.w	r2, [r3, #2396]	; 0x95c
    TCB_STACK[2][STACKSIZE-2] = (int32_t)(Task20ms_0);
 8007ec2:	4a26      	ldr	r2, [pc, #152]	; (8007f5c <Os_Scheduler_Init+0x104>)
 8007ec4:	4b20      	ldr	r3, [pc, #128]	; (8007f48 <Os_Scheduler_Init+0xf0>)
 8007ec6:	f8c3 2958 	str.w	r2, [r3, #2392]	; 0x958

    tcbs[3].stackPt = &TCB_STACK[3][STACKSIZE-16];
 8007eca:	4b18      	ldr	r3, [pc, #96]	; (8007f2c <Os_Scheduler_Init+0xd4>)
 8007ecc:	4a24      	ldr	r2, [pc, #144]	; (8007f60 <Os_Scheduler_Init+0x108>)
 8007ece:	619a      	str	r2, [r3, #24]
    TCB_STACK[3][STACKSIZE-1] = 0x01000000;
 8007ed0:	4b1d      	ldr	r3, [pc, #116]	; (8007f48 <Os_Scheduler_Init+0xf0>)
 8007ed2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ed6:	f8c3 2c7c 	str.w	r2, [r3, #3196]	; 0xc7c
    TCB_STACK[3][STACKSIZE-2] = (int32_t)(Task50ms_0);
 8007eda:	4a22      	ldr	r2, [pc, #136]	; (8007f64 <Os_Scheduler_Init+0x10c>)
 8007edc:	4b1a      	ldr	r3, [pc, #104]	; (8007f48 <Os_Scheduler_Init+0xf0>)
 8007ede:	f8c3 2c78 	str.w	r2, [r3, #3192]	; 0xc78

    tcbs[4].stackPt = &TCB_STACK[4][STACKSIZE-16];
 8007ee2:	4b12      	ldr	r3, [pc, #72]	; (8007f2c <Os_Scheduler_Init+0xd4>)
 8007ee4:	4a20      	ldr	r2, [pc, #128]	; (8007f68 <Os_Scheduler_Init+0x110>)
 8007ee6:	621a      	str	r2, [r3, #32]
    TCB_STACK[4][STACKSIZE-1] = 0x01000000;
 8007ee8:	4b17      	ldr	r3, [pc, #92]	; (8007f48 <Os_Scheduler_Init+0xf0>)
 8007eea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007eee:	f8c3 2f9c 	str.w	r2, [r3, #3996]	; 0xf9c
    TCB_STACK[4][STACKSIZE-2] = (int32_t)(Task100ms_0);
 8007ef2:	4a1e      	ldr	r2, [pc, #120]	; (8007f6c <Os_Scheduler_Init+0x114>)
 8007ef4:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <Os_Scheduler_Init+0xf0>)
 8007ef6:	f8c3 2f98 	str.w	r2, [r3, #3992]	; 0xf98

    tcbs[5].stackPt = &TCB_STACK[5][STACKSIZE-16];
 8007efa:	4b0c      	ldr	r3, [pc, #48]	; (8007f2c <Os_Scheduler_Init+0xd4>)
 8007efc:	4a1c      	ldr	r2, [pc, #112]	; (8007f70 <Os_Scheduler_Init+0x118>)
 8007efe:	629a      	str	r2, [r3, #40]	; 0x28
    TCB_STACK[5][STACKSIZE-1] = 0x01000000;
 8007f00:	4b11      	ldr	r3, [pc, #68]	; (8007f48 <Os_Scheduler_Init+0xf0>)
 8007f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f06:	461a      	mov	r2, r3
 8007f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f0c:	f8c2 32bc 	str.w	r3, [r2, #700]	; 0x2bc
    TCB_STACK[5][STACKSIZE-2] = (int32_t)(Task500ms_0);
 8007f10:	4b18      	ldr	r3, [pc, #96]	; (8007f74 <Os_Scheduler_Init+0x11c>)
 8007f12:	4a0d      	ldr	r2, [pc, #52]	; (8007f48 <Os_Scheduler_Init+0xf0>)
 8007f14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f18:	f8c2 32b8 	str.w	r3, [r2, #696]	; 0x2b8

    /// Make current tcb pointer point to task0
    pCurntTcb = &tcbs[0];
 8007f1c:	4b16      	ldr	r3, [pc, #88]	; (8007f78 <Os_Scheduler_Init+0x120>)
 8007f1e:	4a03      	ldr	r2, [pc, #12]	; (8007f2c <Os_Scheduler_Init+0xd4>)
 8007f20:	601a      	str	r2, [r3, #0]
    /// Enable interrupts
    __asm("CPSIE   I ");
 8007f22:	b662      	cpsie	i
}
 8007f24:	bf00      	nop
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bc80      	pop	{r7}
 8007f2a:	4770      	bx	lr
 8007f2c:	200003c4 	.word	0x200003c4
 8007f30:	200003cc 	.word	0x200003cc
 8007f34:	200003d4 	.word	0x200003d4
 8007f38:	200003dc 	.word	0x200003dc
 8007f3c:	200003e4 	.word	0x200003e4
 8007f40:	200003ec 	.word	0x200003ec
 8007f44:	200006d8 	.word	0x200006d8
 8007f48:	200003f8 	.word	0x200003f8
 8007f4c:	08007fb5 	.word	0x08007fb5
 8007f50:	200009f8 	.word	0x200009f8
 8007f54:	08007fed 	.word	0x08007fed
 8007f58:	20000d18 	.word	0x20000d18
 8007f5c:	08008025 	.word	0x08008025
 8007f60:	20001038 	.word	0x20001038
 8007f64:	0800805d 	.word	0x0800805d
 8007f68:	20001358 	.word	0x20001358
 8007f6c:	08008095 	.word	0x08008095
 8007f70:	20001678 	.word	0x20001678
 8007f74:	080080cd 	.word	0x080080cd
 8007f78:	200003f4 	.word	0x200003f4

08007f7c <Os_Scheduler_Start>:


__attribute__((naked)) void Os_Scheduler_Start(void)
{
    /// R0 contains the address of currentPt
    __asm("LDR     R0, =pCurntTcb");
 8007f7c:	4809      	ldr	r0, [pc, #36]	; (8007fa4 <Os_Scheduler_Start+0x28>)
    /// R2 contains the address in currentPt(value of currentPt)
    __asm("LDR     R2, [R0]");
 8007f7e:	6802      	ldr	r2, [r0, #0]
    /// Load the SP reg with the stacked SP value
    __asm("LDR     R4, [R2]");
 8007f80:	6814      	ldr	r4, [r2, #0]
    __asm("MOV     SP, R4");
 8007f82:	46a5      	mov	sp, r4
    /// Pop registers R8-R11(user saved context)
    __asm("POP     {R4-R7}");
 8007f84:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 8007f86:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 8007f88:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 8007f8a:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 8007f8c:	46bb      	mov	fp, r7
    /// Pop registers R4-R7(user saved context)
    __asm("POP     {R4-R7}");
 8007f8e:	bcf0      	pop	{r4, r5, r6, r7}
    ///  Start poping the stacked exception frame.
    __asm("POP     {R0-R3}");
 8007f90:	bc0f      	pop	{r0, r1, r2, r3}
    __asm("POP     {R4}");
 8007f92:	bc10      	pop	{r4}
    __asm("MOV     R12, R4");
 8007f94:	46a4      	mov	ip, r4
    /// Skip the saved LR
    __asm("ADD     SP,SP,#4");
 8007f96:	b001      	add	sp, #4
    /// POP the saved PC into LR via R4, We do this to jump into the
    /// first task when we execute the branch instruction to exit this routine.
    __asm("POP     {R4}");
 8007f98:	bc10      	pop	{r4}
    __asm("MOV     LR, R4");
 8007f9a:	46a6      	mov	lr, r4
    __asm("ADD     SP,SP,#4");
 8007f9c:	b001      	add	sp, #4
    /// Enable interrupts
    __asm("CPSIE   I ");
 8007f9e:	b662      	cpsie	i
    __asm("BX      LR");
 8007fa0:	4770      	bx	lr
}
 8007fa2:	bf00      	nop
 8007fa4:	200003f4 	.word	0x200003f4

08007fa8 <Os_Task_StartUp_0>:

void Os_Task_StartUp_0()
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	af00      	add	r7, sp, #0
	Os_Task_StartUp();
 8007fac:	f000 f8aa 	bl	8008104 <Os_Task_StartUp>
}
 8007fb0:	bf00      	nop
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <Task5ms_0>:

volatile void Task5ms_0()
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	af00      	add	r7, sp, #0
    while(1)
    {
    	while(task5ms_cnt == tim3_5count)
 8007fb8:	bf00      	nop
 8007fba:	4b09      	ldr	r3, [pc, #36]	; (8007fe0 <Task5ms_0+0x2c>)
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	4b09      	ldr	r3, [pc, #36]	; (8007fe4 <Task5ms_0+0x30>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d0f9      	beq.n	8007fba <Task5ms_0+0x6>
    	{

    	}
   		Os_Task5ms_0_cnt++;
 8007fc6:	4b08      	ldr	r3, [pc, #32]	; (8007fe8 <Task5ms_0+0x34>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	4a06      	ldr	r2, [pc, #24]	; (8007fe8 <Task5ms_0+0x34>)
 8007fce:	6013      	str	r3, [r2, #0]
    	task5ms_cnt = tim3_5count;
 8007fd0:	4b04      	ldr	r3, [pc, #16]	; (8007fe4 <Task5ms_0+0x30>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a02      	ldr	r2, [pc, #8]	; (8007fe0 <Task5ms_0+0x2c>)
 8007fd6:	6013      	str	r3, [r2, #0]

    	Os_Task_5ms();
 8007fd8:	f000 f89a 	bl	8008110 <Os_Task_5ms>
    	while(task5ms_cnt == tim3_5count)
 8007fdc:	e7ec      	b.n	8007fb8 <Task5ms_0+0x4>
 8007fde:	bf00      	nop
 8007fe0:	200016bc 	.word	0x200016bc
 8007fe4:	200000ac 	.word	0x200000ac
 8007fe8:	200016b8 	.word	0x200016b8

08007fec <Task10ms_0>:
    }
}

volatile void Task10ms_0()
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	af00      	add	r7, sp, #0
    while(1)
    {
    	while(task10ms_cnt == tim3_10count)
 8007ff0:	bf00      	nop
 8007ff2:	4b09      	ldr	r3, [pc, #36]	; (8008018 <Task10ms_0+0x2c>)
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	4b09      	ldr	r3, [pc, #36]	; (800801c <Task10ms_0+0x30>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d0f9      	beq.n	8007ff2 <Task10ms_0+0x6>
    	{

    	}
   		Os_Task10ms_0_cnt++;
 8007ffe:	4b08      	ldr	r3, [pc, #32]	; (8008020 <Task10ms_0+0x34>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3301      	adds	r3, #1
 8008004:	4a06      	ldr	r2, [pc, #24]	; (8008020 <Task10ms_0+0x34>)
 8008006:	6013      	str	r3, [r2, #0]
    	task10ms_cnt = tim3_10count;
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <Task10ms_0+0x30>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a02      	ldr	r2, [pc, #8]	; (8008018 <Task10ms_0+0x2c>)
 800800e:	6013      	str	r3, [r2, #0]

    	Os_Task_10ms();
 8008010:	f000 f884 	bl	800811c <Os_Task_10ms>
    	while(task10ms_cnt == tim3_10count)
 8008014:	e7ec      	b.n	8007ff0 <Task10ms_0+0x4>
 8008016:	bf00      	nop
 8008018:	200016c4 	.word	0x200016c4
 800801c:	200000b0 	.word	0x200000b0
 8008020:	200016c0 	.word	0x200016c0

08008024 <Task20ms_0>:
    }
}

volatile void Task20ms_0()
{
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0
    while(1)
    {
    	while(task20ms_cnt == tim3_20count)
 8008028:	bf00      	nop
 800802a:	4b09      	ldr	r3, [pc, #36]	; (8008050 <Task20ms_0+0x2c>)
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	4b09      	ldr	r3, [pc, #36]	; (8008054 <Task20ms_0+0x30>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	429a      	cmp	r2, r3
 8008034:	d0f9      	beq.n	800802a <Task20ms_0+0x6>
    	{

    	}
   		Os_Task20ms_0_cnt++;
 8008036:	4b08      	ldr	r3, [pc, #32]	; (8008058 <Task20ms_0+0x34>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3301      	adds	r3, #1
 800803c:	4a06      	ldr	r2, [pc, #24]	; (8008058 <Task20ms_0+0x34>)
 800803e:	6013      	str	r3, [r2, #0]
    	task20ms_cnt = tim3_20count;
 8008040:	4b04      	ldr	r3, [pc, #16]	; (8008054 <Task20ms_0+0x30>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a02      	ldr	r2, [pc, #8]	; (8008050 <Task20ms_0+0x2c>)
 8008046:	6013      	str	r3, [r2, #0]

    	Os_Task_20ms();
 8008048:	f000 f86e 	bl	8008128 <Os_Task_20ms>
    	while(task20ms_cnt == tim3_20count)
 800804c:	e7ec      	b.n	8008028 <Task20ms_0+0x4>
 800804e:	bf00      	nop
 8008050:	200016cc 	.word	0x200016cc
 8008054:	200000b4 	.word	0x200000b4
 8008058:	200016c8 	.word	0x200016c8

0800805c <Task50ms_0>:
    }
}


volatile void Task50ms_0()
{
 800805c:	b580      	push	{r7, lr}
 800805e:	af00      	add	r7, sp, #0
    while(1)
    {
    	while(task50ms_cnt == tim3_50count)
 8008060:	bf00      	nop
 8008062:	4b09      	ldr	r3, [pc, #36]	; (8008088 <Task50ms_0+0x2c>)
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	4b09      	ldr	r3, [pc, #36]	; (800808c <Task50ms_0+0x30>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d0f9      	beq.n	8008062 <Task50ms_0+0x6>
    	{

    	}
   		Os_Task50ms_0_cnt++;
 800806e:	4b08      	ldr	r3, [pc, #32]	; (8008090 <Task50ms_0+0x34>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3301      	adds	r3, #1
 8008074:	4a06      	ldr	r2, [pc, #24]	; (8008090 <Task50ms_0+0x34>)
 8008076:	6013      	str	r3, [r2, #0]
    	task50ms_cnt = tim3_50count;
 8008078:	4b04      	ldr	r3, [pc, #16]	; (800808c <Task50ms_0+0x30>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a02      	ldr	r2, [pc, #8]	; (8008088 <Task50ms_0+0x2c>)
 800807e:	6013      	str	r3, [r2, #0]

    	Os_Task_50ms();
 8008080:	f000 f858 	bl	8008134 <Os_Task_50ms>
    	while(task50ms_cnt == tim3_50count)
 8008084:	e7ec      	b.n	8008060 <Task50ms_0+0x4>
 8008086:	bf00      	nop
 8008088:	200016d4 	.word	0x200016d4
 800808c:	200000b8 	.word	0x200000b8
 8008090:	200016d0 	.word	0x200016d0

08008094 <Task100ms_0>:
    }
}


volatile void Task100ms_0()
{
 8008094:	b580      	push	{r7, lr}
 8008096:	af00      	add	r7, sp, #0
    while(1)
    {
    	while(task100ms_cnt == tim3_100count)
 8008098:	bf00      	nop
 800809a:	4b09      	ldr	r3, [pc, #36]	; (80080c0 <Task100ms_0+0x2c>)
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	4b09      	ldr	r3, [pc, #36]	; (80080c4 <Task100ms_0+0x30>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d0f9      	beq.n	800809a <Task100ms_0+0x6>
    	{

    	}
   		Os_Task100ms_0_cnt++;
 80080a6:	4b08      	ldr	r3, [pc, #32]	; (80080c8 <Task100ms_0+0x34>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	3301      	adds	r3, #1
 80080ac:	4a06      	ldr	r2, [pc, #24]	; (80080c8 <Task100ms_0+0x34>)
 80080ae:	6013      	str	r3, [r2, #0]
    	task100ms_cnt = tim3_100count;
 80080b0:	4b04      	ldr	r3, [pc, #16]	; (80080c4 <Task100ms_0+0x30>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a02      	ldr	r2, [pc, #8]	; (80080c0 <Task100ms_0+0x2c>)
 80080b6:	6013      	str	r3, [r2, #0]

    	Os_Task_100ms();
 80080b8:	f000 f842 	bl	8008140 <Os_Task_100ms>
    	while(task100ms_cnt == tim3_100count)
 80080bc:	e7ec      	b.n	8008098 <Task100ms_0+0x4>
 80080be:	bf00      	nop
 80080c0:	200016dc 	.word	0x200016dc
 80080c4:	200000bc 	.word	0x200000bc
 80080c8:	200016d8 	.word	0x200016d8

080080cc <Task500ms_0>:
    }
}


volatile void Task500ms_0()
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	af00      	add	r7, sp, #0
    while(1)
    {
    	while(task500ms_cnt == tim3_500count)
 80080d0:	bf00      	nop
 80080d2:	4b09      	ldr	r3, [pc, #36]	; (80080f8 <Task500ms_0+0x2c>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	4b09      	ldr	r3, [pc, #36]	; (80080fc <Task500ms_0+0x30>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d0f9      	beq.n	80080d2 <Task500ms_0+0x6>
    	{

    	}
   		Os_Task500ms_0_cnt++;
 80080de:	4b08      	ldr	r3, [pc, #32]	; (8008100 <Task500ms_0+0x34>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3301      	adds	r3, #1
 80080e4:	4a06      	ldr	r2, [pc, #24]	; (8008100 <Task500ms_0+0x34>)
 80080e6:	6013      	str	r3, [r2, #0]
    	task500ms_cnt = tim3_500count;
 80080e8:	4b04      	ldr	r3, [pc, #16]	; (80080fc <Task500ms_0+0x30>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a02      	ldr	r2, [pc, #8]	; (80080f8 <Task500ms_0+0x2c>)
 80080ee:	6013      	str	r3, [r2, #0]

    	Os_Task_500ms();
 80080f0:	f000 f82c 	bl	800814c <Os_Task_500ms>
    	while(task500ms_cnt == tim3_500count)
 80080f4:	e7ec      	b.n	80080d0 <Task500ms_0+0x4>
 80080f6:	bf00      	nop
 80080f8:	200016e4 	.word	0x200016e4
 80080fc:	200000c0 	.word	0x200000c0
 8008100:	200016e0 	.word	0x200016e0

08008104 <Os_Task_StartUp>:

#include "Cdd_Servo.h"
#include "LED.h"

TASK(StartUp)()
{
 8008104:	b580      	push	{r7, lr}
 8008106:	af00      	add	r7, sp, #0
	Rte_Os_Task_StartUp();
 8008108:	f000 f878 	bl	80081fc <Rte_Task_StartUp>
}
 800810c:	bf00      	nop
 800810e:	bd80      	pop	{r7, pc}

08008110 <Os_Task_5ms>:

TASK(5ms)()
{
 8008110:	b580      	push	{r7, lr}
 8008112:	af00      	add	r7, sp, #0
	Rte_Os_Task_5ms();
 8008114:	f000 f88e 	bl	8008234 <Rte_Task_5ms>
}
 8008118:	bf00      	nop
 800811a:	bd80      	pop	{r7, pc}

0800811c <Os_Task_10ms>:

TASK(10ms)()
{
 800811c:	b580      	push	{r7, lr}
 800811e:	af00      	add	r7, sp, #0
	Rte_Os_Task_10ms();
 8008120:	f000 f88e 	bl	8008240 <Rte_Task_10ms>
}
 8008124:	bf00      	nop
 8008126:	bd80      	pop	{r7, pc}

08008128 <Os_Task_20ms>:

TASK(20ms)()
{
 8008128:	b580      	push	{r7, lr}
 800812a:	af00      	add	r7, sp, #0
	Rte_Os_Task_20ms();
 800812c:	f000 f89a 	bl	8008264 <Rte_Task_20ms>
}
 8008130:	bf00      	nop
 8008132:	bd80      	pop	{r7, pc}

08008134 <Os_Task_50ms>:

TASK(50ms)()
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
	Rte_Os_Task_50ms();
 8008138:	f000 f89a 	bl	8008270 <Rte_Task_50ms>
}
 800813c:	bf00      	nop
 800813e:	bd80      	pop	{r7, pc}

08008140 <Os_Task_100ms>:

TASK(100ms)()
{
 8008140:	b580      	push	{r7, lr}
 8008142:	af00      	add	r7, sp, #0
	Rte_Os_Task_100ms();
 8008144:	f000 f89a 	bl	800827c <Rte_Task_100ms>
}
 8008148:	bf00      	nop
 800814a:	bd80      	pop	{r7, pc}

0800814c <Os_Task_500ms>:

TASK(500ms)()
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
	Rte_Os_Task_500ms();
 8008150:	f000 f8a0 	bl	8008294 <Rte_Task_500ms>
}
 8008154:	bf00      	nop
 8008156:	bd80      	pop	{r7, pc}

08008158 <Tm_Init>:

#include "Tm.h"
#include "Gpt.h"

void Tm_Init(void)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	af00      	add	r7, sp, #0
	Gpt_TIM3_Start_IT();
 800815c:	f7fa fbb0 	bl	80028c0 <Gpt_TIM3_Start_IT>
}
 8008160:	bf00      	nop
 8008162:	bd80      	pop	{r7, pc}

08008164 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800819c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008168:	480d      	ldr	r0, [pc, #52]	; (80081a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800816a:	490e      	ldr	r1, [pc, #56]	; (80081a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800816c:	4a0e      	ldr	r2, [pc, #56]	; (80081a8 <LoopForever+0xe>)
  movs r3, #0
 800816e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008170:	e002      	b.n	8008178 <LoopCopyDataInit>

08008172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008176:	3304      	adds	r3, #4

08008178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800817a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800817c:	d3f9      	bcc.n	8008172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800817e:	4a0b      	ldr	r2, [pc, #44]	; (80081ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8008180:	4c0b      	ldr	r4, [pc, #44]	; (80081b0 <LoopForever+0x16>)
  movs r3, #0
 8008182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008184:	e001      	b.n	800818a <LoopFillZerobss>

08008186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008188:	3204      	adds	r2, #4

0800818a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800818a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800818c:	d3fb      	bcc.n	8008186 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800818e:	f7fc f8ed 	bl	800436c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008192:	f000 f90b 	bl	80083ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	EcuM_Init
 8008196:	f7ff fe32 	bl	8007dfe <EcuM_Init>

0800819a <LoopForever>:

LoopForever:
    b LoopForever
 800819a:	e7fe      	b.n	800819a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800819c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80081a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80081a4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80081a8:	08008d70 	.word	0x08008d70
  ldr r2, =_sbss
 80081ac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80081b0:	20001710 	.word	0x20001710

080081b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80081b4:	e7fe      	b.n	80081b4 <ADC1_2_IRQHandler>

080081b6 <Rte_Call_EnterProtectedSection>:

static inline void Rte_Call_EnterProtectedSection(void);
static inline void Rte_Call_LeaveProtectedSection(void);

static inline void Rte_Call_EnterProtectedSection(void)
{
 80081b6:	b480      	push	{r7}
 80081b8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80081ba:	b672      	cpsid	i
}
 80081bc:	bf00      	nop
	__disable_irq();
}
 80081be:	bf00      	nop
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bc80      	pop	{r7}
 80081c4:	4770      	bx	lr

080081c6 <Rte_Call_LeaveProtectedSection>:

static inline void Rte_Call_LeaveProtectedSection(void)
{
 80081c6:	b480      	push	{r7}
 80081c8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80081ca:	b662      	cpsie	i
}
 80081cc:	bf00      	nop
	__enable_irq();
}
 80081ce:	bf00      	nop
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bc80      	pop	{r7}
 80081d4:	4770      	bx	lr
	...

080081d8 <Rte_Init>:

void Rte_Init(void)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	af00      	add	r7, sp, #0
	Int_ButtonState = (uint8)HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 80081dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80081e0:	4804      	ldr	r0, [pc, #16]	; (80081f4 <Rte_Init+0x1c>)
 80081e2:	f7fa f8f5 	bl	80023d0 <HAL_GPIO_ReadPin>
 80081e6:	4603      	mov	r3, r0
 80081e8:	461a      	mov	r2, r3
 80081ea:	4b03      	ldr	r3, [pc, #12]	; (80081f8 <Rte_Init+0x20>)
 80081ec:	701a      	strb	r2, [r3, #0]
}
 80081ee:	bf00      	nop
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	48000800 	.word	0x48000800
 80081f8:	200016e8 	.word	0x200016e8

080081fc <Rte_Task_StartUp>:

/* Os Tasks*/
/* Init task */
void Rte_Task_StartUp(void)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
	/* EcuM startup two: MCal drivers init, BswM init */
	EcuM_StartUp_Two();
 8008200:	f7ff fdf5 	bl	8007dee <EcuM_StartUp_Two>

	/* Bsw stacks init */

	/* Rte init */
	Rte_Init();
 8008204:	f7ff ffe8 	bl	80081d8 <Rte_Init>
	/* Cdd init */
	Cdd_Servo_Init();
 8008208:	f7f8 fd34 	bl	8000c74 <Cdd_Servo_Init>
	/* Asw init */
	Access_Init();
 800820c:	f7f8 fc2e 	bl	8000a6c <Access_Init>
	Engine_Init();
 8008210:	f7f8 fc5a 	bl	8000ac8 <Engine_Init>
	Brakes_Init();
 8008214:	f7f8 fc3c 	bl	8000a90 <Brakes_Init>
	Steering_Init();
 8008218:	f7f8 fd1a 	bl	8000c50 <Steering_Init>
	Blinker_Init();
 800821c:	f7f8 fcd0 	bl	8000bc0 <Blinker_Init>
	FrontLights_Init();
 8008220:	f7f8 fce0 	bl	8000be4 <FrontLights_Init>
	InteriorLights_Init();
 8008224:	f7f8 fcf0 	bl	8000c08 <InteriorLights_Init>
	RearLights_Init();
 8008228:	f7f8 fd00 	bl	8000c2c <RearLights_Init>
	/* Init function of ASW module used for testing purposes. TODO: remove after tests */
	LED_Init();
 800822c:	f7f8 fca0 	bl	8000b70 <LED_Init>
}
 8008230:	bf00      	nop
 8008232:	bd80      	pop	{r7, pc}

08008234 <Rte_Task_5ms>:

/* Periodic tasks */
void Rte_Task_5ms(void)
{
 8008234:	b480      	push	{r7}
 8008236:	af00      	add	r7, sp, #0

}
 8008238:	bf00      	nop
 800823a:	46bd      	mov	sp, r7
 800823c:	bc80      	pop	{r7}
 800823e:	4770      	bx	lr

08008240 <Rte_Task_10ms>:

void Rte_Task_10ms(void)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
	/* BSW */
	BswM_MainFunction();
 8008244:	f7ff fb70 	bl	8007928 <BswM_MainFunction>
	/* CDD */
	Cdd_Servo_MainFunction();
 8008248:	f7f8 fefe 	bl	8001048 <Cdd_Servo_MainFunction>
	/* ASW */
	Access_MainFunction();
 800824c:	f7f8 fc1a 	bl	8000a84 <Access_MainFunction>
	Engine_MainFunction();
 8008250:	f7f8 fc46 	bl	8000ae0 <Engine_MainFunction>
	Brakes_MainFunction();
 8008254:	f7f8 fc28 	bl	8000aa8 <Brakes_MainFunction>
	Steering_MainFunction();
 8008258:	f7f8 fd06 	bl	8000c68 <Steering_MainFunction>
	/* MainFunction of ASW module used for testing purposes. TODO: remove after tests */
	LED_MainFunction();
 800825c:	f7f8 fc94 	bl	8000b88 <LED_MainFunction>
}
 8008260:	bf00      	nop
 8008262:	bd80      	pop	{r7, pc}

08008264 <Rte_Task_20ms>:

void Rte_Task_20ms(void)
{
 8008264:	b480      	push	{r7}
 8008266:	af00      	add	r7, sp, #0

}
 8008268:	bf00      	nop
 800826a:	46bd      	mov	sp, r7
 800826c:	bc80      	pop	{r7}
 800826e:	4770      	bx	lr

08008270 <Rte_Task_50ms>:

void Rte_Task_50ms(void)
{
 8008270:	b480      	push	{r7}
 8008272:	af00      	add	r7, sp, #0

}
 8008274:	bf00      	nop
 8008276:	46bd      	mov	sp, r7
 8008278:	bc80      	pop	{r7}
 800827a:	4770      	bx	lr

0800827c <Rte_Task_100ms>:

void Rte_Task_100ms(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	af00      	add	r7, sp, #0
	Blinker_MainFunction();
 8008280:	f7f8 fcaa 	bl	8000bd8 <Blinker_MainFunction>
	FrontLights_MainFunction();
 8008284:	f7f8 fcba 	bl	8000bfc <FrontLights_MainFunction>
	InteriorLights_MainFunction();
 8008288:	f7f8 fcca 	bl	8000c20 <InteriorLights_MainFunction>
	RearLights_MainFunction();
 800828c:	f7f8 fcda 	bl	8000c44 <RearLights_MainFunction>
}
 8008290:	bf00      	nop
 8008292:	bd80      	pop	{r7, pc}

08008294 <Rte_Task_500ms>:

void Rte_Task_500ms(void)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	af00      	add	r7, sp, #0
	/* UART test section. TODO: remove */
	sprintf(databuf, "%4d X", count);
 8008298:	4b13      	ldr	r3, [pc, #76]	; (80082e8 <Rte_Task_500ms+0x54>)
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	461a      	mov	r2, r3
 800829e:	4913      	ldr	r1, [pc, #76]	; (80082ec <Rte_Task_500ms+0x58>)
 80082a0:	4813      	ldr	r0, [pc, #76]	; (80082f0 <Rte_Task_500ms+0x5c>)
 80082a2:	f000 f8af 	bl	8008404 <siprintf>
	databuf[strlen(databuf)] = 0;
 80082a6:	4812      	ldr	r0, [pc, #72]	; (80082f0 <Rte_Task_500ms+0x5c>)
 80082a8:	f7f7 ff9a 	bl	80001e0 <strlen>
 80082ac:	4603      	mov	r3, r0
 80082ae:	4a10      	ldr	r2, [pc, #64]	; (80082f0 <Rte_Task_500ms+0x5c>)
 80082b0:	2100      	movs	r1, #0
 80082b2:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(&huart2, (uint8 *)databuf, strlen(databuf), 1000);
 80082b4:	480e      	ldr	r0, [pc, #56]	; (80082f0 <Rte_Task_500ms+0x5c>)
 80082b6:	f7f7 ff93 	bl	80001e0 <strlen>
 80082ba:	4603      	mov	r3, r0
 80082bc:	b29a      	uxth	r2, r3
 80082be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80082c2:	490b      	ldr	r1, [pc, #44]	; (80082f0 <Rte_Task_500ms+0x5c>)
 80082c4:	480b      	ldr	r0, [pc, #44]	; (80082f4 <Rte_Task_500ms+0x60>)
 80082c6:	f7fe fb57 	bl	8006978 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, crlf, 1, 1000);
 80082ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80082ce:	2201      	movs	r2, #1
 80082d0:	4909      	ldr	r1, [pc, #36]	; (80082f8 <Rte_Task_500ms+0x64>)
 80082d2:	4808      	ldr	r0, [pc, #32]	; (80082f4 <Rte_Task_500ms+0x60>)
 80082d4:	f7fe fb50 	bl	8006978 <HAL_UART_Transmit>

	count++;
 80082d8:	4b03      	ldr	r3, [pc, #12]	; (80082e8 <Rte_Task_500ms+0x54>)
 80082da:	881b      	ldrh	r3, [r3, #0]
 80082dc:	3301      	adds	r3, #1
 80082de:	b29a      	uxth	r2, r3
 80082e0:	4b01      	ldr	r3, [pc, #4]	; (80082e8 <Rte_Task_500ms+0x54>)
 80082e2:	801a      	strh	r2, [r3, #0]
}
 80082e4:	bf00      	nop
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	200016fc 	.word	0x200016fc
 80082ec:	08008cf4 	.word	0x08008cf4
 80082f0:	200016ec 	.word	0x200016ec
 80082f4:	2000033c 	.word	0x2000033c
 80082f8:	20000010 	.word	0x20000010

080082fc <Rte_Read_PC13_Pin_State>:
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

/* Read PC13 pin state - button state */
void Rte_Read_PC13_Pin_State(uint8 *state)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
	*state = Int_ButtonState;
 8008304:	4b04      	ldr	r3, [pc, #16]	; (8008318 <Rte_Read_PC13_Pin_State+0x1c>)
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	b2da      	uxtb	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	701a      	strb	r2, [r3, #0]
}
 800830e:	bf00      	nop
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	bc80      	pop	{r7}
 8008316:	4770      	bx	lr
 8008318:	200016e8 	.word	0x200016e8

0800831c <Rte_Write_PC13_Pin_State>:

/* Save PC13 Pin state (called from IRQ) - TODO: change this */
void Rte_Write_PC13_Pin_State(uint8 state)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	4603      	mov	r3, r0
 8008324:	71fb      	strb	r3, [r7, #7]
	Int_ButtonState = state;
 8008326:	4a04      	ldr	r2, [pc, #16]	; (8008338 <Rte_Write_PC13_Pin_State+0x1c>)
 8008328:	79fb      	ldrb	r3, [r7, #7]
 800832a:	7013      	strb	r3, [r2, #0]
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	bc80      	pop	{r7}
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	200016e8 	.word	0x200016e8

0800833c <Rte_Cdd_Servo_RawMove>:

void Rte_Cdd_Servo_RawMove(uint16 pulse)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	80fb      	strh	r3, [r7, #6]
	Cdd_Servo_RawMove(pulse);
 8008346:	88fb      	ldrh	r3, [r7, #6]
 8008348:	4618      	mov	r0, r3
 800834a:	f7f8 fe61 	bl	8001010 <Cdd_Servo_RawMove>
}
 800834e:	bf00      	nop
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
	...

08008358 <Rte_Write_AN0_Voltage_u16>:

void Rte_Write_AN0_Voltage_u16(uint16 voltage)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	4603      	mov	r3, r0
 8008360:	80fb      	strh	r3, [r7, #6]
	Rte_ADC_AN0_Voltage = voltage;
 8008362:	4a04      	ldr	r2, [pc, #16]	; (8008374 <Rte_Write_AN0_Voltage_u16+0x1c>)
 8008364:	88fb      	ldrh	r3, [r7, #6]
 8008366:	8013      	strh	r3, [r2, #0]
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	bc80      	pop	{r7}
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	200016ea 	.word	0x200016ea

08008378 <Rte_Read_AN0_Voltage_u16>:

void Rte_Read_AN0_Voltage_u16(uint16 *voltage)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
	/* Disable interrupts */
	Rte_Call_EnterProtectedSection();
 8008380:	f7ff ff19 	bl	80081b6 <Rte_Call_EnterProtectedSection>
	/* Read ADC value */
	*voltage = Rte_ADC_AN0_Voltage;
 8008384:	4b05      	ldr	r3, [pc, #20]	; (800839c <Rte_Read_AN0_Voltage_u16+0x24>)
 8008386:	881b      	ldrh	r3, [r3, #0]
 8008388:	b29a      	uxth	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	801a      	strh	r2, [r3, #0]
	/* Enable interrupts */
	Rte_Call_LeaveProtectedSection();
 800838e:	f7ff ff1a 	bl	80081c6 <Rte_Call_LeaveProtectedSection>
}
 8008392:	bf00      	nop
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	200016ea 	.word	0x200016ea

080083a0 <__errno>:
 80083a0:	4b01      	ldr	r3, [pc, #4]	; (80083a8 <__errno+0x8>)
 80083a2:	6818      	ldr	r0, [r3, #0]
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	20000014 	.word	0x20000014

080083ac <__libc_init_array>:
 80083ac:	b570      	push	{r4, r5, r6, lr}
 80083ae:	4d0d      	ldr	r5, [pc, #52]	; (80083e4 <__libc_init_array+0x38>)
 80083b0:	4c0d      	ldr	r4, [pc, #52]	; (80083e8 <__libc_init_array+0x3c>)
 80083b2:	1b64      	subs	r4, r4, r5
 80083b4:	10a4      	asrs	r4, r4, #2
 80083b6:	2600      	movs	r6, #0
 80083b8:	42a6      	cmp	r6, r4
 80083ba:	d109      	bne.n	80083d0 <__libc_init_array+0x24>
 80083bc:	4d0b      	ldr	r5, [pc, #44]	; (80083ec <__libc_init_array+0x40>)
 80083be:	4c0c      	ldr	r4, [pc, #48]	; (80083f0 <__libc_init_array+0x44>)
 80083c0:	f000 fc8c 	bl	8008cdc <_init>
 80083c4:	1b64      	subs	r4, r4, r5
 80083c6:	10a4      	asrs	r4, r4, #2
 80083c8:	2600      	movs	r6, #0
 80083ca:	42a6      	cmp	r6, r4
 80083cc:	d105      	bne.n	80083da <__libc_init_array+0x2e>
 80083ce:	bd70      	pop	{r4, r5, r6, pc}
 80083d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083d4:	4798      	blx	r3
 80083d6:	3601      	adds	r6, #1
 80083d8:	e7ee      	b.n	80083b8 <__libc_init_array+0xc>
 80083da:	f855 3b04 	ldr.w	r3, [r5], #4
 80083de:	4798      	blx	r3
 80083e0:	3601      	adds	r6, #1
 80083e2:	e7f2      	b.n	80083ca <__libc_init_array+0x1e>
 80083e4:	08008d68 	.word	0x08008d68
 80083e8:	08008d68 	.word	0x08008d68
 80083ec:	08008d68 	.word	0x08008d68
 80083f0:	08008d6c 	.word	0x08008d6c

080083f4 <memset>:
 80083f4:	4402      	add	r2, r0
 80083f6:	4603      	mov	r3, r0
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d100      	bne.n	80083fe <memset+0xa>
 80083fc:	4770      	bx	lr
 80083fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008402:	e7f9      	b.n	80083f8 <memset+0x4>

08008404 <siprintf>:
 8008404:	b40e      	push	{r1, r2, r3}
 8008406:	b500      	push	{lr}
 8008408:	b09c      	sub	sp, #112	; 0x70
 800840a:	ab1d      	add	r3, sp, #116	; 0x74
 800840c:	9002      	str	r0, [sp, #8]
 800840e:	9006      	str	r0, [sp, #24]
 8008410:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008414:	4809      	ldr	r0, [pc, #36]	; (800843c <siprintf+0x38>)
 8008416:	9107      	str	r1, [sp, #28]
 8008418:	9104      	str	r1, [sp, #16]
 800841a:	4909      	ldr	r1, [pc, #36]	; (8008440 <siprintf+0x3c>)
 800841c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008420:	9105      	str	r1, [sp, #20]
 8008422:	6800      	ldr	r0, [r0, #0]
 8008424:	9301      	str	r3, [sp, #4]
 8008426:	a902      	add	r1, sp, #8
 8008428:	f000 f868 	bl	80084fc <_svfiprintf_r>
 800842c:	9b02      	ldr	r3, [sp, #8]
 800842e:	2200      	movs	r2, #0
 8008430:	701a      	strb	r2, [r3, #0]
 8008432:	b01c      	add	sp, #112	; 0x70
 8008434:	f85d eb04 	ldr.w	lr, [sp], #4
 8008438:	b003      	add	sp, #12
 800843a:	4770      	bx	lr
 800843c:	20000014 	.word	0x20000014
 8008440:	ffff0208 	.word	0xffff0208

08008444 <__ssputs_r>:
 8008444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008448:	688e      	ldr	r6, [r1, #8]
 800844a:	429e      	cmp	r6, r3
 800844c:	4682      	mov	sl, r0
 800844e:	460c      	mov	r4, r1
 8008450:	4690      	mov	r8, r2
 8008452:	461f      	mov	r7, r3
 8008454:	d838      	bhi.n	80084c8 <__ssputs_r+0x84>
 8008456:	898a      	ldrh	r2, [r1, #12]
 8008458:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800845c:	d032      	beq.n	80084c4 <__ssputs_r+0x80>
 800845e:	6825      	ldr	r5, [r4, #0]
 8008460:	6909      	ldr	r1, [r1, #16]
 8008462:	eba5 0901 	sub.w	r9, r5, r1
 8008466:	6965      	ldr	r5, [r4, #20]
 8008468:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800846c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008470:	3301      	adds	r3, #1
 8008472:	444b      	add	r3, r9
 8008474:	106d      	asrs	r5, r5, #1
 8008476:	429d      	cmp	r5, r3
 8008478:	bf38      	it	cc
 800847a:	461d      	movcc	r5, r3
 800847c:	0553      	lsls	r3, r2, #21
 800847e:	d531      	bpl.n	80084e4 <__ssputs_r+0xa0>
 8008480:	4629      	mov	r1, r5
 8008482:	f000 fb61 	bl	8008b48 <_malloc_r>
 8008486:	4606      	mov	r6, r0
 8008488:	b950      	cbnz	r0, 80084a0 <__ssputs_r+0x5c>
 800848a:	230c      	movs	r3, #12
 800848c:	f8ca 3000 	str.w	r3, [sl]
 8008490:	89a3      	ldrh	r3, [r4, #12]
 8008492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008496:	81a3      	strh	r3, [r4, #12]
 8008498:	f04f 30ff 	mov.w	r0, #4294967295
 800849c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a0:	6921      	ldr	r1, [r4, #16]
 80084a2:	464a      	mov	r2, r9
 80084a4:	f000 fabe 	bl	8008a24 <memcpy>
 80084a8:	89a3      	ldrh	r3, [r4, #12]
 80084aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084b2:	81a3      	strh	r3, [r4, #12]
 80084b4:	6126      	str	r6, [r4, #16]
 80084b6:	6165      	str	r5, [r4, #20]
 80084b8:	444e      	add	r6, r9
 80084ba:	eba5 0509 	sub.w	r5, r5, r9
 80084be:	6026      	str	r6, [r4, #0]
 80084c0:	60a5      	str	r5, [r4, #8]
 80084c2:	463e      	mov	r6, r7
 80084c4:	42be      	cmp	r6, r7
 80084c6:	d900      	bls.n	80084ca <__ssputs_r+0x86>
 80084c8:	463e      	mov	r6, r7
 80084ca:	6820      	ldr	r0, [r4, #0]
 80084cc:	4632      	mov	r2, r6
 80084ce:	4641      	mov	r1, r8
 80084d0:	f000 fab6 	bl	8008a40 <memmove>
 80084d4:	68a3      	ldr	r3, [r4, #8]
 80084d6:	1b9b      	subs	r3, r3, r6
 80084d8:	60a3      	str	r3, [r4, #8]
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	4433      	add	r3, r6
 80084de:	6023      	str	r3, [r4, #0]
 80084e0:	2000      	movs	r0, #0
 80084e2:	e7db      	b.n	800849c <__ssputs_r+0x58>
 80084e4:	462a      	mov	r2, r5
 80084e6:	f000 fba3 	bl	8008c30 <_realloc_r>
 80084ea:	4606      	mov	r6, r0
 80084ec:	2800      	cmp	r0, #0
 80084ee:	d1e1      	bne.n	80084b4 <__ssputs_r+0x70>
 80084f0:	6921      	ldr	r1, [r4, #16]
 80084f2:	4650      	mov	r0, sl
 80084f4:	f000 fabe 	bl	8008a74 <_free_r>
 80084f8:	e7c7      	b.n	800848a <__ssputs_r+0x46>
	...

080084fc <_svfiprintf_r>:
 80084fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008500:	4698      	mov	r8, r3
 8008502:	898b      	ldrh	r3, [r1, #12]
 8008504:	061b      	lsls	r3, r3, #24
 8008506:	b09d      	sub	sp, #116	; 0x74
 8008508:	4607      	mov	r7, r0
 800850a:	460d      	mov	r5, r1
 800850c:	4614      	mov	r4, r2
 800850e:	d50e      	bpl.n	800852e <_svfiprintf_r+0x32>
 8008510:	690b      	ldr	r3, [r1, #16]
 8008512:	b963      	cbnz	r3, 800852e <_svfiprintf_r+0x32>
 8008514:	2140      	movs	r1, #64	; 0x40
 8008516:	f000 fb17 	bl	8008b48 <_malloc_r>
 800851a:	6028      	str	r0, [r5, #0]
 800851c:	6128      	str	r0, [r5, #16]
 800851e:	b920      	cbnz	r0, 800852a <_svfiprintf_r+0x2e>
 8008520:	230c      	movs	r3, #12
 8008522:	603b      	str	r3, [r7, #0]
 8008524:	f04f 30ff 	mov.w	r0, #4294967295
 8008528:	e0d1      	b.n	80086ce <_svfiprintf_r+0x1d2>
 800852a:	2340      	movs	r3, #64	; 0x40
 800852c:	616b      	str	r3, [r5, #20]
 800852e:	2300      	movs	r3, #0
 8008530:	9309      	str	r3, [sp, #36]	; 0x24
 8008532:	2320      	movs	r3, #32
 8008534:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008538:	f8cd 800c 	str.w	r8, [sp, #12]
 800853c:	2330      	movs	r3, #48	; 0x30
 800853e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80086e8 <_svfiprintf_r+0x1ec>
 8008542:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008546:	f04f 0901 	mov.w	r9, #1
 800854a:	4623      	mov	r3, r4
 800854c:	469a      	mov	sl, r3
 800854e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008552:	b10a      	cbz	r2, 8008558 <_svfiprintf_r+0x5c>
 8008554:	2a25      	cmp	r2, #37	; 0x25
 8008556:	d1f9      	bne.n	800854c <_svfiprintf_r+0x50>
 8008558:	ebba 0b04 	subs.w	fp, sl, r4
 800855c:	d00b      	beq.n	8008576 <_svfiprintf_r+0x7a>
 800855e:	465b      	mov	r3, fp
 8008560:	4622      	mov	r2, r4
 8008562:	4629      	mov	r1, r5
 8008564:	4638      	mov	r0, r7
 8008566:	f7ff ff6d 	bl	8008444 <__ssputs_r>
 800856a:	3001      	adds	r0, #1
 800856c:	f000 80aa 	beq.w	80086c4 <_svfiprintf_r+0x1c8>
 8008570:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008572:	445a      	add	r2, fp
 8008574:	9209      	str	r2, [sp, #36]	; 0x24
 8008576:	f89a 3000 	ldrb.w	r3, [sl]
 800857a:	2b00      	cmp	r3, #0
 800857c:	f000 80a2 	beq.w	80086c4 <_svfiprintf_r+0x1c8>
 8008580:	2300      	movs	r3, #0
 8008582:	f04f 32ff 	mov.w	r2, #4294967295
 8008586:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800858a:	f10a 0a01 	add.w	sl, sl, #1
 800858e:	9304      	str	r3, [sp, #16]
 8008590:	9307      	str	r3, [sp, #28]
 8008592:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008596:	931a      	str	r3, [sp, #104]	; 0x68
 8008598:	4654      	mov	r4, sl
 800859a:	2205      	movs	r2, #5
 800859c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a0:	4851      	ldr	r0, [pc, #324]	; (80086e8 <_svfiprintf_r+0x1ec>)
 80085a2:	f7f7 fe25 	bl	80001f0 <memchr>
 80085a6:	9a04      	ldr	r2, [sp, #16]
 80085a8:	b9d8      	cbnz	r0, 80085e2 <_svfiprintf_r+0xe6>
 80085aa:	06d0      	lsls	r0, r2, #27
 80085ac:	bf44      	itt	mi
 80085ae:	2320      	movmi	r3, #32
 80085b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085b4:	0711      	lsls	r1, r2, #28
 80085b6:	bf44      	itt	mi
 80085b8:	232b      	movmi	r3, #43	; 0x2b
 80085ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085be:	f89a 3000 	ldrb.w	r3, [sl]
 80085c2:	2b2a      	cmp	r3, #42	; 0x2a
 80085c4:	d015      	beq.n	80085f2 <_svfiprintf_r+0xf6>
 80085c6:	9a07      	ldr	r2, [sp, #28]
 80085c8:	4654      	mov	r4, sl
 80085ca:	2000      	movs	r0, #0
 80085cc:	f04f 0c0a 	mov.w	ip, #10
 80085d0:	4621      	mov	r1, r4
 80085d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085d6:	3b30      	subs	r3, #48	; 0x30
 80085d8:	2b09      	cmp	r3, #9
 80085da:	d94e      	bls.n	800867a <_svfiprintf_r+0x17e>
 80085dc:	b1b0      	cbz	r0, 800860c <_svfiprintf_r+0x110>
 80085de:	9207      	str	r2, [sp, #28]
 80085e0:	e014      	b.n	800860c <_svfiprintf_r+0x110>
 80085e2:	eba0 0308 	sub.w	r3, r0, r8
 80085e6:	fa09 f303 	lsl.w	r3, r9, r3
 80085ea:	4313      	orrs	r3, r2
 80085ec:	9304      	str	r3, [sp, #16]
 80085ee:	46a2      	mov	sl, r4
 80085f0:	e7d2      	b.n	8008598 <_svfiprintf_r+0x9c>
 80085f2:	9b03      	ldr	r3, [sp, #12]
 80085f4:	1d19      	adds	r1, r3, #4
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	9103      	str	r1, [sp, #12]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	bfbb      	ittet	lt
 80085fe:	425b      	neglt	r3, r3
 8008600:	f042 0202 	orrlt.w	r2, r2, #2
 8008604:	9307      	strge	r3, [sp, #28]
 8008606:	9307      	strlt	r3, [sp, #28]
 8008608:	bfb8      	it	lt
 800860a:	9204      	strlt	r2, [sp, #16]
 800860c:	7823      	ldrb	r3, [r4, #0]
 800860e:	2b2e      	cmp	r3, #46	; 0x2e
 8008610:	d10c      	bne.n	800862c <_svfiprintf_r+0x130>
 8008612:	7863      	ldrb	r3, [r4, #1]
 8008614:	2b2a      	cmp	r3, #42	; 0x2a
 8008616:	d135      	bne.n	8008684 <_svfiprintf_r+0x188>
 8008618:	9b03      	ldr	r3, [sp, #12]
 800861a:	1d1a      	adds	r2, r3, #4
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	9203      	str	r2, [sp, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	bfb8      	it	lt
 8008624:	f04f 33ff 	movlt.w	r3, #4294967295
 8008628:	3402      	adds	r4, #2
 800862a:	9305      	str	r3, [sp, #20]
 800862c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80086ec <_svfiprintf_r+0x1f0>
 8008630:	7821      	ldrb	r1, [r4, #0]
 8008632:	2203      	movs	r2, #3
 8008634:	4650      	mov	r0, sl
 8008636:	f7f7 fddb 	bl	80001f0 <memchr>
 800863a:	b140      	cbz	r0, 800864e <_svfiprintf_r+0x152>
 800863c:	2340      	movs	r3, #64	; 0x40
 800863e:	eba0 000a 	sub.w	r0, r0, sl
 8008642:	fa03 f000 	lsl.w	r0, r3, r0
 8008646:	9b04      	ldr	r3, [sp, #16]
 8008648:	4303      	orrs	r3, r0
 800864a:	3401      	adds	r4, #1
 800864c:	9304      	str	r3, [sp, #16]
 800864e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008652:	4827      	ldr	r0, [pc, #156]	; (80086f0 <_svfiprintf_r+0x1f4>)
 8008654:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008658:	2206      	movs	r2, #6
 800865a:	f7f7 fdc9 	bl	80001f0 <memchr>
 800865e:	2800      	cmp	r0, #0
 8008660:	d038      	beq.n	80086d4 <_svfiprintf_r+0x1d8>
 8008662:	4b24      	ldr	r3, [pc, #144]	; (80086f4 <_svfiprintf_r+0x1f8>)
 8008664:	bb1b      	cbnz	r3, 80086ae <_svfiprintf_r+0x1b2>
 8008666:	9b03      	ldr	r3, [sp, #12]
 8008668:	3307      	adds	r3, #7
 800866a:	f023 0307 	bic.w	r3, r3, #7
 800866e:	3308      	adds	r3, #8
 8008670:	9303      	str	r3, [sp, #12]
 8008672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008674:	4433      	add	r3, r6
 8008676:	9309      	str	r3, [sp, #36]	; 0x24
 8008678:	e767      	b.n	800854a <_svfiprintf_r+0x4e>
 800867a:	fb0c 3202 	mla	r2, ip, r2, r3
 800867e:	460c      	mov	r4, r1
 8008680:	2001      	movs	r0, #1
 8008682:	e7a5      	b.n	80085d0 <_svfiprintf_r+0xd4>
 8008684:	2300      	movs	r3, #0
 8008686:	3401      	adds	r4, #1
 8008688:	9305      	str	r3, [sp, #20]
 800868a:	4619      	mov	r1, r3
 800868c:	f04f 0c0a 	mov.w	ip, #10
 8008690:	4620      	mov	r0, r4
 8008692:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008696:	3a30      	subs	r2, #48	; 0x30
 8008698:	2a09      	cmp	r2, #9
 800869a:	d903      	bls.n	80086a4 <_svfiprintf_r+0x1a8>
 800869c:	2b00      	cmp	r3, #0
 800869e:	d0c5      	beq.n	800862c <_svfiprintf_r+0x130>
 80086a0:	9105      	str	r1, [sp, #20]
 80086a2:	e7c3      	b.n	800862c <_svfiprintf_r+0x130>
 80086a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80086a8:	4604      	mov	r4, r0
 80086aa:	2301      	movs	r3, #1
 80086ac:	e7f0      	b.n	8008690 <_svfiprintf_r+0x194>
 80086ae:	ab03      	add	r3, sp, #12
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	462a      	mov	r2, r5
 80086b4:	4b10      	ldr	r3, [pc, #64]	; (80086f8 <_svfiprintf_r+0x1fc>)
 80086b6:	a904      	add	r1, sp, #16
 80086b8:	4638      	mov	r0, r7
 80086ba:	f3af 8000 	nop.w
 80086be:	1c42      	adds	r2, r0, #1
 80086c0:	4606      	mov	r6, r0
 80086c2:	d1d6      	bne.n	8008672 <_svfiprintf_r+0x176>
 80086c4:	89ab      	ldrh	r3, [r5, #12]
 80086c6:	065b      	lsls	r3, r3, #25
 80086c8:	f53f af2c 	bmi.w	8008524 <_svfiprintf_r+0x28>
 80086cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086ce:	b01d      	add	sp, #116	; 0x74
 80086d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d4:	ab03      	add	r3, sp, #12
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	462a      	mov	r2, r5
 80086da:	4b07      	ldr	r3, [pc, #28]	; (80086f8 <_svfiprintf_r+0x1fc>)
 80086dc:	a904      	add	r1, sp, #16
 80086de:	4638      	mov	r0, r7
 80086e0:	f000 f87a 	bl	80087d8 <_printf_i>
 80086e4:	e7eb      	b.n	80086be <_svfiprintf_r+0x1c2>
 80086e6:	bf00      	nop
 80086e8:	08008d34 	.word	0x08008d34
 80086ec:	08008d3a 	.word	0x08008d3a
 80086f0:	08008d3e 	.word	0x08008d3e
 80086f4:	00000000 	.word	0x00000000
 80086f8:	08008445 	.word	0x08008445

080086fc <_printf_common>:
 80086fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008700:	4616      	mov	r6, r2
 8008702:	4699      	mov	r9, r3
 8008704:	688a      	ldr	r2, [r1, #8]
 8008706:	690b      	ldr	r3, [r1, #16]
 8008708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800870c:	4293      	cmp	r3, r2
 800870e:	bfb8      	it	lt
 8008710:	4613      	movlt	r3, r2
 8008712:	6033      	str	r3, [r6, #0]
 8008714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008718:	4607      	mov	r7, r0
 800871a:	460c      	mov	r4, r1
 800871c:	b10a      	cbz	r2, 8008722 <_printf_common+0x26>
 800871e:	3301      	adds	r3, #1
 8008720:	6033      	str	r3, [r6, #0]
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	0699      	lsls	r1, r3, #26
 8008726:	bf42      	ittt	mi
 8008728:	6833      	ldrmi	r3, [r6, #0]
 800872a:	3302      	addmi	r3, #2
 800872c:	6033      	strmi	r3, [r6, #0]
 800872e:	6825      	ldr	r5, [r4, #0]
 8008730:	f015 0506 	ands.w	r5, r5, #6
 8008734:	d106      	bne.n	8008744 <_printf_common+0x48>
 8008736:	f104 0a19 	add.w	sl, r4, #25
 800873a:	68e3      	ldr	r3, [r4, #12]
 800873c:	6832      	ldr	r2, [r6, #0]
 800873e:	1a9b      	subs	r3, r3, r2
 8008740:	42ab      	cmp	r3, r5
 8008742:	dc26      	bgt.n	8008792 <_printf_common+0x96>
 8008744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008748:	1e13      	subs	r3, r2, #0
 800874a:	6822      	ldr	r2, [r4, #0]
 800874c:	bf18      	it	ne
 800874e:	2301      	movne	r3, #1
 8008750:	0692      	lsls	r2, r2, #26
 8008752:	d42b      	bmi.n	80087ac <_printf_common+0xb0>
 8008754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008758:	4649      	mov	r1, r9
 800875a:	4638      	mov	r0, r7
 800875c:	47c0      	blx	r8
 800875e:	3001      	adds	r0, #1
 8008760:	d01e      	beq.n	80087a0 <_printf_common+0xa4>
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	68e5      	ldr	r5, [r4, #12]
 8008766:	6832      	ldr	r2, [r6, #0]
 8008768:	f003 0306 	and.w	r3, r3, #6
 800876c:	2b04      	cmp	r3, #4
 800876e:	bf08      	it	eq
 8008770:	1aad      	subeq	r5, r5, r2
 8008772:	68a3      	ldr	r3, [r4, #8]
 8008774:	6922      	ldr	r2, [r4, #16]
 8008776:	bf0c      	ite	eq
 8008778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800877c:	2500      	movne	r5, #0
 800877e:	4293      	cmp	r3, r2
 8008780:	bfc4      	itt	gt
 8008782:	1a9b      	subgt	r3, r3, r2
 8008784:	18ed      	addgt	r5, r5, r3
 8008786:	2600      	movs	r6, #0
 8008788:	341a      	adds	r4, #26
 800878a:	42b5      	cmp	r5, r6
 800878c:	d11a      	bne.n	80087c4 <_printf_common+0xc8>
 800878e:	2000      	movs	r0, #0
 8008790:	e008      	b.n	80087a4 <_printf_common+0xa8>
 8008792:	2301      	movs	r3, #1
 8008794:	4652      	mov	r2, sl
 8008796:	4649      	mov	r1, r9
 8008798:	4638      	mov	r0, r7
 800879a:	47c0      	blx	r8
 800879c:	3001      	adds	r0, #1
 800879e:	d103      	bne.n	80087a8 <_printf_common+0xac>
 80087a0:	f04f 30ff 	mov.w	r0, #4294967295
 80087a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a8:	3501      	adds	r5, #1
 80087aa:	e7c6      	b.n	800873a <_printf_common+0x3e>
 80087ac:	18e1      	adds	r1, r4, r3
 80087ae:	1c5a      	adds	r2, r3, #1
 80087b0:	2030      	movs	r0, #48	; 0x30
 80087b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087b6:	4422      	add	r2, r4
 80087b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087c0:	3302      	adds	r3, #2
 80087c2:	e7c7      	b.n	8008754 <_printf_common+0x58>
 80087c4:	2301      	movs	r3, #1
 80087c6:	4622      	mov	r2, r4
 80087c8:	4649      	mov	r1, r9
 80087ca:	4638      	mov	r0, r7
 80087cc:	47c0      	blx	r8
 80087ce:	3001      	adds	r0, #1
 80087d0:	d0e6      	beq.n	80087a0 <_printf_common+0xa4>
 80087d2:	3601      	adds	r6, #1
 80087d4:	e7d9      	b.n	800878a <_printf_common+0x8e>
	...

080087d8 <_printf_i>:
 80087d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087dc:	7e0f      	ldrb	r7, [r1, #24]
 80087de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087e0:	2f78      	cmp	r7, #120	; 0x78
 80087e2:	4691      	mov	r9, r2
 80087e4:	4680      	mov	r8, r0
 80087e6:	460c      	mov	r4, r1
 80087e8:	469a      	mov	sl, r3
 80087ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087ee:	d807      	bhi.n	8008800 <_printf_i+0x28>
 80087f0:	2f62      	cmp	r7, #98	; 0x62
 80087f2:	d80a      	bhi.n	800880a <_printf_i+0x32>
 80087f4:	2f00      	cmp	r7, #0
 80087f6:	f000 80d8 	beq.w	80089aa <_printf_i+0x1d2>
 80087fa:	2f58      	cmp	r7, #88	; 0x58
 80087fc:	f000 80a3 	beq.w	8008946 <_printf_i+0x16e>
 8008800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008808:	e03a      	b.n	8008880 <_printf_i+0xa8>
 800880a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800880e:	2b15      	cmp	r3, #21
 8008810:	d8f6      	bhi.n	8008800 <_printf_i+0x28>
 8008812:	a101      	add	r1, pc, #4	; (adr r1, 8008818 <_printf_i+0x40>)
 8008814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008818:	08008871 	.word	0x08008871
 800881c:	08008885 	.word	0x08008885
 8008820:	08008801 	.word	0x08008801
 8008824:	08008801 	.word	0x08008801
 8008828:	08008801 	.word	0x08008801
 800882c:	08008801 	.word	0x08008801
 8008830:	08008885 	.word	0x08008885
 8008834:	08008801 	.word	0x08008801
 8008838:	08008801 	.word	0x08008801
 800883c:	08008801 	.word	0x08008801
 8008840:	08008801 	.word	0x08008801
 8008844:	08008991 	.word	0x08008991
 8008848:	080088b5 	.word	0x080088b5
 800884c:	08008973 	.word	0x08008973
 8008850:	08008801 	.word	0x08008801
 8008854:	08008801 	.word	0x08008801
 8008858:	080089b3 	.word	0x080089b3
 800885c:	08008801 	.word	0x08008801
 8008860:	080088b5 	.word	0x080088b5
 8008864:	08008801 	.word	0x08008801
 8008868:	08008801 	.word	0x08008801
 800886c:	0800897b 	.word	0x0800897b
 8008870:	682b      	ldr	r3, [r5, #0]
 8008872:	1d1a      	adds	r2, r3, #4
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	602a      	str	r2, [r5, #0]
 8008878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800887c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008880:	2301      	movs	r3, #1
 8008882:	e0a3      	b.n	80089cc <_printf_i+0x1f4>
 8008884:	6820      	ldr	r0, [r4, #0]
 8008886:	6829      	ldr	r1, [r5, #0]
 8008888:	0606      	lsls	r6, r0, #24
 800888a:	f101 0304 	add.w	r3, r1, #4
 800888e:	d50a      	bpl.n	80088a6 <_printf_i+0xce>
 8008890:	680e      	ldr	r6, [r1, #0]
 8008892:	602b      	str	r3, [r5, #0]
 8008894:	2e00      	cmp	r6, #0
 8008896:	da03      	bge.n	80088a0 <_printf_i+0xc8>
 8008898:	232d      	movs	r3, #45	; 0x2d
 800889a:	4276      	negs	r6, r6
 800889c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088a0:	485e      	ldr	r0, [pc, #376]	; (8008a1c <_printf_i+0x244>)
 80088a2:	230a      	movs	r3, #10
 80088a4:	e019      	b.n	80088da <_printf_i+0x102>
 80088a6:	680e      	ldr	r6, [r1, #0]
 80088a8:	602b      	str	r3, [r5, #0]
 80088aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088ae:	bf18      	it	ne
 80088b0:	b236      	sxthne	r6, r6
 80088b2:	e7ef      	b.n	8008894 <_printf_i+0xbc>
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	6820      	ldr	r0, [r4, #0]
 80088b8:	1d19      	adds	r1, r3, #4
 80088ba:	6029      	str	r1, [r5, #0]
 80088bc:	0601      	lsls	r1, r0, #24
 80088be:	d501      	bpl.n	80088c4 <_printf_i+0xec>
 80088c0:	681e      	ldr	r6, [r3, #0]
 80088c2:	e002      	b.n	80088ca <_printf_i+0xf2>
 80088c4:	0646      	lsls	r6, r0, #25
 80088c6:	d5fb      	bpl.n	80088c0 <_printf_i+0xe8>
 80088c8:	881e      	ldrh	r6, [r3, #0]
 80088ca:	4854      	ldr	r0, [pc, #336]	; (8008a1c <_printf_i+0x244>)
 80088cc:	2f6f      	cmp	r7, #111	; 0x6f
 80088ce:	bf0c      	ite	eq
 80088d0:	2308      	moveq	r3, #8
 80088d2:	230a      	movne	r3, #10
 80088d4:	2100      	movs	r1, #0
 80088d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088da:	6865      	ldr	r5, [r4, #4]
 80088dc:	60a5      	str	r5, [r4, #8]
 80088de:	2d00      	cmp	r5, #0
 80088e0:	bfa2      	ittt	ge
 80088e2:	6821      	ldrge	r1, [r4, #0]
 80088e4:	f021 0104 	bicge.w	r1, r1, #4
 80088e8:	6021      	strge	r1, [r4, #0]
 80088ea:	b90e      	cbnz	r6, 80088f0 <_printf_i+0x118>
 80088ec:	2d00      	cmp	r5, #0
 80088ee:	d04d      	beq.n	800898c <_printf_i+0x1b4>
 80088f0:	4615      	mov	r5, r2
 80088f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80088f6:	fb03 6711 	mls	r7, r3, r1, r6
 80088fa:	5dc7      	ldrb	r7, [r0, r7]
 80088fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008900:	4637      	mov	r7, r6
 8008902:	42bb      	cmp	r3, r7
 8008904:	460e      	mov	r6, r1
 8008906:	d9f4      	bls.n	80088f2 <_printf_i+0x11a>
 8008908:	2b08      	cmp	r3, #8
 800890a:	d10b      	bne.n	8008924 <_printf_i+0x14c>
 800890c:	6823      	ldr	r3, [r4, #0]
 800890e:	07de      	lsls	r6, r3, #31
 8008910:	d508      	bpl.n	8008924 <_printf_i+0x14c>
 8008912:	6923      	ldr	r3, [r4, #16]
 8008914:	6861      	ldr	r1, [r4, #4]
 8008916:	4299      	cmp	r1, r3
 8008918:	bfde      	ittt	le
 800891a:	2330      	movle	r3, #48	; 0x30
 800891c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008920:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008924:	1b52      	subs	r2, r2, r5
 8008926:	6122      	str	r2, [r4, #16]
 8008928:	f8cd a000 	str.w	sl, [sp]
 800892c:	464b      	mov	r3, r9
 800892e:	aa03      	add	r2, sp, #12
 8008930:	4621      	mov	r1, r4
 8008932:	4640      	mov	r0, r8
 8008934:	f7ff fee2 	bl	80086fc <_printf_common>
 8008938:	3001      	adds	r0, #1
 800893a:	d14c      	bne.n	80089d6 <_printf_i+0x1fe>
 800893c:	f04f 30ff 	mov.w	r0, #4294967295
 8008940:	b004      	add	sp, #16
 8008942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008946:	4835      	ldr	r0, [pc, #212]	; (8008a1c <_printf_i+0x244>)
 8008948:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800894c:	6829      	ldr	r1, [r5, #0]
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	f851 6b04 	ldr.w	r6, [r1], #4
 8008954:	6029      	str	r1, [r5, #0]
 8008956:	061d      	lsls	r5, r3, #24
 8008958:	d514      	bpl.n	8008984 <_printf_i+0x1ac>
 800895a:	07df      	lsls	r7, r3, #31
 800895c:	bf44      	itt	mi
 800895e:	f043 0320 	orrmi.w	r3, r3, #32
 8008962:	6023      	strmi	r3, [r4, #0]
 8008964:	b91e      	cbnz	r6, 800896e <_printf_i+0x196>
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	f023 0320 	bic.w	r3, r3, #32
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	2310      	movs	r3, #16
 8008970:	e7b0      	b.n	80088d4 <_printf_i+0xfc>
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	f043 0320 	orr.w	r3, r3, #32
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	2378      	movs	r3, #120	; 0x78
 800897c:	4828      	ldr	r0, [pc, #160]	; (8008a20 <_printf_i+0x248>)
 800897e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008982:	e7e3      	b.n	800894c <_printf_i+0x174>
 8008984:	0659      	lsls	r1, r3, #25
 8008986:	bf48      	it	mi
 8008988:	b2b6      	uxthmi	r6, r6
 800898a:	e7e6      	b.n	800895a <_printf_i+0x182>
 800898c:	4615      	mov	r5, r2
 800898e:	e7bb      	b.n	8008908 <_printf_i+0x130>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	6826      	ldr	r6, [r4, #0]
 8008994:	6961      	ldr	r1, [r4, #20]
 8008996:	1d18      	adds	r0, r3, #4
 8008998:	6028      	str	r0, [r5, #0]
 800899a:	0635      	lsls	r5, r6, #24
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	d501      	bpl.n	80089a4 <_printf_i+0x1cc>
 80089a0:	6019      	str	r1, [r3, #0]
 80089a2:	e002      	b.n	80089aa <_printf_i+0x1d2>
 80089a4:	0670      	lsls	r0, r6, #25
 80089a6:	d5fb      	bpl.n	80089a0 <_printf_i+0x1c8>
 80089a8:	8019      	strh	r1, [r3, #0]
 80089aa:	2300      	movs	r3, #0
 80089ac:	6123      	str	r3, [r4, #16]
 80089ae:	4615      	mov	r5, r2
 80089b0:	e7ba      	b.n	8008928 <_printf_i+0x150>
 80089b2:	682b      	ldr	r3, [r5, #0]
 80089b4:	1d1a      	adds	r2, r3, #4
 80089b6:	602a      	str	r2, [r5, #0]
 80089b8:	681d      	ldr	r5, [r3, #0]
 80089ba:	6862      	ldr	r2, [r4, #4]
 80089bc:	2100      	movs	r1, #0
 80089be:	4628      	mov	r0, r5
 80089c0:	f7f7 fc16 	bl	80001f0 <memchr>
 80089c4:	b108      	cbz	r0, 80089ca <_printf_i+0x1f2>
 80089c6:	1b40      	subs	r0, r0, r5
 80089c8:	6060      	str	r0, [r4, #4]
 80089ca:	6863      	ldr	r3, [r4, #4]
 80089cc:	6123      	str	r3, [r4, #16]
 80089ce:	2300      	movs	r3, #0
 80089d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089d4:	e7a8      	b.n	8008928 <_printf_i+0x150>
 80089d6:	6923      	ldr	r3, [r4, #16]
 80089d8:	462a      	mov	r2, r5
 80089da:	4649      	mov	r1, r9
 80089dc:	4640      	mov	r0, r8
 80089de:	47d0      	blx	sl
 80089e0:	3001      	adds	r0, #1
 80089e2:	d0ab      	beq.n	800893c <_printf_i+0x164>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	079b      	lsls	r3, r3, #30
 80089e8:	d413      	bmi.n	8008a12 <_printf_i+0x23a>
 80089ea:	68e0      	ldr	r0, [r4, #12]
 80089ec:	9b03      	ldr	r3, [sp, #12]
 80089ee:	4298      	cmp	r0, r3
 80089f0:	bfb8      	it	lt
 80089f2:	4618      	movlt	r0, r3
 80089f4:	e7a4      	b.n	8008940 <_printf_i+0x168>
 80089f6:	2301      	movs	r3, #1
 80089f8:	4632      	mov	r2, r6
 80089fa:	4649      	mov	r1, r9
 80089fc:	4640      	mov	r0, r8
 80089fe:	47d0      	blx	sl
 8008a00:	3001      	adds	r0, #1
 8008a02:	d09b      	beq.n	800893c <_printf_i+0x164>
 8008a04:	3501      	adds	r5, #1
 8008a06:	68e3      	ldr	r3, [r4, #12]
 8008a08:	9903      	ldr	r1, [sp, #12]
 8008a0a:	1a5b      	subs	r3, r3, r1
 8008a0c:	42ab      	cmp	r3, r5
 8008a0e:	dcf2      	bgt.n	80089f6 <_printf_i+0x21e>
 8008a10:	e7eb      	b.n	80089ea <_printf_i+0x212>
 8008a12:	2500      	movs	r5, #0
 8008a14:	f104 0619 	add.w	r6, r4, #25
 8008a18:	e7f5      	b.n	8008a06 <_printf_i+0x22e>
 8008a1a:	bf00      	nop
 8008a1c:	08008d45 	.word	0x08008d45
 8008a20:	08008d56 	.word	0x08008d56

08008a24 <memcpy>:
 8008a24:	440a      	add	r2, r1
 8008a26:	4291      	cmp	r1, r2
 8008a28:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a2c:	d100      	bne.n	8008a30 <memcpy+0xc>
 8008a2e:	4770      	bx	lr
 8008a30:	b510      	push	{r4, lr}
 8008a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a3a:	4291      	cmp	r1, r2
 8008a3c:	d1f9      	bne.n	8008a32 <memcpy+0xe>
 8008a3e:	bd10      	pop	{r4, pc}

08008a40 <memmove>:
 8008a40:	4288      	cmp	r0, r1
 8008a42:	b510      	push	{r4, lr}
 8008a44:	eb01 0402 	add.w	r4, r1, r2
 8008a48:	d902      	bls.n	8008a50 <memmove+0x10>
 8008a4a:	4284      	cmp	r4, r0
 8008a4c:	4623      	mov	r3, r4
 8008a4e:	d807      	bhi.n	8008a60 <memmove+0x20>
 8008a50:	1e43      	subs	r3, r0, #1
 8008a52:	42a1      	cmp	r1, r4
 8008a54:	d008      	beq.n	8008a68 <memmove+0x28>
 8008a56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a5e:	e7f8      	b.n	8008a52 <memmove+0x12>
 8008a60:	4402      	add	r2, r0
 8008a62:	4601      	mov	r1, r0
 8008a64:	428a      	cmp	r2, r1
 8008a66:	d100      	bne.n	8008a6a <memmove+0x2a>
 8008a68:	bd10      	pop	{r4, pc}
 8008a6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a72:	e7f7      	b.n	8008a64 <memmove+0x24>

08008a74 <_free_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4605      	mov	r5, r0
 8008a78:	2900      	cmp	r1, #0
 8008a7a:	d041      	beq.n	8008b00 <_free_r+0x8c>
 8008a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a80:	1f0c      	subs	r4, r1, #4
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	bfb8      	it	lt
 8008a86:	18e4      	addlt	r4, r4, r3
 8008a88:	f000 f912 	bl	8008cb0 <__malloc_lock>
 8008a8c:	4a1d      	ldr	r2, [pc, #116]	; (8008b04 <_free_r+0x90>)
 8008a8e:	6813      	ldr	r3, [r2, #0]
 8008a90:	b933      	cbnz	r3, 8008aa0 <_free_r+0x2c>
 8008a92:	6063      	str	r3, [r4, #4]
 8008a94:	6014      	str	r4, [r2, #0]
 8008a96:	4628      	mov	r0, r5
 8008a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a9c:	f000 b90e 	b.w	8008cbc <__malloc_unlock>
 8008aa0:	42a3      	cmp	r3, r4
 8008aa2:	d908      	bls.n	8008ab6 <_free_r+0x42>
 8008aa4:	6820      	ldr	r0, [r4, #0]
 8008aa6:	1821      	adds	r1, r4, r0
 8008aa8:	428b      	cmp	r3, r1
 8008aaa:	bf01      	itttt	eq
 8008aac:	6819      	ldreq	r1, [r3, #0]
 8008aae:	685b      	ldreq	r3, [r3, #4]
 8008ab0:	1809      	addeq	r1, r1, r0
 8008ab2:	6021      	streq	r1, [r4, #0]
 8008ab4:	e7ed      	b.n	8008a92 <_free_r+0x1e>
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	b10b      	cbz	r3, 8008ac0 <_free_r+0x4c>
 8008abc:	42a3      	cmp	r3, r4
 8008abe:	d9fa      	bls.n	8008ab6 <_free_r+0x42>
 8008ac0:	6811      	ldr	r1, [r2, #0]
 8008ac2:	1850      	adds	r0, r2, r1
 8008ac4:	42a0      	cmp	r0, r4
 8008ac6:	d10b      	bne.n	8008ae0 <_free_r+0x6c>
 8008ac8:	6820      	ldr	r0, [r4, #0]
 8008aca:	4401      	add	r1, r0
 8008acc:	1850      	adds	r0, r2, r1
 8008ace:	4283      	cmp	r3, r0
 8008ad0:	6011      	str	r1, [r2, #0]
 8008ad2:	d1e0      	bne.n	8008a96 <_free_r+0x22>
 8008ad4:	6818      	ldr	r0, [r3, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	6053      	str	r3, [r2, #4]
 8008ada:	4401      	add	r1, r0
 8008adc:	6011      	str	r1, [r2, #0]
 8008ade:	e7da      	b.n	8008a96 <_free_r+0x22>
 8008ae0:	d902      	bls.n	8008ae8 <_free_r+0x74>
 8008ae2:	230c      	movs	r3, #12
 8008ae4:	602b      	str	r3, [r5, #0]
 8008ae6:	e7d6      	b.n	8008a96 <_free_r+0x22>
 8008ae8:	6820      	ldr	r0, [r4, #0]
 8008aea:	1821      	adds	r1, r4, r0
 8008aec:	428b      	cmp	r3, r1
 8008aee:	bf04      	itt	eq
 8008af0:	6819      	ldreq	r1, [r3, #0]
 8008af2:	685b      	ldreq	r3, [r3, #4]
 8008af4:	6063      	str	r3, [r4, #4]
 8008af6:	bf04      	itt	eq
 8008af8:	1809      	addeq	r1, r1, r0
 8008afa:	6021      	streq	r1, [r4, #0]
 8008afc:	6054      	str	r4, [r2, #4]
 8008afe:	e7ca      	b.n	8008a96 <_free_r+0x22>
 8008b00:	bd38      	pop	{r3, r4, r5, pc}
 8008b02:	bf00      	nop
 8008b04:	20001700 	.word	0x20001700

08008b08 <sbrk_aligned>:
 8008b08:	b570      	push	{r4, r5, r6, lr}
 8008b0a:	4e0e      	ldr	r6, [pc, #56]	; (8008b44 <sbrk_aligned+0x3c>)
 8008b0c:	460c      	mov	r4, r1
 8008b0e:	6831      	ldr	r1, [r6, #0]
 8008b10:	4605      	mov	r5, r0
 8008b12:	b911      	cbnz	r1, 8008b1a <sbrk_aligned+0x12>
 8008b14:	f000 f8bc 	bl	8008c90 <_sbrk_r>
 8008b18:	6030      	str	r0, [r6, #0]
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	f000 f8b7 	bl	8008c90 <_sbrk_r>
 8008b22:	1c43      	adds	r3, r0, #1
 8008b24:	d00a      	beq.n	8008b3c <sbrk_aligned+0x34>
 8008b26:	1cc4      	adds	r4, r0, #3
 8008b28:	f024 0403 	bic.w	r4, r4, #3
 8008b2c:	42a0      	cmp	r0, r4
 8008b2e:	d007      	beq.n	8008b40 <sbrk_aligned+0x38>
 8008b30:	1a21      	subs	r1, r4, r0
 8008b32:	4628      	mov	r0, r5
 8008b34:	f000 f8ac 	bl	8008c90 <_sbrk_r>
 8008b38:	3001      	adds	r0, #1
 8008b3a:	d101      	bne.n	8008b40 <sbrk_aligned+0x38>
 8008b3c:	f04f 34ff 	mov.w	r4, #4294967295
 8008b40:	4620      	mov	r0, r4
 8008b42:	bd70      	pop	{r4, r5, r6, pc}
 8008b44:	20001704 	.word	0x20001704

08008b48 <_malloc_r>:
 8008b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4c:	1ccd      	adds	r5, r1, #3
 8008b4e:	f025 0503 	bic.w	r5, r5, #3
 8008b52:	3508      	adds	r5, #8
 8008b54:	2d0c      	cmp	r5, #12
 8008b56:	bf38      	it	cc
 8008b58:	250c      	movcc	r5, #12
 8008b5a:	2d00      	cmp	r5, #0
 8008b5c:	4607      	mov	r7, r0
 8008b5e:	db01      	blt.n	8008b64 <_malloc_r+0x1c>
 8008b60:	42a9      	cmp	r1, r5
 8008b62:	d905      	bls.n	8008b70 <_malloc_r+0x28>
 8008b64:	230c      	movs	r3, #12
 8008b66:	603b      	str	r3, [r7, #0]
 8008b68:	2600      	movs	r6, #0
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b70:	4e2e      	ldr	r6, [pc, #184]	; (8008c2c <_malloc_r+0xe4>)
 8008b72:	f000 f89d 	bl	8008cb0 <__malloc_lock>
 8008b76:	6833      	ldr	r3, [r6, #0]
 8008b78:	461c      	mov	r4, r3
 8008b7a:	bb34      	cbnz	r4, 8008bca <_malloc_r+0x82>
 8008b7c:	4629      	mov	r1, r5
 8008b7e:	4638      	mov	r0, r7
 8008b80:	f7ff ffc2 	bl	8008b08 <sbrk_aligned>
 8008b84:	1c43      	adds	r3, r0, #1
 8008b86:	4604      	mov	r4, r0
 8008b88:	d14d      	bne.n	8008c26 <_malloc_r+0xde>
 8008b8a:	6834      	ldr	r4, [r6, #0]
 8008b8c:	4626      	mov	r6, r4
 8008b8e:	2e00      	cmp	r6, #0
 8008b90:	d140      	bne.n	8008c14 <_malloc_r+0xcc>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	4631      	mov	r1, r6
 8008b96:	4638      	mov	r0, r7
 8008b98:	eb04 0803 	add.w	r8, r4, r3
 8008b9c:	f000 f878 	bl	8008c90 <_sbrk_r>
 8008ba0:	4580      	cmp	r8, r0
 8008ba2:	d13a      	bne.n	8008c1a <_malloc_r+0xd2>
 8008ba4:	6821      	ldr	r1, [r4, #0]
 8008ba6:	3503      	adds	r5, #3
 8008ba8:	1a6d      	subs	r5, r5, r1
 8008baa:	f025 0503 	bic.w	r5, r5, #3
 8008bae:	3508      	adds	r5, #8
 8008bb0:	2d0c      	cmp	r5, #12
 8008bb2:	bf38      	it	cc
 8008bb4:	250c      	movcc	r5, #12
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	4638      	mov	r0, r7
 8008bba:	f7ff ffa5 	bl	8008b08 <sbrk_aligned>
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	d02b      	beq.n	8008c1a <_malloc_r+0xd2>
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	442b      	add	r3, r5
 8008bc6:	6023      	str	r3, [r4, #0]
 8008bc8:	e00e      	b.n	8008be8 <_malloc_r+0xa0>
 8008bca:	6822      	ldr	r2, [r4, #0]
 8008bcc:	1b52      	subs	r2, r2, r5
 8008bce:	d41e      	bmi.n	8008c0e <_malloc_r+0xc6>
 8008bd0:	2a0b      	cmp	r2, #11
 8008bd2:	d916      	bls.n	8008c02 <_malloc_r+0xba>
 8008bd4:	1961      	adds	r1, r4, r5
 8008bd6:	42a3      	cmp	r3, r4
 8008bd8:	6025      	str	r5, [r4, #0]
 8008bda:	bf18      	it	ne
 8008bdc:	6059      	strne	r1, [r3, #4]
 8008bde:	6863      	ldr	r3, [r4, #4]
 8008be0:	bf08      	it	eq
 8008be2:	6031      	streq	r1, [r6, #0]
 8008be4:	5162      	str	r2, [r4, r5]
 8008be6:	604b      	str	r3, [r1, #4]
 8008be8:	4638      	mov	r0, r7
 8008bea:	f104 060b 	add.w	r6, r4, #11
 8008bee:	f000 f865 	bl	8008cbc <__malloc_unlock>
 8008bf2:	f026 0607 	bic.w	r6, r6, #7
 8008bf6:	1d23      	adds	r3, r4, #4
 8008bf8:	1af2      	subs	r2, r6, r3
 8008bfa:	d0b6      	beq.n	8008b6a <_malloc_r+0x22>
 8008bfc:	1b9b      	subs	r3, r3, r6
 8008bfe:	50a3      	str	r3, [r4, r2]
 8008c00:	e7b3      	b.n	8008b6a <_malloc_r+0x22>
 8008c02:	6862      	ldr	r2, [r4, #4]
 8008c04:	42a3      	cmp	r3, r4
 8008c06:	bf0c      	ite	eq
 8008c08:	6032      	streq	r2, [r6, #0]
 8008c0a:	605a      	strne	r2, [r3, #4]
 8008c0c:	e7ec      	b.n	8008be8 <_malloc_r+0xa0>
 8008c0e:	4623      	mov	r3, r4
 8008c10:	6864      	ldr	r4, [r4, #4]
 8008c12:	e7b2      	b.n	8008b7a <_malloc_r+0x32>
 8008c14:	4634      	mov	r4, r6
 8008c16:	6876      	ldr	r6, [r6, #4]
 8008c18:	e7b9      	b.n	8008b8e <_malloc_r+0x46>
 8008c1a:	230c      	movs	r3, #12
 8008c1c:	603b      	str	r3, [r7, #0]
 8008c1e:	4638      	mov	r0, r7
 8008c20:	f000 f84c 	bl	8008cbc <__malloc_unlock>
 8008c24:	e7a1      	b.n	8008b6a <_malloc_r+0x22>
 8008c26:	6025      	str	r5, [r4, #0]
 8008c28:	e7de      	b.n	8008be8 <_malloc_r+0xa0>
 8008c2a:	bf00      	nop
 8008c2c:	20001700 	.word	0x20001700

08008c30 <_realloc_r>:
 8008c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c34:	4680      	mov	r8, r0
 8008c36:	4614      	mov	r4, r2
 8008c38:	460e      	mov	r6, r1
 8008c3a:	b921      	cbnz	r1, 8008c46 <_realloc_r+0x16>
 8008c3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c40:	4611      	mov	r1, r2
 8008c42:	f7ff bf81 	b.w	8008b48 <_malloc_r>
 8008c46:	b92a      	cbnz	r2, 8008c54 <_realloc_r+0x24>
 8008c48:	f7ff ff14 	bl	8008a74 <_free_r>
 8008c4c:	4625      	mov	r5, r4
 8008c4e:	4628      	mov	r0, r5
 8008c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c54:	f000 f838 	bl	8008cc8 <_malloc_usable_size_r>
 8008c58:	4284      	cmp	r4, r0
 8008c5a:	4607      	mov	r7, r0
 8008c5c:	d802      	bhi.n	8008c64 <_realloc_r+0x34>
 8008c5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c62:	d812      	bhi.n	8008c8a <_realloc_r+0x5a>
 8008c64:	4621      	mov	r1, r4
 8008c66:	4640      	mov	r0, r8
 8008c68:	f7ff ff6e 	bl	8008b48 <_malloc_r>
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	d0ed      	beq.n	8008c4e <_realloc_r+0x1e>
 8008c72:	42bc      	cmp	r4, r7
 8008c74:	4622      	mov	r2, r4
 8008c76:	4631      	mov	r1, r6
 8008c78:	bf28      	it	cs
 8008c7a:	463a      	movcs	r2, r7
 8008c7c:	f7ff fed2 	bl	8008a24 <memcpy>
 8008c80:	4631      	mov	r1, r6
 8008c82:	4640      	mov	r0, r8
 8008c84:	f7ff fef6 	bl	8008a74 <_free_r>
 8008c88:	e7e1      	b.n	8008c4e <_realloc_r+0x1e>
 8008c8a:	4635      	mov	r5, r6
 8008c8c:	e7df      	b.n	8008c4e <_realloc_r+0x1e>
	...

08008c90 <_sbrk_r>:
 8008c90:	b538      	push	{r3, r4, r5, lr}
 8008c92:	4d06      	ldr	r5, [pc, #24]	; (8008cac <_sbrk_r+0x1c>)
 8008c94:	2300      	movs	r3, #0
 8008c96:	4604      	mov	r4, r0
 8008c98:	4608      	mov	r0, r1
 8008c9a:	602b      	str	r3, [r5, #0]
 8008c9c:	f7fd fba8 	bl	80063f0 <_sbrk>
 8008ca0:	1c43      	adds	r3, r0, #1
 8008ca2:	d102      	bne.n	8008caa <_sbrk_r+0x1a>
 8008ca4:	682b      	ldr	r3, [r5, #0]
 8008ca6:	b103      	cbz	r3, 8008caa <_sbrk_r+0x1a>
 8008ca8:	6023      	str	r3, [r4, #0]
 8008caa:	bd38      	pop	{r3, r4, r5, pc}
 8008cac:	20001708 	.word	0x20001708

08008cb0 <__malloc_lock>:
 8008cb0:	4801      	ldr	r0, [pc, #4]	; (8008cb8 <__malloc_lock+0x8>)
 8008cb2:	f000 b811 	b.w	8008cd8 <__retarget_lock_acquire_recursive>
 8008cb6:	bf00      	nop
 8008cb8:	2000170c 	.word	0x2000170c

08008cbc <__malloc_unlock>:
 8008cbc:	4801      	ldr	r0, [pc, #4]	; (8008cc4 <__malloc_unlock+0x8>)
 8008cbe:	f000 b80c 	b.w	8008cda <__retarget_lock_release_recursive>
 8008cc2:	bf00      	nop
 8008cc4:	2000170c 	.word	0x2000170c

08008cc8 <_malloc_usable_size_r>:
 8008cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ccc:	1f18      	subs	r0, r3, #4
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	bfbc      	itt	lt
 8008cd2:	580b      	ldrlt	r3, [r1, r0]
 8008cd4:	18c0      	addlt	r0, r0, r3
 8008cd6:	4770      	bx	lr

08008cd8 <__retarget_lock_acquire_recursive>:
 8008cd8:	4770      	bx	lr

08008cda <__retarget_lock_release_recursive>:
 8008cda:	4770      	bx	lr

08008cdc <_init>:
 8008cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cde:	bf00      	nop
 8008ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ce2:	bc08      	pop	{r3}
 8008ce4:	469e      	mov	lr, r3
 8008ce6:	4770      	bx	lr

08008ce8 <_fini>:
 8008ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cea:	bf00      	nop
 8008cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cee:	bc08      	pop	{r3}
 8008cf0:	469e      	mov	lr, r3
 8008cf2:	4770      	bx	lr
