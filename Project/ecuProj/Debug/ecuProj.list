
ecuProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006084  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006218  08006218  00016218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006250  08006250  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006250  08006250  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006250  08006250  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006250  08006250  00016250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006254  08006254  00016254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000002f0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002fc  200002fc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019021  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a6e  00000000  00000000  0003905d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  0003bad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001368  00000000  00000000  0003cf40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ab6  00000000  00000000  0003e2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019e92  00000000  00000000  0005fd5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2e64  00000000  00000000  00079bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ca54  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000581c  00000000  00000000  0014caa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006200 	.word	0x08006200

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08006200 	.word	0x08006200

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fd1a 	bl	8000c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f824 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 fa2a 	bl	8000638 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001e4:	f000 f88a 	bl	80002fc <MX_ADC1_Init>
  MX_I2C1_Init();
 80001e8:	f000 f8f8 	bl	80003dc <MX_I2C1_Init>
  MX_SPI3_Init();
 80001ec:	f000 f936 	bl	800045c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80001f0:	f000 f9c2 	bl	8000578 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001f4:	f000 f9f0 	bl	80005d8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80001f8:	f000 f96e 	bl	80004d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <main+0x4c>)
 80001fe:	f004 fbf3 	bl	80049e8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(500);
 8000202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000206:	f000 fd69 	bl	8000cdc <HAL_Delay>
	  if(0u != led_toggle)
 800020a:	4b06      	ldr	r3, [pc, #24]	; (8000224 <main+0x50>)
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d0f7      	beq.n	8000202 <main+0x2e>
	  {
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000212:	2120      	movs	r1, #32
 8000214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000218:	f002 fa86 	bl	8002728 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800021c:	e7f1      	b.n	8000202 <main+0x2e>
 800021e:	bf00      	nop
 8000220:	2000019c 	.word	0x2000019c
 8000224:	200002f0 	.word	0x200002f0

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b0a6      	sub	sp, #152	; 0x98
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f005 ffda 	bl	80061f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2258      	movs	r2, #88	; 0x58
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f005 ffcc 	bl	80061f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000258:	2302      	movs	r3, #2
 800025a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025c:	2301      	movs	r3, #1
 800025e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000260:	2310      	movs	r3, #16
 8000262:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000266:	2302      	movs	r3, #2
 8000268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800026c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000270:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000274:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000278:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000286:	4618      	mov	r0, r3
 8000288:	f002 fc66 	bl	8002b58 <HAL_RCC_OscConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000292:	f000 fa61 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	230f      	movs	r3, #15
 8000298:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029a:	2302      	movs	r3, #2
 800029c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002b0:	2102      	movs	r1, #2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f003 fca4 	bl	8003c00 <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002be:	f000 fa4b 	bl	8000758 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <SystemClock_Config+0xd0>)
 80002c4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80002d4:	2310      	movs	r3, #16
 80002d6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80002d8:	2300      	movs	r3, #0
 80002da:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f003 fec4 	bl	800406c <HAL_RCCEx_PeriphCLKConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80002ea:	f000 fa35 	bl	8000758 <Error_Handler>
  }
}
 80002ee:	bf00      	nop
 80002f0:	3798      	adds	r7, #152	; 0x98
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	002000a3 	.word	0x002000a3

080002fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b08a      	sub	sp, #40	; 0x28
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000302:	f107 031c 	add.w	r3, r7, #28
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	611a      	str	r2, [r3, #16]
 800031c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800031e:	4b2e      	ldr	r3, [pc, #184]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000320:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000324:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000326:	4b2c      	ldr	r3, [pc, #176]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000328:	2200      	movs	r2, #0
 800032a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800032c:	4b2a      	ldr	r3, [pc, #168]	; (80003d8 <MX_ADC1_Init+0xdc>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000338:	4b27      	ldr	r3, [pc, #156]	; (80003d8 <MX_ADC1_Init+0xdc>)
 800033a:	2200      	movs	r2, #0
 800033c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000340:	2200      	movs	r2, #0
 8000342:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000346:	4b24      	ldr	r3, [pc, #144]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000348:	2200      	movs	r2, #0
 800034a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800034c:	4b22      	ldr	r3, [pc, #136]	; (80003d8 <MX_ADC1_Init+0xdc>)
 800034e:	2201      	movs	r2, #1
 8000350:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000352:	4b21      	ldr	r3, [pc, #132]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000354:	2200      	movs	r2, #0
 8000356:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000358:	4b1f      	ldr	r3, [pc, #124]	; (80003d8 <MX_ADC1_Init+0xdc>)
 800035a:	2201      	movs	r2, #1
 800035c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800035e:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000360:	2200      	movs	r2, #0
 8000362:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000366:	4b1c      	ldr	r3, [pc, #112]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000368:	2204      	movs	r2, #4
 800036a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800036c:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <MX_ADC1_Init+0xdc>)
 800036e:	2200      	movs	r2, #0
 8000370:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000372:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000378:	4817      	ldr	r0, [pc, #92]	; (80003d8 <MX_ADC1_Init+0xdc>)
 800037a:	f000 fcfb 	bl	8000d74 <HAL_ADC_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000384:	f000 f9e8 	bl	8000758 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000388:	2300      	movs	r3, #0
 800038a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800038c:	f107 031c 	add.w	r3, r7, #28
 8000390:	4619      	mov	r1, r3
 8000392:	4811      	ldr	r0, [pc, #68]	; (80003d8 <MX_ADC1_Init+0xdc>)
 8000394:	f001 fd46 	bl	8001e24 <HAL_ADCEx_MultiModeConfigChannel>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800039e:	f000 f9db 	bl	8000758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80003a2:	2306      	movs	r3, #6
 80003a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003a6:	2301      	movs	r3, #1
 80003a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003aa:	2300      	movs	r3, #0
 80003ac:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003b2:	2300      	movs	r3, #0
 80003b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	4619      	mov	r1, r3
 80003be:	4806      	ldr	r0, [pc, #24]	; (80003d8 <MX_ADC1_Init+0xdc>)
 80003c0:	f001 fa40 	bl	8001844 <HAL_ADC_ConfigChannel>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80003ca:	f000 f9c5 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ce:	bf00      	nop
 80003d0:	3728      	adds	r7, #40	; 0x28
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	20000028 	.word	0x20000028

080003dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003e0:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <MX_I2C1_Init+0x74>)
 80003e2:	4a1c      	ldr	r2, [pc, #112]	; (8000454 <MX_I2C1_Init+0x78>)
 80003e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702681;
 80003e6:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <MX_I2C1_Init+0x74>)
 80003e8:	4a1b      	ldr	r2, [pc, #108]	; (8000458 <MX_I2C1_Init+0x7c>)
 80003ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003ec:	4b18      	ldr	r3, [pc, #96]	; (8000450 <MX_I2C1_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003f2:	4b17      	ldr	r3, [pc, #92]	; (8000450 <MX_I2C1_Init+0x74>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f8:	4b15      	ldr	r3, [pc, #84]	; (8000450 <MX_I2C1_Init+0x74>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003fe:	4b14      	ldr	r3, [pc, #80]	; (8000450 <MX_I2C1_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000404:	4b12      	ldr	r3, [pc, #72]	; (8000450 <MX_I2C1_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <MX_I2C1_Init+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <MX_I2C1_Init+0x74>)
 8000412:	2200      	movs	r2, #0
 8000414:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000416:	480e      	ldr	r0, [pc, #56]	; (8000450 <MX_I2C1_Init+0x74>)
 8000418:	f002 f9b8 	bl	800278c <HAL_I2C_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000422:	f000 f999 	bl	8000758 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000426:	2100      	movs	r1, #0
 8000428:	4809      	ldr	r0, [pc, #36]	; (8000450 <MX_I2C1_Init+0x74>)
 800042a:	f002 fafd 	bl	8002a28 <HAL_I2CEx_ConfigAnalogFilter>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000434:	f000 f990 	bl	8000758 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000438:	2100      	movs	r1, #0
 800043a:	4805      	ldr	r0, [pc, #20]	; (8000450 <MX_I2C1_Init+0x74>)
 800043c:	f002 fb3f 	bl	8002abe <HAL_I2CEx_ConfigDigitalFilter>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000446:	f000 f987 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	20000094 	.word	0x20000094
 8000454:	40005400 	.word	0x40005400
 8000458:	00702681 	.word	0x00702681

0800045c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <MX_SPI3_Init+0x74>)
 8000462:	4a1c      	ldr	r2, [pc, #112]	; (80004d4 <MX_SPI3_Init+0x78>)
 8000464:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000466:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <MX_SPI3_Init+0x74>)
 8000468:	f44f 7282 	mov.w	r2, #260	; 0x104
 800046c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <MX_SPI3_Init+0x74>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000474:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <MX_SPI3_Init+0x74>)
 8000476:	f44f 7240 	mov.w	r2, #768	; 0x300
 800047a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800047c:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <MX_SPI3_Init+0x74>)
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000482:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <MX_SPI3_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MX_SPI3_Init+0x74>)
 800048a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800048e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_SPI3_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_SPI3_Init+0x74>)
 8000498:	2200      	movs	r2, #0
 800049a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_SPI3_Init+0x74>)
 800049e:	2200      	movs	r2, #0
 80004a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <MX_SPI3_Init+0x74>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_SPI3_Init+0x74>)
 80004aa:	2207      	movs	r2, #7
 80004ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <MX_SPI3_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_SPI3_Init+0x74>)
 80004b6:	2208      	movs	r2, #8
 80004b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_SPI3_Init+0x74>)
 80004bc:	f003 fff4 	bl	80044a8 <HAL_SPI_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80004c6:	f000 f947 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000110 	.word	0x20000110
 80004d4:	40003c00 	.word	0x40003c00

080004d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004f6:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <MX_TIM3_Init+0x98>)
 80004f8:	4a1e      	ldr	r2, [pc, #120]	; (8000574 <MX_TIM3_Init+0x9c>)
 80004fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 80004fc:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <MX_TIM3_Init+0x98>)
 80004fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8000502:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000504:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <MX_TIM3_Init+0x98>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 800050a:	4b19      	ldr	r3, [pc, #100]	; (8000570 <MX_TIM3_Init+0x98>)
 800050c:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000510:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <MX_TIM3_Init+0x98>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_TIM3_Init+0x98>)
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800051e:	4814      	ldr	r0, [pc, #80]	; (8000570 <MX_TIM3_Init+0x98>)
 8000520:	f004 fa0a 	bl	8004938 <HAL_TIM_Base_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800052a:	f000 f915 	bl	8000758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800052e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000532:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000534:	f107 0310 	add.w	r3, r7, #16
 8000538:	4619      	mov	r1, r3
 800053a:	480d      	ldr	r0, [pc, #52]	; (8000570 <MX_TIM3_Init+0x98>)
 800053c:	f004 fbe3 	bl	8004d06 <HAL_TIM_ConfigClockSource>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000546:	f000 f907 	bl	8000758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054a:	2300      	movs	r3, #0
 800054c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	4619      	mov	r1, r3
 8000556:	4806      	ldr	r0, [pc, #24]	; (8000570 <MX_TIM3_Init+0x98>)
 8000558:	f004 fdfe 	bl	8005158 <HAL_TIMEx_MasterConfigSynchronization>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000562:	f000 f8f9 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	3720      	adds	r7, #32
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	2000019c 	.word	0x2000019c
 8000574:	40000400 	.word	0x40000400

08000578 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <MX_USART1_UART_Init+0x58>)
 800057e:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <MX_USART1_UART_Init+0x5c>)
 8000580:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000582:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <MX_USART1_UART_Init+0x58>)
 8000584:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000588:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <MX_USART1_UART_Init+0x58>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <MX_USART1_UART_Init+0x58>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <MX_USART1_UART_Init+0x58>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_USART1_UART_Init+0x58>)
 800059e:	220c      	movs	r2, #12
 80005a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <MX_USART1_UART_Init+0x58>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_USART1_UART_Init+0x58>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <MX_USART1_UART_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_USART1_UART_Init+0x58>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_USART1_UART_Init+0x58>)
 80005bc:	f004 fe76 	bl	80052ac <HAL_UART_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005c6:	f000 f8c7 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200001e8 	.word	0x200001e8
 80005d4:	40013800 	.word	0x40013800

080005d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_USART2_UART_Init+0x58>)
 80005de:	4a15      	ldr	r2, [pc, #84]	; (8000634 <MX_USART2_UART_Init+0x5c>)
 80005e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005e2:	4b13      	ldr	r3, [pc, #76]	; (8000630 <MX_USART2_UART_Init+0x58>)
 80005e4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80005e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_USART2_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_USART2_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_USART2_UART_Init+0x58>)
 80005fe:	220c      	movs	r2, #12
 8000600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_USART2_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_USART2_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_USART2_UART_Init+0x58>)
 800061c:	f004 fe46 	bl	80052ac <HAL_UART_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000626:	f000 f897 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	2000026c 	.word	0x2000026c
 8000634:	40004400 	.word	0x40004400

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <MX_GPIO_Init+0xbc>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a28      	ldr	r2, [pc, #160]	; (80006f4 <MX_GPIO_Init+0xbc>)
 8000654:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <MX_GPIO_Init+0xbc>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <MX_GPIO_Init+0xbc>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a22      	ldr	r2, [pc, #136]	; (80006f4 <MX_GPIO_Init+0xbc>)
 800066c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <MX_GPIO_Init+0xbc>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <MX_GPIO_Init+0xbc>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	4a1c      	ldr	r2, [pc, #112]	; (80006f4 <MX_GPIO_Init+0xbc>)
 8000684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000688:	6153      	str	r3, [r2, #20]
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_GPIO_Init+0xbc>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2120      	movs	r1, #32
 800069a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069e:	f002 f82b 	bl	80026f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80006a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	4619      	mov	r1, r3
 80006b8:	480f      	ldr	r0, [pc, #60]	; (80006f8 <MX_GPIO_Init+0xc0>)
 80006ba:	f001 fe93 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006be:	2320      	movs	r3, #32
 80006c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	4619      	mov	r1, r3
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d8:	f001 fe84 	bl	80023e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2100      	movs	r1, #0
 80006e0:	2028      	movs	r0, #40	; 0x28
 80006e2:	f001 fdd2 	bl	800228a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006e6:	2028      	movs	r0, #40	; 0x28
 80006e8:	f001 fdeb 	bl	80022c2 <HAL_NVIC_EnableIRQ>

}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000
 80006f8:	48000800 	.word	0x48000800

080006fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin)
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800070c:	d10a      	bne.n	8000724 <HAL_GPIO_EXTI_Callback+0x28>
	{
		if(led_toggle == 0u)
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <HAL_GPIO_EXTI_Callback+0x34>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d103      	bne.n	800071e <HAL_GPIO_EXTI_Callback+0x22>
		{
			led_toggle = 1u;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_GPIO_EXTI_Callback+0x34>)
 8000718:	2201      	movs	r2, #1
 800071a:	701a      	strb	r2, [r3, #0]
		else
		{
			led_toggle = 0u;
		}
	}
}
 800071c:	e002      	b.n	8000724 <HAL_GPIO_EXTI_Callback+0x28>
			led_toggle = 0u;
 800071e:	4b04      	ldr	r3, [pc, #16]	; (8000730 <HAL_GPIO_EXTI_Callback+0x34>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	200002f0 	.word	0x200002f0

08000734 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	tim3_count++;
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	3301      	adds	r3, #1
 8000742:	4a04      	ldr	r2, [pc, #16]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000744:	6013      	str	r3, [r2, #0]
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	200002f4 	.word	0x200002f4

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	e7fe      	b.n	8000760 <Error_Handler+0x8>
	...

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <HAL_MspInit+0x44>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	4a0e      	ldr	r2, [pc, #56]	; (80007a8 <HAL_MspInit+0x44>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6193      	str	r3, [r2, #24]
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <HAL_MspInit+0x44>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <HAL_MspInit+0x44>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <HAL_MspInit+0x44>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_MspInit+0x44>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007cc:	d12b      	bne.n	8000826 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <HAL_ADC_MspInit+0x84>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4a17      	ldr	r2, [pc, #92]	; (8000830 <HAL_ADC_MspInit+0x84>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d8:	6153      	str	r3, [r2, #20]
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <HAL_ADC_MspInit+0x84>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_ADC_MspInit+0x84>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a11      	ldr	r2, [pc, #68]	; (8000830 <HAL_ADC_MspInit+0x84>)
 80007ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007f0:	6153      	str	r3, [r2, #20]
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_ADC_MspInit+0x84>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007fe:	2301      	movs	r3, #1
 8000800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000802:	2303      	movs	r3, #3
 8000804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4808      	ldr	r0, [pc, #32]	; (8000834 <HAL_ADC_MspInit+0x88>)
 8000812:	f001 fde7 	bl	80023e4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	2012      	movs	r0, #18
 800081c:	f001 fd35 	bl	800228a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000820:	2012      	movs	r0, #18
 8000822:	f001 fd4e 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000826:	bf00      	nop
 8000828:	3728      	adds	r7, #40	; 0x28
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000
 8000834:	48000800 	.word	0x48000800

08000838 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <HAL_I2C_MspInit+0x8c>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d130      	bne.n	80008bc <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <HAL_I2C_MspInit+0x90>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	4a1a      	ldr	r2, [pc, #104]	; (80008c8 <HAL_I2C_MspInit+0x90>)
 8000860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000864:	6153      	str	r3, [r2, #20]
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <HAL_I2C_MspInit+0x90>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000872:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000878:	2312      	movs	r3, #18
 800087a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000884:	2304      	movs	r3, #4
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	480f      	ldr	r0, [pc, #60]	; (80008cc <HAL_I2C_MspInit+0x94>)
 8000890:	f001 fda8 	bl	80023e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <HAL_I2C_MspInit+0x90>)
 8000896:	69db      	ldr	r3, [r3, #28]
 8000898:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <HAL_I2C_MspInit+0x90>)
 800089a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800089e:	61d3      	str	r3, [r2, #28]
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <HAL_I2C_MspInit+0x90>)
 80008a2:	69db      	ldr	r3, [r3, #28]
 80008a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2100      	movs	r1, #0
 80008b0:	201f      	movs	r0, #31
 80008b2:	f001 fcea 	bl	800228a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008b6:	201f      	movs	r0, #31
 80008b8:	f001 fd03 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40005400 	.word	0x40005400
 80008c8:	40021000 	.word	0x40021000
 80008cc:	48000400 	.word	0x48000400

080008d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a1b      	ldr	r2, [pc, #108]	; (800095c <HAL_SPI_MspInit+0x8c>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d130      	bne.n	8000954 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80008f2:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <HAL_SPI_MspInit+0x90>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	4a1a      	ldr	r2, [pc, #104]	; (8000960 <HAL_SPI_MspInit+0x90>)
 80008f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008fc:	61d3      	str	r3, [r2, #28]
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <HAL_SPI_MspInit+0x90>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <HAL_SPI_MspInit+0x90>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	4a14      	ldr	r2, [pc, #80]	; (8000960 <HAL_SPI_MspInit+0x90>)
 8000910:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000914:	6153      	str	r3, [r2, #20]
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_SPI_MspInit+0x90>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000922:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000934:	2306      	movs	r3, #6
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	4809      	ldr	r0, [pc, #36]	; (8000964 <HAL_SPI_MspInit+0x94>)
 8000940:	f001 fd50 	bl	80023e4 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	2033      	movs	r0, #51	; 0x33
 800094a:	f001 fc9e 	bl	800228a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800094e:	2033      	movs	r0, #51	; 0x33
 8000950:	f001 fcb7 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000954:	bf00      	nop
 8000956:	3728      	adds	r7, #40	; 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40003c00 	.word	0x40003c00
 8000960:	40021000 	.word	0x40021000
 8000964:	48000800 	.word	0x48000800

08000968 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <HAL_TIM_Base_MspInit+0x44>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d113      	bne.n	80009a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_TIM_Base_MspInit+0x48>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	4a0c      	ldr	r2, [pc, #48]	; (80009b0 <HAL_TIM_Base_MspInit+0x48>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	61d3      	str	r3, [r2, #28]
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <HAL_TIM_Base_MspInit+0x48>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	201d      	movs	r0, #29
 8000998:	f001 fc77 	bl	800228a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800099c:	201d      	movs	r0, #29
 800099e:	f001 fc90 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40000400 	.word	0x40000400
 80009b0:	40021000 	.word	0x40021000

080009b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08c      	sub	sp, #48	; 0x30
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a36      	ldr	r2, [pc, #216]	; (8000aac <HAL_UART_MspInit+0xf8>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d130      	bne.n	8000a38 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009d6:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <HAL_UART_MspInit+0xfc>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	4a35      	ldr	r2, [pc, #212]	; (8000ab0 <HAL_UART_MspInit+0xfc>)
 80009dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e0:	6193      	str	r3, [r2, #24]
 80009e2:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <HAL_UART_MspInit+0xfc>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ea:	61bb      	str	r3, [r7, #24]
 80009ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <HAL_UART_MspInit+0xfc>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	4a2f      	ldr	r2, [pc, #188]	; (8000ab0 <HAL_UART_MspInit+0xfc>)
 80009f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009f8:	6153      	str	r3, [r2, #20]
 80009fa:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <HAL_UART_MspInit+0xfc>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a06:	2330      	movs	r3, #48	; 0x30
 8000a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a16:	2307      	movs	r3, #7
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4824      	ldr	r0, [pc, #144]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 8000a22:	f001 fcdf 	bl	80023e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2025      	movs	r0, #37	; 0x25
 8000a2c:	f001 fc2d 	bl	800228a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a30:	2025      	movs	r0, #37	; 0x25
 8000a32:	f001 fc46 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a36:	e035      	b.n	8000aa4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a1e      	ldr	r2, [pc, #120]	; (8000ab8 <HAL_UART_MspInit+0x104>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d130      	bne.n	8000aa4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <HAL_UART_MspInit+0xfc>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	4a1a      	ldr	r2, [pc, #104]	; (8000ab0 <HAL_UART_MspInit+0xfc>)
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	61d3      	str	r3, [r2, #28]
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <HAL_UART_MspInit+0xfc>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <HAL_UART_MspInit+0xfc>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <HAL_UART_MspInit+0xfc>)
 8000a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a64:	6153      	str	r3, [r2, #20]
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_UART_MspInit+0xfc>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a72:	230c      	movs	r3, #12
 8000a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a82:	2307      	movs	r3, #7
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a90:	f001 fca8 	bl	80023e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	2026      	movs	r0, #38	; 0x26
 8000a9a:	f001 fbf6 	bl	800228a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a9e:	2026      	movs	r0, #38	; 0x26
 8000aa0:	f001 fc0f 	bl	80022c2 <HAL_NVIC_EnableIRQ>
}
 8000aa4:	bf00      	nop
 8000aa6:	3730      	adds	r7, #48	; 0x30
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40013800 	.word	0x40013800
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48000800 	.word	0x48000800
 8000ab8:	40004400 	.word	0x40004400

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <MemManage_Handler+0x4>

08000ace <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b08:	f000 f8c8 	bl	8000c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <ADC1_2_IRQHandler+0x10>)
 8000b16:	f000 fb59 	bl	80011cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000028 	.word	0x20000028

08000b24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <TIM3_IRQHandler+0x10>)
 8000b2a:	f003 ffcd 	bl	8004ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	2000019c 	.word	0x2000019c

08000b38 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <I2C1_EV_IRQHandler+0x10>)
 8000b3e:	f001 fef1 	bl	8002924 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000094 	.word	0x20000094

08000b4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <USART1_IRQHandler+0x10>)
 8000b52:	f004 fbf9 	bl	8005348 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200001e8 	.word	0x200001e8

08000b60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <USART2_IRQHandler+0x10>)
 8000b66:	f004 fbef 	bl	8005348 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2000026c 	.word	0x2000026c

08000b74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000b78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b7c:	f001 fdee 	bl	800275c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <SPI3_IRQHandler+0x10>)
 8000b8a:	f003 fd6f 	bl	800466c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000110 	.word	0x20000110

08000b98 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bc2:	490e      	ldr	r1, [pc, #56]	; (8000bfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <LoopForever+0xe>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd8:	4c0b      	ldr	r4, [pc, #44]	; (8000c08 <LoopForever+0x16>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000be6:	f7ff ffd7 	bl	8000b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f005 fadd 	bl	80061a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bee:	f7ff faf1 	bl	80001d4 <main>

08000bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf2:	e7fe      	b.n	8000bf2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bf4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c00:	08006258 	.word	0x08006258
  ldr r2, =_sbss
 8000c04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c08:	200002fc 	.word	0x200002fc

08000c0c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC3_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_Init+0x28>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_Init+0x28>)
 8000c1a:	f043 0310 	orr.w	r3, r3, #16
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f001 fb27 	bl	8002274 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c26:	200f      	movs	r0, #15
 8000c28:	f000 f808 	bl	8000c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c2c:	f7ff fd9a 	bl	8000764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40022000 	.word	0x40022000

08000c3c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x54>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_InitTick+0x58>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fb3f 	bl	80022de <HAL_SYSTICK_Config>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00e      	b.n	8000c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b0f      	cmp	r3, #15
 8000c6e:	d80a      	bhi.n	8000c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f001 fb07 	bl	800228a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c7c:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <HAL_InitTick+0x5c>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	e000      	b.n	8000c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000004 	.word	0x20000004

08000c9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x20>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x24>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <HAL_IncTick+0x24>)
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	200002f8 	.word	0x200002f8

08000cc4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <HAL_GetTick+0x14>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	200002f8 	.word	0x200002f8

08000cdc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce4:	f7ff ffee 	bl	8000cc4 <HAL_GetTick>
 8000ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf4:	d005      	beq.n	8000d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_Delay+0x44>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4413      	add	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d02:	bf00      	nop
 8000d04:	f7ff ffde 	bl	8000cc4 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d8f7      	bhi.n	8000d04 <HAL_Delay+0x28>
  {
  }
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008

08000d24 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b0a2      	sub	sp, #136	; 0x88
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __IO uint32_t wait_loop_index = 0U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e210      	b.n	80011b8 <HAL_ADC_Init+0x444>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	f003 0310 	and.w	r3, r3, #16
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f040 808e 	bne.w	8000ec6 <HAL_ADC_Init+0x152>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d169      	bne.n	8000e86 <HAL_ADC_Init+0x112>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a92      	ldr	r2, [pc, #584]	; (8001018 <HAL_ADC_Init+0x2a4>)
 8000dd0:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a91      	ldr	r2, [pc, #580]	; (800101c <HAL_ADC_Init+0x2a8>)
 8000dd6:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a91      	ldr	r2, [pc, #580]	; (8001020 <HAL_ADC_Init+0x2ac>)
 8000ddc:	659a      	str	r2, [r3, #88]	; 0x58
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a90      	ldr	r2, [pc, #576]	; (8001024 <HAL_ADC_Init+0x2b0>)
 8000de2:	65da      	str	r2, [r3, #92]	; 0x5c
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a90      	ldr	r2, [pc, #576]	; (8001028 <HAL_ADC_Init+0x2b4>)
 8000de8:	661a      	str	r2, [r3, #96]	; 0x60
    
    if (hadc->MspInitCallback == NULL)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <HAL_ADC_Init+0x84>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a8d      	ldr	r2, [pc, #564]	; (800102c <HAL_ADC_Init+0x2b8>)
 8000df6:	665a      	str	r2, [r3, #100]	; 0x64
    }
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d13b      	bne.n	8000e86 <HAL_ADC_Init+0x112>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f001 f8fa 	bl	8002008 <ADC_Disable>
 8000e14:	4603      	mov	r3, r0
 8000e16:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f003 0310 	and.w	r3, r3, #16
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d12f      	bne.n	8000e86 <HAL_ADC_Init+0x112>
 8000e26:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d12b      	bne.n	8000e86 <HAL_ADC_Init+0x112>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e36:	f023 0302 	bic.w	r3, r3, #2
 8000e3a:	f043 0202 	orr.w	r2, r3, #2
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e50:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e60:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e62:	4b73      	ldr	r3, [pc, #460]	; (8001030 <HAL_ADC_Init+0x2bc>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a73      	ldr	r2, [pc, #460]	; (8001034 <HAL_ADC_Init+0x2c0>)
 8000e68:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6c:	0c9a      	lsrs	r2, r3, #18
 8000e6e:	4613      	mov	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000e78:	e002      	b.n	8000e80 <HAL_ADC_Init+0x10c>
          {
            wait_loop_index--;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1f9      	bne.n	8000e7a <HAL_ADC_Init+0x106>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d007      	beq.n	8000ea4 <HAL_ADC_Init+0x130>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ea2:	d110      	bne.n	8000ec6 <HAL_ADC_Init+0x152>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	f023 0312 	bic.w	r3, r3, #18
 8000eac:	f043 0210 	orr.w	r2, r3, #16
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb8:	f043 0201 	orr.w	r2, r3, #1
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f003 0310 	and.w	r3, r3, #16
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f040 8165 	bne.w	800119e <HAL_ADC_Init+0x42a>
 8000ed4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f040 8160 	bne.w	800119e <HAL_ADC_Init+0x42a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f040 8158 	bne.w	800119e <HAL_ADC_Init+0x42a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000ef6:	f043 0202 	orr.w	r2, r3, #2
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f06:	d004      	beq.n	8000f12 <HAL_ADC_Init+0x19e>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a4a      	ldr	r2, [pc, #296]	; (8001038 <HAL_ADC_Init+0x2c4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d101      	bne.n	8000f16 <HAL_ADC_Init+0x1a2>
 8000f12:	4b4a      	ldr	r3, [pc, #296]	; (800103c <HAL_ADC_Init+0x2c8>)
 8000f14:	e000      	b.n	8000f18 <HAL_ADC_Init+0x1a4>
 8000f16:	4b4a      	ldr	r3, [pc, #296]	; (8001040 <HAL_ADC_Init+0x2cc>)
 8000f18:	67fb      	str	r3, [r7, #124]	; 0x7c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f22:	d102      	bne.n	8000f2a <HAL_ADC_Init+0x1b6>
 8000f24:	4b44      	ldr	r3, [pc, #272]	; (8001038 <HAL_ADC_Init+0x2c4>)
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	e01a      	b.n	8000f60 <HAL_ADC_Init+0x1ec>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a42      	ldr	r2, [pc, #264]	; (8001038 <HAL_ADC_Init+0x2c4>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d103      	bne.n	8000f3c <HAL_ADC_Init+0x1c8>
 8000f34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	e011      	b.n	8000f60 <HAL_ADC_Init+0x1ec>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a40      	ldr	r2, [pc, #256]	; (8001044 <HAL_ADC_Init+0x2d0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d102      	bne.n	8000f4c <HAL_ADC_Init+0x1d8>
 8000f46:	4b40      	ldr	r3, [pc, #256]	; (8001048 <HAL_ADC_Init+0x2d4>)
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	e009      	b.n	8000f60 <HAL_ADC_Init+0x1ec>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a3d      	ldr	r2, [pc, #244]	; (8001048 <HAL_ADC_Init+0x2d4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d102      	bne.n	8000f5c <HAL_ADC_Init+0x1e8>
 8000f56:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <HAL_ADC_Init+0x2d0>)
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	e001      	b.n	8000f60 <HAL_ADC_Init+0x1ec>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d108      	bne.n	8000f80 <HAL_ADC_Init+0x20c>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d101      	bne.n	8000f80 <HAL_ADC_Init+0x20c>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e000      	b.n	8000f82 <HAL_ADC_Init+0x20e>
 8000f80:	2300      	movs	r3, #0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d11c      	bne.n	8000fc0 <HAL_ADC_Init+0x24c>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f86:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d010      	beq.n	8000fae <HAL_ADC_Init+0x23a>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d107      	bne.n	8000fa8 <HAL_ADC_Init+0x234>
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d101      	bne.n	8000fa8 <HAL_ADC_Init+0x234>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <HAL_ADC_Init+0x236>
 8000fa8:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d108      	bne.n	8000fc0 <HAL_ADC_Init+0x24c>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000fae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fbe:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7e5b      	ldrb	r3, [r3, #25]
 8000fc4:	035b      	lsls	r3, r3, #13
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000fca:	2a01      	cmp	r2, #1
 8000fcc:	d002      	beq.n	8000fd4 <HAL_ADC_Init+0x260>
 8000fce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fd2:	e000      	b.n	8000fd6 <HAL_ADC_Init+0x262>
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d137      	bne.n	8001068 <HAL_ADC_Init+0x2f4>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7e5b      	ldrb	r3, [r3, #25]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d125      	bne.n	800104c <HAL_ADC_Init+0x2d8>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001004:	3b01      	subs	r3, #1
 8001006:	045a      	lsls	r2, r3, #17
 8001008:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800100c:	4313      	orrs	r3, r2
 800100e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001012:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001016:	e027      	b.n	8001068 <HAL_ADC_Init+0x2f4>
 8001018:	08000d25 	.word	0x08000d25
 800101c:	08000d39 	.word	0x08000d39
 8001020:	08000d4d 	.word	0x08000d4d
 8001024:	08000d61 	.word	0x08000d61
 8001028:	080017f5 	.word	0x080017f5
 800102c:	080007ad 	.word	0x080007ad
 8001030:	20000000 	.word	0x20000000
 8001034:	431bde83 	.word	0x431bde83
 8001038:	50000100 	.word	0x50000100
 800103c:	50000300 	.word	0x50000300
 8001040:	50000700 	.word	0x50000700
 8001044:	50000400 	.word	0x50000400
 8001048:	50000500 	.word	0x50000500
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001054:	f043 0220 	orr.w	r2, r3, #32
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001060:	f043 0201 	orr.w	r2, r3, #1
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106c:	2b01      	cmp	r3, #1
 800106e:	d048      	beq.n	8001102 <HAL_ADC_Init+0x38e>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a52      	ldr	r2, [pc, #328]	; (80011c0 <HAL_ADC_Init+0x44c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d004      	beq.n	8001084 <HAL_ADC_Init+0x310>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a51      	ldr	r2, [pc, #324]	; (80011c4 <HAL_ADC_Init+0x450>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d132      	bne.n	80010ea <HAL_ADC_Init+0x376>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800108c:	d02a      	beq.n	80010e4 <HAL_ADC_Init+0x370>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001096:	d022      	beq.n	80010de <HAL_ADC_Init+0x36a>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109c:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80010a0:	d01a      	beq.n	80010d8 <HAL_ADC_Init+0x364>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a6:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80010aa:	d012      	beq.n	80010d2 <HAL_ADC_Init+0x35e>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b0:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80010b4:	d00a      	beq.n	80010cc <HAL_ADC_Init+0x358>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80010be:	d002      	beq.n	80010c6 <HAL_ADC_Init+0x352>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c4:	e015      	b.n	80010f2 <HAL_ADC_Init+0x37e>
 80010c6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010ca:	e012      	b.n	80010f2 <HAL_ADC_Init+0x37e>
 80010cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010d0:	e00f      	b.n	80010f2 <HAL_ADC_Init+0x37e>
 80010d2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80010d6:	e00c      	b.n	80010f2 <HAL_ADC_Init+0x37e>
 80010d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010dc:	e009      	b.n	80010f2 <HAL_ADC_Init+0x37e>
 80010de:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80010e2:	e006      	b.n	80010f2 <HAL_ADC_Init+0x37e>
 80010e4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80010e8:	e003      	b.n	80010f2 <HAL_ADC_Init+0x37e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80010f6:	4313      	orrs	r3, r2
 80010f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80010fc:	4313      	orrs	r3, r2
 80010fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 030c 	and.w	r3, r3, #12
 800110c:	2b00      	cmp	r3, #0
 800110e:	d116      	bne.n	800113e <HAL_ADC_Init+0x3ca>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800111e:	f023 0302 	bic.w	r3, r3, #2
 8001122:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7e1b      	ldrb	r3, [r3, #24]
 8001128:	039a      	lsls	r2, r3, #14
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4313      	orrs	r3, r2
 8001134:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001138:	4313      	orrs	r3, r2
 800113a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <HAL_ADC_Init+0x454>)
 8001146:	4013      	ands	r3, r2
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001150:	430b      	orrs	r3, r1
 8001152:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d10c      	bne.n	8001176 <HAL_ADC_Init+0x402>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f023 010f 	bic.w	r1, r3, #15
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	1e5a      	subs	r2, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	631a      	str	r2, [r3, #48]	; 0x30
 8001174:	e007      	b.n	8001186 <HAL_ADC_Init+0x412>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 020f 	bic.w	r2, r2, #15
 8001184:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f023 0303 	bic.w	r3, r3, #3
 8001194:	f043 0201 	orr.w	r2, r3, #1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	641a      	str	r2, [r3, #64]	; 0x40
 800119c:	e00a      	b.n	80011b4 <HAL_ADC_Init+0x440>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f023 0312 	bic.w	r3, r3, #18
 80011a6:	f043 0210 	orr.w	r2, r3, #16
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80011ae:	2301      	movs	r3, #1
 80011b0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80011b4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3788      	adds	r7, #136	; 0x88
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	50000400 	.word	0x50000400
 80011c4:	50000500 	.word	0x50000500
 80011c8:	fff0c007 	.word	0xfff0c007

080011cc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	d106      	bne.n	80011fc <HAL_ADC_IRQHandler+0x30>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d00f      	beq.n	800121c <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001206:	2b08      	cmp	r3, #8
 8001208:	f040 80c1 	bne.w	800138e <HAL_ADC_IRQHandler+0x1c2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	2b08      	cmp	r3, #8
 8001218:	f040 80b9 	bne.w	800138e <HAL_ADC_IRQHandler+0x1c2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	2b00      	cmp	r3, #0
 8001226:	d105      	bne.n	8001234 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800123c:	d004      	beq.n	8001248 <HAL_ADC_IRQHandler+0x7c>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a8f      	ldr	r2, [pc, #572]	; (8001480 <HAL_ADC_IRQHandler+0x2b4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d106      	bne.n	8001256 <HAL_ADC_IRQHandler+0x8a>
 8001248:	4b8e      	ldr	r3, [pc, #568]	; (8001484 <HAL_ADC_IRQHandler+0x2b8>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 031f 	and.w	r3, r3, #31
 8001250:	2b00      	cmp	r3, #0
 8001252:	d03e      	beq.n	80012d2 <HAL_ADC_IRQHandler+0x106>
 8001254:	e005      	b.n	8001262 <HAL_ADC_IRQHandler+0x96>
 8001256:	4b8c      	ldr	r3, [pc, #560]	; (8001488 <HAL_ADC_IRQHandler+0x2bc>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 031f 	and.w	r3, r3, #31
 800125e:	2b00      	cmp	r3, #0
 8001260:	d037      	beq.n	80012d2 <HAL_ADC_IRQHandler+0x106>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800126a:	d004      	beq.n	8001276 <HAL_ADC_IRQHandler+0xaa>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a83      	ldr	r2, [pc, #524]	; (8001480 <HAL_ADC_IRQHandler+0x2b4>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d106      	bne.n	8001284 <HAL_ADC_IRQHandler+0xb8>
 8001276:	4b83      	ldr	r3, [pc, #524]	; (8001484 <HAL_ADC_IRQHandler+0x2b8>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 031f 	and.w	r3, r3, #31
 800127e:	2b05      	cmp	r3, #5
 8001280:	d027      	beq.n	80012d2 <HAL_ADC_IRQHandler+0x106>
 8001282:	e005      	b.n	8001290 <HAL_ADC_IRQHandler+0xc4>
 8001284:	4b80      	ldr	r3, [pc, #512]	; (8001488 <HAL_ADC_IRQHandler+0x2bc>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 031f 	and.w	r3, r3, #31
 800128c:	2b05      	cmp	r3, #5
 800128e:	d020      	beq.n	80012d2 <HAL_ADC_IRQHandler+0x106>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001298:	d004      	beq.n	80012a4 <HAL_ADC_IRQHandler+0xd8>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a78      	ldr	r2, [pc, #480]	; (8001480 <HAL_ADC_IRQHandler+0x2b4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d106      	bne.n	80012b2 <HAL_ADC_IRQHandler+0xe6>
 80012a4:	4b77      	ldr	r3, [pc, #476]	; (8001484 <HAL_ADC_IRQHandler+0x2b8>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 031f 	and.w	r3, r3, #31
 80012ac:	2b09      	cmp	r3, #9
 80012ae:	d010      	beq.n	80012d2 <HAL_ADC_IRQHandler+0x106>
 80012b0:	e005      	b.n	80012be <HAL_ADC_IRQHandler+0xf2>
 80012b2:	4b75      	ldr	r3, [pc, #468]	; (8001488 <HAL_ADC_IRQHandler+0x2bc>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 031f 	and.w	r3, r3, #31
 80012ba:	2b09      	cmp	r3, #9
 80012bc:	d009      	beq.n	80012d2 <HAL_ADC_IRQHandler+0x106>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012c6:	d004      	beq.n	80012d2 <HAL_ADC_IRQHandler+0x106>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a6f      	ldr	r2, [pc, #444]	; (800148c <HAL_ADC_IRQHandler+0x2c0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d104      	bne.n	80012dc <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	e00f      	b.n	80012fc <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012e4:	d004      	beq.n	80012f0 <HAL_ADC_IRQHandler+0x124>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a65      	ldr	r2, [pc, #404]	; (8001480 <HAL_ADC_IRQHandler+0x2b4>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d102      	bne.n	80012f6 <HAL_ADC_IRQHandler+0x12a>
 80012f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012f4:	e000      	b.n	80012f8 <HAL_ADC_IRQHandler+0x12c>
 80012f6:	4b65      	ldr	r3, [pc, #404]	; (800148c <HAL_ADC_IRQHandler+0x2c0>)
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001306:	2b00      	cmp	r3, #0
 8001308:	d139      	bne.n	800137e <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001310:	2b00      	cmp	r3, #0
 8001312:	d134      	bne.n	800137e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b08      	cmp	r3, #8
 8001320:	d12d      	bne.n	800137e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b00      	cmp	r3, #0
 800132e:	d11a      	bne.n	8001366 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 020c 	bic.w	r2, r2, #12
 800133e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d112      	bne.n	800137e <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	f043 0201 	orr.w	r2, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	641a      	str	r2, [r3, #64]	; 0x40
 8001364:	e00b      	b.n	800137e <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f043 0210 	orr.w	r2, r3, #16
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f043 0201 	orr.w	r2, r3, #1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Conversion complete callback */
    /* Note: into callback, to determine if conversion has been triggered     */
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	4798      	blx	r3
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	220c      	movs	r2, #12
 800138c:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0320 	and.w	r3, r3, #32
 8001398:	2b20      	cmp	r3, #32
 800139a:	d106      	bne.n	80013aa <HAL_ADC_IRQHandler+0x1de>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0320 	and.w	r3, r3, #32
 80013a6:	2b20      	cmp	r3, #32
 80013a8:	d00f      	beq.n	80013ca <HAL_ADC_IRQHandler+0x1fe>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80013b4:	2b40      	cmp	r3, #64	; 0x40
 80013b6:	f040 8145 	bne.w	8001644 <HAL_ADC_IRQHandler+0x478>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013c4:	2b40      	cmp	r3, #64	; 0x40
 80013c6:	f040 813d 	bne.w	8001644 <HAL_ADC_IRQHandler+0x478>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013de:	d004      	beq.n	80013ea <HAL_ADC_IRQHandler+0x21e>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a26      	ldr	r2, [pc, #152]	; (8001480 <HAL_ADC_IRQHandler+0x2b4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d106      	bne.n	80013f8 <HAL_ADC_IRQHandler+0x22c>
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <HAL_ADC_IRQHandler+0x2b8>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 031f 	and.w	r3, r3, #31
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d03e      	beq.n	8001474 <HAL_ADC_IRQHandler+0x2a8>
 80013f6:	e005      	b.n	8001404 <HAL_ADC_IRQHandler+0x238>
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <HAL_ADC_IRQHandler+0x2bc>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 031f 	and.w	r3, r3, #31
 8001400:	2b00      	cmp	r3, #0
 8001402:	d037      	beq.n	8001474 <HAL_ADC_IRQHandler+0x2a8>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800140c:	d004      	beq.n	8001418 <HAL_ADC_IRQHandler+0x24c>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a1b      	ldr	r2, [pc, #108]	; (8001480 <HAL_ADC_IRQHandler+0x2b4>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d106      	bne.n	8001426 <HAL_ADC_IRQHandler+0x25a>
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <HAL_ADC_IRQHandler+0x2b8>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 031f 	and.w	r3, r3, #31
 8001420:	2b05      	cmp	r3, #5
 8001422:	d027      	beq.n	8001474 <HAL_ADC_IRQHandler+0x2a8>
 8001424:	e005      	b.n	8001432 <HAL_ADC_IRQHandler+0x266>
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <HAL_ADC_IRQHandler+0x2bc>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 031f 	and.w	r3, r3, #31
 800142e:	2b05      	cmp	r3, #5
 8001430:	d020      	beq.n	8001474 <HAL_ADC_IRQHandler+0x2a8>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800143a:	d004      	beq.n	8001446 <HAL_ADC_IRQHandler+0x27a>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0f      	ldr	r2, [pc, #60]	; (8001480 <HAL_ADC_IRQHandler+0x2b4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d106      	bne.n	8001454 <HAL_ADC_IRQHandler+0x288>
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <HAL_ADC_IRQHandler+0x2b8>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 031f 	and.w	r3, r3, #31
 800144e:	2b09      	cmp	r3, #9
 8001450:	d010      	beq.n	8001474 <HAL_ADC_IRQHandler+0x2a8>
 8001452:	e005      	b.n	8001460 <HAL_ADC_IRQHandler+0x294>
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_ADC_IRQHandler+0x2bc>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 031f 	and.w	r3, r3, #31
 800145c:	2b09      	cmp	r3, #9
 800145e:	d009      	beq.n	8001474 <HAL_ADC_IRQHandler+0x2a8>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001468:	d004      	beq.n	8001474 <HAL_ADC_IRQHandler+0x2a8>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a07      	ldr	r2, [pc, #28]	; (800148c <HAL_ADC_IRQHandler+0x2c0>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d10d      	bne.n	8001490 <HAL_ADC_IRQHandler+0x2c4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	e018      	b.n	80014b0 <HAL_ADC_IRQHandler+0x2e4>
 800147e:	bf00      	nop
 8001480:	50000100 	.word	0x50000100
 8001484:	50000300 	.word	0x50000300
 8001488:	50000700 	.word	0x50000700
 800148c:	50000400 	.word	0x50000400
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001498:	d004      	beq.n	80014a4 <HAL_ADC_IRQHandler+0x2d8>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a5b      	ldr	r2, [pc, #364]	; (800160c <HAL_ADC_IRQHandler+0x440>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d102      	bne.n	80014aa <HAL_ADC_IRQHandler+0x2de>
 80014a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014a8:	e000      	b.n	80014ac <HAL_ADC_IRQHandler+0x2e0>
 80014aa:	4b59      	ldr	r3, [pc, #356]	; (8001610 <HAL_ADC_IRQHandler+0x444>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f040 80ba 	bne.w	8001634 <HAL_ADC_IRQHandler+0x468>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00d      	beq.n	80014e6 <HAL_ADC_IRQHandler+0x31a>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f040 80ad 	bne.w	8001634 <HAL_ADC_IRQHandler+0x468>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f040 80a7 	bne.w	8001634 <HAL_ADC_IRQHandler+0x468>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f0:	2b40      	cmp	r3, #64	; 0x40
 80014f2:	f040 809f 	bne.w	8001634 <HAL_ADC_IRQHandler+0x468>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014fe:	d004      	beq.n	800150a <HAL_ADC_IRQHandler+0x33e>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a41      	ldr	r2, [pc, #260]	; (800160c <HAL_ADC_IRQHandler+0x440>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d106      	bne.n	8001518 <HAL_ADC_IRQHandler+0x34c>
 800150a:	4b42      	ldr	r3, [pc, #264]	; (8001614 <HAL_ADC_IRQHandler+0x448>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	2b00      	cmp	r3, #0
 8001514:	d03e      	beq.n	8001594 <HAL_ADC_IRQHandler+0x3c8>
 8001516:	e005      	b.n	8001524 <HAL_ADC_IRQHandler+0x358>
 8001518:	4b3f      	ldr	r3, [pc, #252]	; (8001618 <HAL_ADC_IRQHandler+0x44c>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	2b00      	cmp	r3, #0
 8001522:	d037      	beq.n	8001594 <HAL_ADC_IRQHandler+0x3c8>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800152c:	d004      	beq.n	8001538 <HAL_ADC_IRQHandler+0x36c>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a36      	ldr	r2, [pc, #216]	; (800160c <HAL_ADC_IRQHandler+0x440>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d106      	bne.n	8001546 <HAL_ADC_IRQHandler+0x37a>
 8001538:	4b36      	ldr	r3, [pc, #216]	; (8001614 <HAL_ADC_IRQHandler+0x448>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 031f 	and.w	r3, r3, #31
 8001540:	2b06      	cmp	r3, #6
 8001542:	d027      	beq.n	8001594 <HAL_ADC_IRQHandler+0x3c8>
 8001544:	e005      	b.n	8001552 <HAL_ADC_IRQHandler+0x386>
 8001546:	4b34      	ldr	r3, [pc, #208]	; (8001618 <HAL_ADC_IRQHandler+0x44c>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 031f 	and.w	r3, r3, #31
 800154e:	2b06      	cmp	r3, #6
 8001550:	d020      	beq.n	8001594 <HAL_ADC_IRQHandler+0x3c8>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800155a:	d004      	beq.n	8001566 <HAL_ADC_IRQHandler+0x39a>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a2a      	ldr	r2, [pc, #168]	; (800160c <HAL_ADC_IRQHandler+0x440>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d106      	bne.n	8001574 <HAL_ADC_IRQHandler+0x3a8>
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <HAL_ADC_IRQHandler+0x448>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 031f 	and.w	r3, r3, #31
 800156e:	2b07      	cmp	r3, #7
 8001570:	d010      	beq.n	8001594 <HAL_ADC_IRQHandler+0x3c8>
 8001572:	e005      	b.n	8001580 <HAL_ADC_IRQHandler+0x3b4>
 8001574:	4b28      	ldr	r3, [pc, #160]	; (8001618 <HAL_ADC_IRQHandler+0x44c>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 031f 	and.w	r3, r3, #31
 800157c:	2b07      	cmp	r3, #7
 800157e:	d009      	beq.n	8001594 <HAL_ADC_IRQHandler+0x3c8>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001588:	d004      	beq.n	8001594 <HAL_ADC_IRQHandler+0x3c8>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a20      	ldr	r2, [pc, #128]	; (8001610 <HAL_ADC_IRQHandler+0x444>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d104      	bne.n	800159e <HAL_ADC_IRQHandler+0x3d2>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	e00f      	b.n	80015be <HAL_ADC_IRQHandler+0x3f2>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015a6:	d004      	beq.n	80015b2 <HAL_ADC_IRQHandler+0x3e6>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a17      	ldr	r2, [pc, #92]	; (800160c <HAL_ADC_IRQHandler+0x440>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d102      	bne.n	80015b8 <HAL_ADC_IRQHandler+0x3ec>
 80015b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015b6:	e000      	b.n	80015ba <HAL_ADC_IRQHandler+0x3ee>
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_ADC_IRQHandler+0x444>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d135      	bne.n	8001634 <HAL_ADC_IRQHandler+0x468>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d122      	bne.n	800161c <HAL_ADC_IRQHandler+0x450>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80015e4:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d11a      	bne.n	8001634 <HAL_ADC_IRQHandler+0x468>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f043 0201 	orr.w	r2, r3, #1
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	641a      	str	r2, [r3, #64]	; 0x40
 800160a:	e013      	b.n	8001634 <HAL_ADC_IRQHandler+0x468>
 800160c:	50000100 	.word	0x50000100
 8001610:	50000400 	.word	0x50000400
 8001614:	50000300 	.word	0x50000300
 8001618:	50000700 	.word	0x50000700
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	f043 0210 	orr.w	r2, r3, #16
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162c:	f043 0201 	orr.w	r2, r3, #1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	645a      	str	r2, [r3, #68]	; 0x44
    /* Conversion complete callback */
    /* Note: into callback, to determine if conversion has been triggered     */
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2260      	movs	r2, #96	; 0x60
 8001642:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164e:	2b80      	cmp	r3, #128	; 0x80
 8001650:	d114      	bne.n	800167c <HAL_ADC_IRQHandler+0x4b0>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165c:	2b80      	cmp	r3, #128	; 0x80
 800165e:	d10d      	bne.n	800167c <HAL_ADC_IRQHandler+0x4b0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2280      	movs	r2, #128	; 0x80
 800167a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800168a:	d115      	bne.n	80016b8 <HAL_ADC_IRQHandler+0x4ec>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800169a:	d10d      	bne.n	80016b8 <HAL_ADC_IRQHandler+0x4ec>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f8b7 	bl	800181c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b6:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016c6:	d115      	bne.n	80016f4 <HAL_ADC_IRQHandler+0x528>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016d6:	d10d      	bne.n	80016f4 <HAL_ADC_IRQHandler+0x528>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f8a3 	bl	8001830 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	2b10      	cmp	r3, #16
 8001700:	d14a      	bne.n	8001798 <HAL_ADC_IRQHandler+0x5cc>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0310 	and.w	r3, r3, #16
 800170c:	2b10      	cmp	r3, #16
 800170e:	d143      	bne.n	8001798 <HAL_ADC_IRQHandler+0x5cc>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001714:	2b01      	cmp	r3, #1
 8001716:	d102      	bne.n	800171e <HAL_ADC_IRQHandler+0x552>
    {
      overrun_error = 1U;
 8001718:	2301      	movs	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	e025      	b.n	800176a <HAL_ADC_IRQHandler+0x59e>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001726:	d004      	beq.n	8001732 <HAL_ADC_IRQHandler+0x566>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a2e      	ldr	r2, [pc, #184]	; (80017e8 <HAL_ADC_IRQHandler+0x61c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d101      	bne.n	8001736 <HAL_ADC_IRQHandler+0x56a>
 8001732:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <HAL_ADC_IRQHandler+0x620>)
 8001734:	e000      	b.n	8001738 <HAL_ADC_IRQHandler+0x56c>
 8001736:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <HAL_ADC_IRQHandler+0x624>)
 8001738:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	2b00      	cmp	r3, #0
 8001744:	d109      	bne.n	800175a <HAL_ADC_IRQHandler+0x58e>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b01      	cmp	r3, #1
 8001752:	d10a      	bne.n	800176a <HAL_ADC_IRQHandler+0x59e>
        {
          overrun_error = 1U;  
 8001754:	2301      	movs	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e007      	b.n	800176a <HAL_ADC_IRQHandler+0x59e>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_ADC_IRQHandler+0x59e>
        {
          overrun_error = 1U;  
 8001766:	2301      	movs	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d10f      	bne.n	8001790 <HAL_ADC_IRQHandler+0x5c4>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001780:	f043 0202 	orr.w	r2, r3, #2
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	4798      	blx	r3
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2210      	movs	r2, #16
 8001796:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a6:	d11b      	bne.n	80017e0 <HAL_ADC_IRQHandler+0x614>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b6:	d113      	bne.n	80017e0 <HAL_ADC_IRQHandler+0x614>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c8:	f043 0208 	orr.w	r2, r3, #8
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017d8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f814 	bl	8001808 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80017e0:	bf00      	nop
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	50000100 	.word	0x50000100
 80017ec:	50000300 	.word	0x50000300
 80017f0:	50000700 	.word	0x50000700

080017f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001844:	b480      	push	{r7}
 8001846:	b0a3      	sub	sp, #140	; 0x8c
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800185e:	2b01      	cmp	r3, #1
 8001860:	d101      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x22>
 8001862:	2302      	movs	r3, #2
 8001864:	e2ce      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x5c0>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	f040 82b2 	bne.w	8001de2 <HAL_ADC_ConfigChannel+0x59e>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b04      	cmp	r3, #4
 8001884:	d81c      	bhi.n	80018c0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	461a      	mov	r2, r3
 800189a:	231f      	movs	r3, #31
 800189c:	4093      	lsls	r3, r2
 800189e:	43db      	mvns	r3, r3
 80018a0:	4019      	ands	r1, r3
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	fa00 f203 	lsl.w	r2, r0, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	631a      	str	r2, [r3, #48]	; 0x30
 80018be:	e063      	b.n	8001988 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b09      	cmp	r3, #9
 80018c6:	d81e      	bhi.n	8001906 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	3b1e      	subs	r3, #30
 80018dc:	221f      	movs	r2, #31
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	4019      	ands	r1, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4413      	add	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	3b1e      	subs	r3, #30
 80018f8:	fa00 f203 	lsl.w	r2, r0, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	635a      	str	r2, [r3, #52]	; 0x34
 8001904:	e040      	b.n	8001988 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b0e      	cmp	r3, #14
 800190c:	d81e      	bhi.n	800194c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	3b3c      	subs	r3, #60	; 0x3c
 8001922:	221f      	movs	r2, #31
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	4019      	ands	r1, r3
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4413      	add	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	3b3c      	subs	r3, #60	; 0x3c
 800193e:	fa00 f203 	lsl.w	r2, r0, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	639a      	str	r2, [r3, #56]	; 0x38
 800194a:	e01d      	b.n	8001988 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	3b5a      	subs	r3, #90	; 0x5a
 8001960:	221f      	movs	r2, #31
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	4019      	ands	r1, r3
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4413      	add	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	3b5a      	subs	r3, #90	; 0x5a
 800197c:	fa00 f203 	lsl.w	r2, r0, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b00      	cmp	r3, #0
 8001994:	f040 80e9 	bne.w	8001b6a <HAL_ADC_ConfigChannel+0x326>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b09      	cmp	r3, #9
 800199e:	d91c      	bls.n	80019da <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6999      	ldr	r1, [r3, #24]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	3b1e      	subs	r3, #30
 80019b2:	2207      	movs	r2, #7
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4019      	ands	r1, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	6898      	ldr	r0, [r3, #8]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	3b1e      	subs	r3, #30
 80019cc:	fa00 f203 	lsl.w	r2, r0, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	619a      	str	r2, [r3, #24]
 80019d8:	e019      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6959      	ldr	r1, [r3, #20]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4613      	mov	r3, r2
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4413      	add	r3, r2
 80019ea:	2207      	movs	r2, #7
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	4019      	ands	r1, r3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	6898      	ldr	r0, [r3, #8]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4613      	mov	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	fa00 f203 	lsl.w	r2, r0, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	08db      	lsrs	r3, r3, #3
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d852      	bhi.n	8001ad8 <HAL_ADC_ConfigChannel+0x294>
 8001a32:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <HAL_ADC_ConfigChannel+0x1f4>)
 8001a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a38:	08001a49 	.word	0x08001a49
 8001a3c:	08001a6d 	.word	0x08001a6d
 8001a40:	08001a91 	.word	0x08001a91
 8001a44:	08001ab5 	.word	0x08001ab5
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a4e:	4b9c      	ldr	r3, [pc, #624]	; (8001cc0 <HAL_ADC_ConfigChannel+0x47c>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	0691      	lsls	r1, r2, #26
 8001a58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a68:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a6a:	e081      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x32c>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a72:	4b93      	ldr	r3, [pc, #588]	; (8001cc0 <HAL_ADC_ConfigChannel+0x47c>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	0691      	lsls	r1, r2, #26
 8001a7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001a80:	430a      	orrs	r2, r1
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a8c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a8e:	e06f      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x32c>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a96:	4b8a      	ldr	r3, [pc, #552]	; (8001cc0 <HAL_ADC_ConfigChannel+0x47c>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	0691      	lsls	r1, r2, #26
 8001aa0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ab0:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ab2:	e05d      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x32c>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001aba:	4b81      	ldr	r3, [pc, #516]	; (8001cc0 <HAL_ADC_ConfigChannel+0x47c>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	0691      	lsls	r1, r2, #26
 8001ac4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ad4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ad6:	e04b      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x32c>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ade:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	069b      	lsls	r3, r3, #26
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d107      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x2b8>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001afa:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	069b      	lsls	r3, r3, #26
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d107      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x2dc>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b1e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	069b      	lsls	r3, r3, #26
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d107      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x300>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b42:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	069b      	lsls	r3, r3, #26
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d10a      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x32a>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b66:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001b68:	e001      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x32a>
    }

  }
 8001b6a:	bf00      	nop
 8001b6c:	e000      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x32c>
      break;
 8001b6e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d108      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x34c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x34c>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x34e>
 8001b90:	2300      	movs	r3, #0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 8130 	bne.w	8001df8 <HAL_ADC_ConfigChannel+0x5b4>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d00f      	beq.n	8001bc0 <HAL_ADC_ConfigChannel+0x37c>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2201      	movs	r2, #1
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	400a      	ands	r2, r1
 8001bba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001bbe:	e049      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x410>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b09      	cmp	r3, #9
 8001be0:	d91c      	bls.n	8001c1c <HAL_ADC_ConfigChannel+0x3d8>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6999      	ldr	r1, [r3, #24]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3b1b      	subs	r3, #27
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	4019      	ands	r1, r3
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	6898      	ldr	r0, [r3, #8]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4613      	mov	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3b1b      	subs	r3, #27
 8001c0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	619a      	str	r2, [r3, #24]
 8001c1a:	e01b      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x410>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6959      	ldr	r1, [r3, #20]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	2207      	movs	r2, #7
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	4019      	ands	r1, r3
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	6898      	ldr	r0, [r3, #8]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c5c:	d004      	beq.n	8001c68 <HAL_ADC_ConfigChannel+0x424>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a18      	ldr	r2, [pc, #96]	; (8001cc4 <HAL_ADC_ConfigChannel+0x480>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d101      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x428>
 8001c68:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <HAL_ADC_ConfigChannel+0x484>)
 8001c6a:	e000      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x42a>
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_ADC_ConfigChannel+0x488>)
 8001c6e:	67fb      	str	r3, [r7, #124]	; 0x7c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b10      	cmp	r3, #16
 8001c76:	d105      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x440>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d015      	beq.n	8001cb0 <HAL_ADC_ConfigChannel+0x46c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c88:	2b11      	cmp	r3, #17
 8001c8a:	d105      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x454>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00b      	beq.n	8001cb0 <HAL_ADC_ConfigChannel+0x46c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c9c:	2b12      	cmp	r3, #18
 8001c9e:	f040 80ab 	bne.w	8001df8 <HAL_ADC_ConfigChannel+0x5b4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001ca2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f040 80a4 	bne.w	8001df8 <HAL_ADC_ConfigChannel+0x5b4>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cb8:	d10a      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x48c>
 8001cba:	4b02      	ldr	r3, [pc, #8]	; (8001cc4 <HAL_ADC_ConfigChannel+0x480>)
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	e022      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x4c2>
 8001cc0:	83fff000 	.word	0x83fff000
 8001cc4:	50000100 	.word	0x50000100
 8001cc8:	50000300 	.word	0x50000300
 8001ccc:	50000700 	.word	0x50000700
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a4e      	ldr	r2, [pc, #312]	; (8001e10 <HAL_ADC_ConfigChannel+0x5cc>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d103      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x49e>
 8001cda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	e011      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x4c2>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a4b      	ldr	r2, [pc, #300]	; (8001e14 <HAL_ADC_ConfigChannel+0x5d0>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d102      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x4ae>
 8001cec:	4b4a      	ldr	r3, [pc, #296]	; (8001e18 <HAL_ADC_ConfigChannel+0x5d4>)
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	e009      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x4c2>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a48      	ldr	r2, [pc, #288]	; (8001e18 <HAL_ADC_ConfigChannel+0x5d4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d102      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x4be>
 8001cfc:	4b45      	ldr	r3, [pc, #276]	; (8001e14 <HAL_ADC_ConfigChannel+0x5d0>)
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	e001      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x4c2>
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d108      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x4e2>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x4e2>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x4e4>
 8001d26:	2300      	movs	r3, #0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d150      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x58a>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d2c:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d010      	beq.n	8001d54 <HAL_ADC_ConfigChannel+0x510>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d107      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x50a>
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x50a>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x50c>
 8001d4e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d13c      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x58a>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b10      	cmp	r3, #16
 8001d5a:	d11d      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x554>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d64:	d118      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x554>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001d66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d70:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d72:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <HAL_ADC_ConfigChannel+0x5d8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a2a      	ldr	r2, [pc, #168]	; (8001e20 <HAL_ADC_ConfigChannel+0x5dc>)
 8001d78:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7c:	0c9a      	lsrs	r2, r3, #18
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8001d88:	e002      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x54c>
          {
            wait_loop_index--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f9      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x546>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d96:	e02e      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x5b2>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b11      	cmp	r3, #17
 8001d9e:	d10b      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x574>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001da8:	d106      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x574>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001daa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001db2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001db4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001db6:	e01e      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x5b2>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b12      	cmp	r3, #18
 8001dbe:	d11a      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x5b2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001dc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001dc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dca:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dcc:	e013      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x5b2>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f043 0220 	orr.w	r2, r3, #32
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001de0:	e00a      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x5b4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f043 0220 	orr.w	r2, r3, #32
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001df4:	e000      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x5b4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001df6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e00:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	378c      	adds	r7, #140	; 0x8c
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	50000100 	.word	0x50000100
 8001e14:	50000400 	.word	0x50000400
 8001e18:	50000500 	.word	0x50000500
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	431bde83 	.word	0x431bde83

08001e24 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b0a1      	sub	sp, #132	; 0x84
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e3c:	d102      	bne.n	8001e44 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001e3e:	4b6d      	ldr	r3, [pc, #436]	; (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	e01a      	b.n	8001e7a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a6a      	ldr	r2, [pc, #424]	; (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d103      	bne.n	8001e56 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001e4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e011      	b.n	8001e7a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a67      	ldr	r2, [pc, #412]	; (8001ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d102      	bne.n	8001e66 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001e60:	4b66      	ldr	r3, [pc, #408]	; (8001ffc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	e009      	b.n	8001e7a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a64      	ldr	r2, [pc, #400]	; (8001ffc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d102      	bne.n	8001e76 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001e70:	4b61      	ldr	r3, [pc, #388]	; (8001ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	e001      	b.n	8001e7a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0b0      	b.n	8001fe6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e0a9      	b.n	8001fe6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f040 808d 	bne.w	8001fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f040 8086 	bne.w	8001fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ec0:	d004      	beq.n	8001ecc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a4b      	ldr	r2, [pc, #300]	; (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d101      	bne.n	8001ed0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001ecc:	4b4c      	ldr	r3, [pc, #304]	; (8002000 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001ece:	e000      	b.n	8001ed2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001ed0:	4b4c      	ldr	r3, [pc, #304]	; (8002004 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001ed2:	67bb      	str	r3, [r7, #120]	; 0x78
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d040      	beq.n	8001f5e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	6859      	ldr	r1, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001eee:	035b      	lsls	r3, r3, #13
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ef6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d108      	bne.n	8001f18 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d15c      	bne.n	8001fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d107      	bne.n	8001f3a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001f3a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d14b      	bne.n	8001fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f48:	f023 030f 	bic.w	r3, r3, #15
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	6811      	ldr	r1, [r2, #0]
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	6892      	ldr	r2, [r2, #8]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	431a      	orrs	r2, r3
 8001f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f5a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f5c:	e03c      	b.n	8001fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f68:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d108      	bne.n	8001f8a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d123      	bne.n	8001fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d107      	bne.n	8001fac <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001fac:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d112      	bne.n	8001fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001fba:	f023 030f 	bic.w	r3, r3, #15
 8001fbe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001fc0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fc2:	e009      	b.n	8001fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f043 0220 	orr.w	r2, r3, #32
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001fd6:	e000      	b.n	8001fda <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fd8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001fe2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
} 
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3784      	adds	r7, #132	; 0x84
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	50000100 	.word	0x50000100
 8001ff8:	50000400 	.word	0x50000400
 8001ffc:	50000500 	.word	0x50000500
 8002000:	50000300 	.word	0x50000300
 8002004:	50000700 	.word	0x50000700

08002008 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b01      	cmp	r3, #1
 8002020:	d108      	bne.n	8002034 <ADC_Disable+0x2c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <ADC_Disable+0x2c>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <ADC_Disable+0x2e>
 8002034:	2300      	movs	r3, #0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d047      	beq.n	80020ca <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 030d 	and.w	r3, r3, #13
 8002044:	2b01      	cmp	r3, #1
 8002046:	d10f      	bne.n	8002068 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0202 	orr.w	r2, r2, #2
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2203      	movs	r2, #3
 800205e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002060:	f7fe fe30 	bl	8000cc4 <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002066:	e029      	b.n	80020bc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f043 0210 	orr.w	r2, r3, #16
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002078:	f043 0201 	orr.w	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e023      	b.n	80020cc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002084:	f7fe fe1e 	bl	8000cc4 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d914      	bls.n	80020bc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b01      	cmp	r3, #1
 800209e:	d10d      	bne.n	80020bc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	f043 0210 	orr.w	r2, r3, #16
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b0:	f043 0201 	orr.w	r2, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e007      	b.n	80020cc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d0dc      	beq.n	8002084 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f0:	4013      	ands	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002106:	4a04      	ldr	r2, [pc, #16]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	60d3      	str	r3, [r2, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <__NVIC_GetPriorityGrouping+0x18>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	f003 0307 	and.w	r3, r3, #7
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	2b00      	cmp	r3, #0
 8002148:	db0b      	blt.n	8002162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	f003 021f 	and.w	r2, r3, #31
 8002150:	4907      	ldr	r1, [pc, #28]	; (8002170 <__NVIC_EnableIRQ+0x38>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	2001      	movs	r0, #1
 800215a:	fa00 f202 	lsl.w	r2, r0, r2
 800215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000e100 	.word	0xe000e100

08002174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	2b00      	cmp	r3, #0
 8002186:	db0a      	blt.n	800219e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	490c      	ldr	r1, [pc, #48]	; (80021c0 <__NVIC_SetPriority+0x4c>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	0112      	lsls	r2, r2, #4
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	440b      	add	r3, r1
 8002198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800219c:	e00a      	b.n	80021b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4908      	ldr	r1, [pc, #32]	; (80021c4 <__NVIC_SetPriority+0x50>)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3b04      	subs	r3, #4
 80021ac:	0112      	lsls	r2, r2, #4
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	440b      	add	r3, r1
 80021b2:	761a      	strb	r2, [r3, #24]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000e100 	.word	0xe000e100
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f1c3 0307 	rsb	r3, r3, #7
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	bf28      	it	cs
 80021e6:	2304      	movcs	r3, #4
 80021e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d902      	bls.n	80021f8 <NVIC_EncodePriority+0x30>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3b03      	subs	r3, #3
 80021f6:	e000      	b.n	80021fa <NVIC_EncodePriority+0x32>
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	401a      	ands	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002210:	f04f 31ff 	mov.w	r1, #4294967295
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43d9      	mvns	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	4313      	orrs	r3, r2
         );
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002240:	d301      	bcc.n	8002246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002242:	2301      	movs	r3, #1
 8002244:	e00f      	b.n	8002266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <SysTick_Config+0x40>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224e:	210f      	movs	r1, #15
 8002250:	f04f 30ff 	mov.w	r0, #4294967295
 8002254:	f7ff ff8e 	bl	8002174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <SysTick_Config+0x40>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225e:	4b04      	ldr	r3, [pc, #16]	; (8002270 <SysTick_Config+0x40>)
 8002260:	2207      	movs	r2, #7
 8002262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	e000e010 	.word	0xe000e010

08002274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ff29 	bl	80020d4 <__NVIC_SetPriorityGrouping>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800229c:	f7ff ff3e 	bl	800211c <__NVIC_GetPriorityGrouping>
 80022a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	6978      	ldr	r0, [r7, #20]
 80022a8:	f7ff ff8e 	bl	80021c8 <NVIC_EncodePriority>
 80022ac:	4602      	mov	r2, r0
 80022ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff5d 	bl	8002174 <__NVIC_SetPriority>
}
 80022ba:	bf00      	nop
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff31 	bl	8002138 <__NVIC_EnableIRQ>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ffa2 	bl	8002230 <SysTick_Config>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002304:	2b02      	cmp	r3, #2
 8002306:	d008      	beq.n	800231a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2204      	movs	r2, #4
 800230c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e020      	b.n	800235c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 020e 	bic.w	r2, r2, #14
 8002328:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0201 	bic.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002342:	2101      	movs	r1, #1
 8002344:	fa01 f202 	lsl.w	r2, r1, r2
 8002348:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800237a:	2b02      	cmp	r3, #2
 800237c:	d005      	beq.n	800238a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2204      	movs	r2, #4
 8002382:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
 8002388:	e027      	b.n	80023da <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 020e 	bic.w	r2, r2, #14
 8002398:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0201 	bic.w	r2, r2, #1
 80023a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b2:	2101      	movs	r1, #1
 80023b4:	fa01 f202 	lsl.w	r2, r1, r2
 80023b8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	4798      	blx	r3
    } 
  }
  return status;
 80023da:	7bfb      	ldrb	r3, [r7, #15]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f2:	e160      	b.n	80026b6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	2101      	movs	r1, #1
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002400:	4013      	ands	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8152 	beq.w	80026b0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	2b01      	cmp	r3, #1
 8002416:	d005      	beq.n	8002424 <HAL_GPIO_Init+0x40>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d130      	bne.n	8002486 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800245a:	2201      	movs	r2, #1
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	f003 0201 	and.w	r2, r3, #1
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b03      	cmp	r3, #3
 8002490:	d017      	beq.n	80024c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	2203      	movs	r2, #3
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d123      	bne.n	8002516 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	08da      	lsrs	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3208      	adds	r2, #8
 80024d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	220f      	movs	r2, #15
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	08da      	lsrs	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3208      	adds	r2, #8
 8002510:	6939      	ldr	r1, [r7, #16]
 8002512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0203 	and.w	r2, r3, #3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80ac 	beq.w	80026b0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002558:	4b5e      	ldr	r3, [pc, #376]	; (80026d4 <HAL_GPIO_Init+0x2f0>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	4a5d      	ldr	r2, [pc, #372]	; (80026d4 <HAL_GPIO_Init+0x2f0>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6193      	str	r3, [r2, #24]
 8002564:	4b5b      	ldr	r3, [pc, #364]	; (80026d4 <HAL_GPIO_Init+0x2f0>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002570:	4a59      	ldr	r2, [pc, #356]	; (80026d8 <HAL_GPIO_Init+0x2f4>)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	3302      	adds	r3, #2
 8002578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	220f      	movs	r2, #15
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800259a:	d025      	beq.n	80025e8 <HAL_GPIO_Init+0x204>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a4f      	ldr	r2, [pc, #316]	; (80026dc <HAL_GPIO_Init+0x2f8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d01f      	beq.n	80025e4 <HAL_GPIO_Init+0x200>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a4e      	ldr	r2, [pc, #312]	; (80026e0 <HAL_GPIO_Init+0x2fc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d019      	beq.n	80025e0 <HAL_GPIO_Init+0x1fc>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a4d      	ldr	r2, [pc, #308]	; (80026e4 <HAL_GPIO_Init+0x300>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d013      	beq.n	80025dc <HAL_GPIO_Init+0x1f8>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a4c      	ldr	r2, [pc, #304]	; (80026e8 <HAL_GPIO_Init+0x304>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d00d      	beq.n	80025d8 <HAL_GPIO_Init+0x1f4>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a4b      	ldr	r2, [pc, #300]	; (80026ec <HAL_GPIO_Init+0x308>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d007      	beq.n	80025d4 <HAL_GPIO_Init+0x1f0>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a4a      	ldr	r2, [pc, #296]	; (80026f0 <HAL_GPIO_Init+0x30c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d101      	bne.n	80025d0 <HAL_GPIO_Init+0x1ec>
 80025cc:	2306      	movs	r3, #6
 80025ce:	e00c      	b.n	80025ea <HAL_GPIO_Init+0x206>
 80025d0:	2307      	movs	r3, #7
 80025d2:	e00a      	b.n	80025ea <HAL_GPIO_Init+0x206>
 80025d4:	2305      	movs	r3, #5
 80025d6:	e008      	b.n	80025ea <HAL_GPIO_Init+0x206>
 80025d8:	2304      	movs	r3, #4
 80025da:	e006      	b.n	80025ea <HAL_GPIO_Init+0x206>
 80025dc:	2303      	movs	r3, #3
 80025de:	e004      	b.n	80025ea <HAL_GPIO_Init+0x206>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e002      	b.n	80025ea <HAL_GPIO_Init+0x206>
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <HAL_GPIO_Init+0x206>
 80025e8:	2300      	movs	r3, #0
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	f002 0203 	and.w	r2, r2, #3
 80025f0:	0092      	lsls	r2, r2, #2
 80025f2:	4093      	lsls	r3, r2
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025fa:	4937      	ldr	r1, [pc, #220]	; (80026d8 <HAL_GPIO_Init+0x2f4>)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	089b      	lsrs	r3, r3, #2
 8002600:	3302      	adds	r3, #2
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002608:	4b3a      	ldr	r3, [pc, #232]	; (80026f4 <HAL_GPIO_Init+0x310>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	43db      	mvns	r3, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800262c:	4a31      	ldr	r2, [pc, #196]	; (80026f4 <HAL_GPIO_Init+0x310>)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002632:	4b30      	ldr	r3, [pc, #192]	; (80026f4 <HAL_GPIO_Init+0x310>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	43db      	mvns	r3, r3
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002656:	4a27      	ldr	r2, [pc, #156]	; (80026f4 <HAL_GPIO_Init+0x310>)
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800265c:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <HAL_GPIO_Init+0x310>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	43db      	mvns	r3, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002680:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <HAL_GPIO_Init+0x310>)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002686:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <HAL_GPIO_Init+0x310>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026aa:	4a12      	ldr	r2, [pc, #72]	; (80026f4 <HAL_GPIO_Init+0x310>)
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3301      	adds	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f47f ae97 	bne.w	80023f4 <HAL_GPIO_Init+0x10>
  }
}
 80026c6:	bf00      	nop
 80026c8:	bf00      	nop
 80026ca:	371c      	adds	r7, #28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40010000 	.word	0x40010000
 80026dc:	48000400 	.word	0x48000400
 80026e0:	48000800 	.word	0x48000800
 80026e4:	48000c00 	.word	0x48000c00
 80026e8:	48001000 	.word	0x48001000
 80026ec:	48001400 	.word	0x48001400
 80026f0:	48001800 	.word	0x48001800
 80026f4:	40010400 	.word	0x40010400

080026f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	807b      	strh	r3, [r7, #2]
 8002704:	4613      	mov	r3, r2
 8002706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002708:	787b      	ldrb	r3, [r7, #1]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800270e:	887a      	ldrh	r2, [r7, #2]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002714:	e002      	b.n	800271c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002716:	887a      	ldrh	r2, [r7, #2]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800273a:	887a      	ldrh	r2, [r7, #2]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4013      	ands	r3, r2
 8002740:	041a      	lsls	r2, r3, #16
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	43d9      	mvns	r1, r3
 8002746:	887b      	ldrh	r3, [r7, #2]
 8002748:	400b      	ands	r3, r1
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	619a      	str	r2, [r3, #24]
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	4013      	ands	r3, r2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d006      	beq.n	8002780 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002772:	4a05      	ldr	r2, [pc, #20]	; (8002788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	4618      	mov	r0, r3
 800277c:	f7fd ffbe 	bl	80006fc <HAL_GPIO_EXTI_Callback>
  }
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40010400 	.word	0x40010400

0800278c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e0a7      	b.n	80028ee <HAL_I2C_Init+0x162>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d12c      	bne.n	8002804 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a50      	ldr	r2, [pc, #320]	; (80028f8 <HAL_I2C_Init+0x16c>)
 80027b6:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a50      	ldr	r2, [pc, #320]	; (80028fc <HAL_I2C_Init+0x170>)
 80027bc:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a4f      	ldr	r2, [pc, #316]	; (8002900 <HAL_I2C_Init+0x174>)
 80027c2:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a4f      	ldr	r2, [pc, #316]	; (8002904 <HAL_I2C_Init+0x178>)
 80027c8:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a4e      	ldr	r2, [pc, #312]	; (8002908 <HAL_I2C_Init+0x17c>)
 80027ce:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a4e      	ldr	r2, [pc, #312]	; (800290c <HAL_I2C_Init+0x180>)
 80027d4:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a4d      	ldr	r2, [pc, #308]	; (8002910 <HAL_I2C_Init+0x184>)
 80027da:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a4d      	ldr	r2, [pc, #308]	; (8002914 <HAL_I2C_Init+0x188>)
 80027e0:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a4c      	ldr	r2, [pc, #304]	; (8002918 <HAL_I2C_Init+0x18c>)
 80027e6:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a4c      	ldr	r2, [pc, #304]	; (800291c <HAL_I2C_Init+0x190>)
 80027ec:	671a      	str	r2, [r3, #112]	; 0x70

    if (hi2c->MspInitCallback == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a49      	ldr	r2, [pc, #292]	; (8002920 <HAL_I2C_Init+0x194>)
 80027fa:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2224      	movs	r2, #36	; 0x24
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002828:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002838:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d107      	bne.n	8002852 <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	e006      	b.n	8002860 <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800285e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d104      	bne.n	8002872 <HAL_I2C_Init+0xe6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002870:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002884:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002894:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69d9      	ldr	r1, [r3, #28]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1a      	ldr	r2, [r3, #32]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	08002959 	.word	0x08002959
 80028fc:	0800296d 	.word	0x0800296d
 8002900:	08002981 	.word	0x08002981
 8002904:	08002995 	.word	0x08002995
 8002908:	080029c5 	.word	0x080029c5
 800290c:	080029d9 	.word	0x080029d9
 8002910:	080029ed 	.word	0x080029ed
 8002914:	08002a01 	.word	0x08002a01
 8002918:	08002a15 	.word	0x08002a15
 800291c:	080029a9 	.word	0x080029a9
 8002920:	08000839 	.word	0x08000839

08002924 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	68f9      	ldr	r1, [r7, #12]
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
  }
}
 8002950:	bf00      	nop
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	70fb      	strb	r3, [r7, #3]
 80029b4:	4613      	mov	r3, r2
 80029b6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	d138      	bne.n	8002ab0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e032      	b.n	8002ab2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2224      	movs	r2, #36	; 0x24
 8002a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6819      	ldr	r1, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e000      	b.n	8002ab2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
  }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d139      	bne.n	8002b48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e033      	b.n	8002b4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2224      	movs	r2, #36	; 0x24
 8002aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0201 	bic.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e000      	b.n	8002b4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
  }
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b68:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f001 b83a 	b.w	8003bf2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 816f 	beq.w	8002e72 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b94:	4bb5      	ldr	r3, [pc, #724]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 030c 	and.w	r3, r3, #12
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d00c      	beq.n	8002bba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ba0:	4bb2      	ldr	r3, [pc, #712]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 030c 	and.w	r3, r3, #12
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d15c      	bne.n	8002c66 <HAL_RCC_OscConfig+0x10e>
 8002bac:	4baf      	ldr	r3, [pc, #700]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb8:	d155      	bne.n	8002c66 <HAL_RCC_OscConfig+0x10e>
 8002bba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bbe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd2:	fab3 f383 	clz	r3, r3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d102      	bne.n	8002bec <HAL_RCC_OscConfig+0x94>
 8002be6:	4ba1      	ldr	r3, [pc, #644]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	e015      	b.n	8002c18 <HAL_RCC_OscConfig+0xc0>
 8002bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bf0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002c00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c04:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002c08:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002c14:	4b95      	ldr	r3, [pc, #596]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c1c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002c20:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002c24:	fa92 f2a2 	rbit	r2, r2
 8002c28:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002c2c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002c30:	fab2 f282 	clz	r2, r2
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	f042 0220 	orr.w	r2, r2, #32
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	f002 021f 	and.w	r2, r2, #31
 8002c40:	2101      	movs	r1, #1
 8002c42:	fa01 f202 	lsl.w	r2, r1, r2
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 8111 	beq.w	8002e70 <HAL_RCC_OscConfig+0x318>
 8002c4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f040 8108 	bne.w	8002e70 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	f000 bfc6 	b.w	8003bf2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c6a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c76:	d106      	bne.n	8002c86 <HAL_RCC_OscConfig+0x12e>
 8002c78:	4b7c      	ldr	r3, [pc, #496]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a7b      	ldr	r2, [pc, #492]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	e036      	b.n	8002cf4 <HAL_RCC_OscConfig+0x19c>
 8002c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x158>
 8002c96:	4b75      	ldr	r3, [pc, #468]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a74      	ldr	r2, [pc, #464]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b72      	ldr	r3, [pc, #456]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a71      	ldr	r2, [pc, #452]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e021      	b.n	8002cf4 <HAL_RCC_OscConfig+0x19c>
 8002cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x184>
 8002cc2:	4b6a      	ldr	r3, [pc, #424]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a69      	ldr	r2, [pc, #420]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	4b67      	ldr	r3, [pc, #412]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a66      	ldr	r2, [pc, #408]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCC_OscConfig+0x19c>
 8002cdc:	4b63      	ldr	r3, [pc, #396]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a62      	ldr	r2, [pc, #392]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	4b60      	ldr	r3, [pc, #384]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a5f      	ldr	r2, [pc, #380]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cf8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d059      	beq.n	8002db8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fd ffde 	bl	8000cc4 <HAL_GetTick>
 8002d08:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d0e:	f7fd ffd9 	bl	8000cc4 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	; 0x64
 8002d1c:	d902      	bls.n	8002d24 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	f000 bf67 	b.w	8003bf2 <HAL_RCC_OscConfig+0x109a>
 8002d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d28:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002d38:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3c:	fab3 f383 	clz	r3, r3
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d102      	bne.n	8002d56 <HAL_RCC_OscConfig+0x1fe>
 8002d50:	4b46      	ldr	r3, [pc, #280]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	e015      	b.n	8002d82 <HAL_RCC_OscConfig+0x22a>
 8002d56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d5a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d6e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d72:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d7e:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d86:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002d8a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002d8e:	fa92 f2a2 	rbit	r2, r2
 8002d92:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002d96:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d9a:	fab2 f282 	clz	r2, r2
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	f042 0220 	orr.w	r2, r2, #32
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	f002 021f 	and.w	r2, r2, #31
 8002daa:	2101      	movs	r1, #1
 8002dac:	fa01 f202 	lsl.w	r2, r1, r2
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0ab      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1b6>
 8002db6:	e05c      	b.n	8002e72 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7fd ff84 	bl	8000cc4 <HAL_GetTick>
 8002dbc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc2:	f7fd ff7f 	bl	8000cc4 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d902      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	f000 bf0d 	b.w	8003bf2 <HAL_RCC_OscConfig+0x109a>
 8002dd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ddc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002de4:	fa93 f3a3 	rbit	r3, r3
 8002de8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002dec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df0:	fab3 f383 	clz	r3, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d102      	bne.n	8002e0a <HAL_RCC_OscConfig+0x2b2>
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	e015      	b.n	8002e36 <HAL_RCC_OscConfig+0x2de>
 8002e0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e0e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002e1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e22:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002e26:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <HAL_RCC_OscConfig+0x314>)
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e3a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002e3e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002e42:	fa92 f2a2 	rbit	r2, r2
 8002e46:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002e4a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e4e:	fab2 f282 	clz	r2, r2
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	f042 0220 	orr.w	r2, r2, #32
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	f002 021f 	and.w	r2, r2, #31
 8002e5e:	2101      	movs	r1, #1
 8002e60:	fa01 f202 	lsl.w	r2, r1, r2
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1ab      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x26a>
 8002e6a:	e002      	b.n	8002e72 <HAL_RCC_OscConfig+0x31a>
 8002e6c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 817f 	beq.w	8003186 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e88:	4ba7      	ldr	r3, [pc, #668]	; (8003128 <HAL_RCC_OscConfig+0x5d0>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00c      	beq.n	8002eae <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e94:	4ba4      	ldr	r3, [pc, #656]	; (8003128 <HAL_RCC_OscConfig+0x5d0>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d173      	bne.n	8002f88 <HAL_RCC_OscConfig+0x430>
 8002ea0:	4ba1      	ldr	r3, [pc, #644]	; (8003128 <HAL_RCC_OscConfig+0x5d0>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eac:	d16c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x430>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002ec0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d102      	bne.n	8002ede <HAL_RCC_OscConfig+0x386>
 8002ed8:	4b93      	ldr	r3, [pc, #588]	; (8003128 <HAL_RCC_OscConfig+0x5d0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	e013      	b.n	8002f06 <HAL_RCC_OscConfig+0x3ae>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ef6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002f02:	4b89      	ldr	r3, [pc, #548]	; (8003128 <HAL_RCC_OscConfig+0x5d0>)
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	2202      	movs	r2, #2
 8002f08:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002f0c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002f10:	fa92 f2a2 	rbit	r2, r2
 8002f14:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002f18:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002f1c:	fab2 f282 	clz	r2, r2
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	f042 0220 	orr.w	r2, r2, #32
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	f002 021f 	and.w	r2, r2, #31
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <HAL_RCC_OscConfig+0x3f6>
 8002f38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d002      	beq.n	8002f4e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	f000 be52 	b.w	8003bf2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4e:	4b76      	ldr	r3, [pc, #472]	; (8003128 <HAL_RCC_OscConfig+0x5d0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	21f8      	movs	r1, #248	; 0xf8
 8002f64:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002f6c:	fa91 f1a1 	rbit	r1, r1
 8002f70:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002f74:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f78:	fab1 f181 	clz	r1, r1
 8002f7c:	b2c9      	uxtb	r1, r1
 8002f7e:	408b      	lsls	r3, r1
 8002f80:	4969      	ldr	r1, [pc, #420]	; (8003128 <HAL_RCC_OscConfig+0x5d0>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f86:	e0fe      	b.n	8003186 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 8088 	beq.w	80030aa <HAL_RCC_OscConfig+0x552>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002fa4:	fa93 f3a3 	rbit	r3, r3
 8002fa8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002fac:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb0:	fab3 f383 	clz	r3, r3
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc6:	f7fd fe7d 	bl	8000cc4 <HAL_GetTick>
 8002fca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd0:	f7fd fe78 	bl	8000cc4 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d902      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	f000 be06 	b.w	8003bf2 <HAL_RCC_OscConfig+0x109a>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002ff0:	fa93 f3a3 	rbit	r3, r3
 8002ff4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002ff8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffc:	fab3 f383 	clz	r3, r3
 8003000:	b2db      	uxtb	r3, r3
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b01      	cmp	r3, #1
 800300e:	d102      	bne.n	8003016 <HAL_RCC_OscConfig+0x4be>
 8003010:	4b45      	ldr	r3, [pc, #276]	; (8003128 <HAL_RCC_OscConfig+0x5d0>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	e013      	b.n	800303e <HAL_RCC_OscConfig+0x4e6>
 8003016:	2302      	movs	r3, #2
 8003018:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003020:	fa93 f3a3 	rbit	r3, r3
 8003024:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003028:	2302      	movs	r3, #2
 800302a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800302e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800303a:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <HAL_RCC_OscConfig+0x5d0>)
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	2202      	movs	r2, #2
 8003040:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003044:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003048:	fa92 f2a2 	rbit	r2, r2
 800304c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003050:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003054:	fab2 f282 	clz	r2, r2
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	f042 0220 	orr.w	r2, r2, #32
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	f002 021f 	and.w	r2, r2, #31
 8003064:	2101      	movs	r1, #1
 8003066:	fa01 f202 	lsl.w	r2, r1, r2
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0af      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003070:	4b2d      	ldr	r3, [pc, #180]	; (8003128 <HAL_RCC_OscConfig+0x5d0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003078:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800307c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	21f8      	movs	r1, #248	; 0xf8
 8003086:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800308e:	fa91 f1a1 	rbit	r1, r1
 8003092:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003096:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800309a:	fab1 f181 	clz	r1, r1
 800309e:	b2c9      	uxtb	r1, r1
 80030a0:	408b      	lsls	r3, r1
 80030a2:	4921      	ldr	r1, [pc, #132]	; (8003128 <HAL_RCC_OscConfig+0x5d0>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	600b      	str	r3, [r1, #0]
 80030a8:	e06d      	b.n	8003186 <HAL_RCC_OscConfig+0x62e>
 80030aa:	2301      	movs	r3, #1
 80030ac:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80030b4:	fa93 f3a3 	rbit	r3, r3
 80030b8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80030bc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c0:	fab3 f383 	clz	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	461a      	mov	r2, r3
 80030d2:	2300      	movs	r3, #0
 80030d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d6:	f7fd fdf5 	bl	8000cc4 <HAL_GetTick>
 80030da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e0:	f7fd fdf0 	bl	8000cc4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d902      	bls.n	80030f6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	f000 bd7e 	b.w	8003bf2 <HAL_RCC_OscConfig+0x109a>
 80030f6:	2302      	movs	r3, #2
 80030f8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003100:	fa93 f3a3 	rbit	r3, r3
 8003104:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003108:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	b2db      	uxtb	r3, r3
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	d105      	bne.n	800312c <HAL_RCC_OscConfig+0x5d4>
 8003120:	4b01      	ldr	r3, [pc, #4]	; (8003128 <HAL_RCC_OscConfig+0x5d0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	e016      	b.n	8003154 <HAL_RCC_OscConfig+0x5fc>
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000
 800312c:	2302      	movs	r3, #2
 800312e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003136:	fa93 f3a3 	rbit	r3, r3
 800313a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800313e:	2302      	movs	r3, #2
 8003140:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003144:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003150:	4bbf      	ldr	r3, [pc, #764]	; (8003450 <HAL_RCC_OscConfig+0x8f8>)
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	2202      	movs	r2, #2
 8003156:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800315a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800315e:	fa92 f2a2 	rbit	r2, r2
 8003162:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003166:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800316a:	fab2 f282 	clz	r2, r2
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	f042 0220 	orr.w	r2, r2, #32
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	f002 021f 	and.w	r2, r2, #31
 800317a:	2101      	movs	r1, #1
 800317c:	fa01 f202 	lsl.w	r2, r1, r2
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1ac      	bne.n	80030e0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003186:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800318a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8113 	beq.w	80033c2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800319c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d07c      	beq.n	80032a6 <HAL_RCC_OscConfig+0x74e>
 80031ac:	2301      	movs	r3, #1
 80031ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80031be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c2:	fab3 f383 	clz	r3, r3
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	4ba2      	ldr	r3, [pc, #648]	; (8003454 <HAL_RCC_OscConfig+0x8fc>)
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	461a      	mov	r2, r3
 80031d2:	2301      	movs	r3, #1
 80031d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d6:	f7fd fd75 	bl	8000cc4 <HAL_GetTick>
 80031da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e0:	f7fd fd70 	bl	8000cc4 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d902      	bls.n	80031f6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	f000 bcfe 	b.w	8003bf2 <HAL_RCC_OscConfig+0x109a>
 80031f6:	2302      	movs	r3, #2
 80031f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003200:	fa93 f2a3 	rbit	r2, r3
 8003204:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003208:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003212:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003216:	2202      	movs	r2, #2
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800321e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	fa93 f2a3 	rbit	r2, r3
 8003228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800322c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003236:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800323a:	2202      	movs	r2, #2
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003242:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	fa93 f2a3 	rbit	r2, r3
 800324c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003250:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003254:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003256:	4b7e      	ldr	r3, [pc, #504]	; (8003450 <HAL_RCC_OscConfig+0x8f8>)
 8003258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800325a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800325e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003262:	2102      	movs	r1, #2
 8003264:	6019      	str	r1, [r3, #0]
 8003266:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800326a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	fa93 f1a3 	rbit	r1, r3
 8003274:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003278:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800327c:	6019      	str	r1, [r3, #0]
  return result;
 800327e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003282:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003292:	b2db      	uxtb	r3, r3
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	2101      	movs	r1, #1
 800329a:	fa01 f303 	lsl.w	r3, r1, r3
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d09d      	beq.n	80031e0 <HAL_RCC_OscConfig+0x688>
 80032a4:	e08d      	b.n	80033c2 <HAL_RCC_OscConfig+0x86a>
 80032a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032aa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80032ae:	2201      	movs	r2, #1
 80032b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	fa93 f2a3 	rbit	r2, r3
 80032c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80032c8:	601a      	str	r2, [r3, #0]
  return result;
 80032ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80032d2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d4:	fab3 f383 	clz	r3, r3
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	4b5d      	ldr	r3, [pc, #372]	; (8003454 <HAL_RCC_OscConfig+0x8fc>)
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	461a      	mov	r2, r3
 80032e4:	2300      	movs	r3, #0
 80032e6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e8:	f7fd fcec 	bl	8000cc4 <HAL_GetTick>
 80032ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f0:	e00a      	b.n	8003308 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f2:	f7fd fce7 	bl	8000cc4 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d902      	bls.n	8003308 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	f000 bc75 	b.w	8003bf2 <HAL_RCC_OscConfig+0x109a>
 8003308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800330c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003310:	2202      	movs	r2, #2
 8003312:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003318:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	fa93 f2a3 	rbit	r2, r3
 8003322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003326:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003330:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003334:	2202      	movs	r2, #2
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800333c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	fa93 f2a3 	rbit	r2, r3
 8003346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800334a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003354:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003358:	2202      	movs	r2, #2
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003360:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	fa93 f2a3 	rbit	r2, r3
 800336a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800336e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003372:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003374:	4b36      	ldr	r3, [pc, #216]	; (8003450 <HAL_RCC_OscConfig+0x8f8>)
 8003376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003378:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800337c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003380:	2102      	movs	r1, #2
 8003382:	6019      	str	r1, [r3, #0]
 8003384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003388:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	fa93 f1a3 	rbit	r1, r3
 8003392:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003396:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800339a:	6019      	str	r1, [r3, #0]
  return result;
 800339c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033a0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	fab3 f383 	clz	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	2101      	movs	r1, #1
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d197      	bne.n	80032f2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 81a5 	beq.w	8003722 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d8:	2300      	movs	r3, #0
 80033da:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033de:	4b1c      	ldr	r3, [pc, #112]	; (8003450 <HAL_RCC_OscConfig+0x8f8>)
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d116      	bne.n	8003418 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ea:	4b19      	ldr	r3, [pc, #100]	; (8003450 <HAL_RCC_OscConfig+0x8f8>)
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	4a18      	ldr	r2, [pc, #96]	; (8003450 <HAL_RCC_OscConfig+0x8f8>)
 80033f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f4:	61d3      	str	r3, [r2, #28]
 80033f6:	4b16      	ldr	r3, [pc, #88]	; (8003450 <HAL_RCC_OscConfig+0x8f8>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80033fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003402:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800340c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003410:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003412:	2301      	movs	r3, #1
 8003414:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <HAL_RCC_OscConfig+0x900>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003420:	2b00      	cmp	r3, #0
 8003422:	d121      	bne.n	8003468 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <HAL_RCC_OscConfig+0x900>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a0b      	ldr	r2, [pc, #44]	; (8003458 <HAL_RCC_OscConfig+0x900>)
 800342a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003430:	f7fd fc48 	bl	8000cc4 <HAL_GetTick>
 8003434:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003438:	e010      	b.n	800345c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343a:	f7fd fc43 	bl	8000cc4 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	; 0x64
 8003448:	d908      	bls.n	800345c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e3d1      	b.n	8003bf2 <HAL_RCC_OscConfig+0x109a>
 800344e:	bf00      	nop
 8003450:	40021000 	.word	0x40021000
 8003454:	10908120 	.word	0x10908120
 8003458:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345c:	4b8d      	ldr	r3, [pc, #564]	; (8003694 <HAL_RCC_OscConfig+0xb3c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0e8      	beq.n	800343a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800346c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d106      	bne.n	8003486 <HAL_RCC_OscConfig+0x92e>
 8003478:	4b87      	ldr	r3, [pc, #540]	; (8003698 <HAL_RCC_OscConfig+0xb40>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4a86      	ldr	r2, [pc, #536]	; (8003698 <HAL_RCC_OscConfig+0xb40>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	6213      	str	r3, [r2, #32]
 8003484:	e035      	b.n	80034f2 <HAL_RCC_OscConfig+0x99a>
 8003486:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800348a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x958>
 8003496:	4b80      	ldr	r3, [pc, #512]	; (8003698 <HAL_RCC_OscConfig+0xb40>)
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	4a7f      	ldr	r2, [pc, #508]	; (8003698 <HAL_RCC_OscConfig+0xb40>)
 800349c:	f023 0301 	bic.w	r3, r3, #1
 80034a0:	6213      	str	r3, [r2, #32]
 80034a2:	4b7d      	ldr	r3, [pc, #500]	; (8003698 <HAL_RCC_OscConfig+0xb40>)
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	4a7c      	ldr	r2, [pc, #496]	; (8003698 <HAL_RCC_OscConfig+0xb40>)
 80034a8:	f023 0304 	bic.w	r3, r3, #4
 80034ac:	6213      	str	r3, [r2, #32]
 80034ae:	e020      	b.n	80034f2 <HAL_RCC_OscConfig+0x99a>
 80034b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b05      	cmp	r3, #5
 80034be:	d10c      	bne.n	80034da <HAL_RCC_OscConfig+0x982>
 80034c0:	4b75      	ldr	r3, [pc, #468]	; (8003698 <HAL_RCC_OscConfig+0xb40>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	4a74      	ldr	r2, [pc, #464]	; (8003698 <HAL_RCC_OscConfig+0xb40>)
 80034c6:	f043 0304 	orr.w	r3, r3, #4
 80034ca:	6213      	str	r3, [r2, #32]
 80034cc:	4b72      	ldr	r3, [pc, #456]	; (8003698 <HAL_RCC_OscConfig+0xb40>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	4a71      	ldr	r2, [pc, #452]	; (8003698 <HAL_RCC_OscConfig+0xb40>)
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	6213      	str	r3, [r2, #32]
 80034d8:	e00b      	b.n	80034f2 <HAL_RCC_OscConfig+0x99a>
 80034da:	4b6f      	ldr	r3, [pc, #444]	; (8003698 <HAL_RCC_OscConfig+0xb40>)
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4a6e      	ldr	r2, [pc, #440]	; (8003698 <HAL_RCC_OscConfig+0xb40>)
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	6213      	str	r3, [r2, #32]
 80034e6:	4b6c      	ldr	r3, [pc, #432]	; (8003698 <HAL_RCC_OscConfig+0xb40>)
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	4a6b      	ldr	r2, [pc, #428]	; (8003698 <HAL_RCC_OscConfig+0xb40>)
 80034ec:	f023 0304 	bic.w	r3, r3, #4
 80034f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 8081 	beq.w	8003606 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003504:	f7fd fbde 	bl	8000cc4 <HAL_GetTick>
 8003508:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350c:	e00b      	b.n	8003526 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800350e:	f7fd fbd9 	bl	8000cc4 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f241 3288 	movw	r2, #5000	; 0x1388
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e365      	b.n	8003bf2 <HAL_RCC_OscConfig+0x109a>
 8003526:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800352a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800352e:	2202      	movs	r2, #2
 8003530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003536:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	fa93 f2a3 	rbit	r2, r3
 8003540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003544:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800354e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003552:	2202      	movs	r2, #2
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800355a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	fa93 f2a3 	rbit	r2, r3
 8003564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003568:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800356c:	601a      	str	r2, [r3, #0]
  return result;
 800356e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003572:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003576:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003578:	fab3 f383 	clz	r3, r3
 800357c:	b2db      	uxtb	r3, r3
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	b2db      	uxtb	r3, r3
 8003582:	f043 0302 	orr.w	r3, r3, #2
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d102      	bne.n	8003592 <HAL_RCC_OscConfig+0xa3a>
 800358c:	4b42      	ldr	r3, [pc, #264]	; (8003698 <HAL_RCC_OscConfig+0xb40>)
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	e013      	b.n	80035ba <HAL_RCC_OscConfig+0xa62>
 8003592:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003596:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800359a:	2202      	movs	r2, #2
 800359c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	fa93 f2a3 	rbit	r2, r3
 80035ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035b0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	4b38      	ldr	r3, [pc, #224]	; (8003698 <HAL_RCC_OscConfig+0xb40>)
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035be:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80035c2:	2102      	movs	r1, #2
 80035c4:	6011      	str	r1, [r2, #0]
 80035c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	fa92 f1a2 	rbit	r1, r2
 80035d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035d8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80035dc:	6011      	str	r1, [r2, #0]
  return result;
 80035de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035e2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	fab2 f282 	clz	r2, r2
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	f002 021f 	and.w	r2, r2, #31
 80035f8:	2101      	movs	r1, #1
 80035fa:	fa01 f202 	lsl.w	r2, r1, r2
 80035fe:	4013      	ands	r3, r2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d084      	beq.n	800350e <HAL_RCC_OscConfig+0x9b6>
 8003604:	e083      	b.n	800370e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003606:	f7fd fb5d 	bl	8000cc4 <HAL_GetTick>
 800360a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360e:	e00b      	b.n	8003628 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003610:	f7fd fb58 	bl	8000cc4 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003620:	4293      	cmp	r3, r2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e2e4      	b.n	8003bf2 <HAL_RCC_OscConfig+0x109a>
 8003628:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800362c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003630:	2202      	movs	r2, #2
 8003632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003638:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	fa93 f2a3 	rbit	r2, r3
 8003642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003646:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003650:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003654:	2202      	movs	r2, #2
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800365c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	fa93 f2a3 	rbit	r2, r3
 8003666:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800366a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800366e:	601a      	str	r2, [r3, #0]
  return result;
 8003670:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003674:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003678:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367a:	fab3 f383 	clz	r3, r3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f043 0302 	orr.w	r3, r3, #2
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d106      	bne.n	800369c <HAL_RCC_OscConfig+0xb44>
 800368e:	4b02      	ldr	r3, [pc, #8]	; (8003698 <HAL_RCC_OscConfig+0xb40>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	e017      	b.n	80036c4 <HAL_RCC_OscConfig+0xb6c>
 8003694:	40007000 	.word	0x40007000
 8003698:	40021000 	.word	0x40021000
 800369c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036a0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80036a4:	2202      	movs	r2, #2
 80036a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	fa93 f2a3 	rbit	r2, r3
 80036b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ba:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	4bb3      	ldr	r3, [pc, #716]	; (8003990 <HAL_RCC_OscConfig+0xe38>)
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80036c8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80036cc:	2102      	movs	r1, #2
 80036ce:	6011      	str	r1, [r2, #0]
 80036d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80036d4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	fa92 f1a2 	rbit	r1, r2
 80036de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80036e2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80036e6:	6011      	str	r1, [r2, #0]
  return result;
 80036e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80036ec:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80036f0:	6812      	ldr	r2, [r2, #0]
 80036f2:	fab2 f282 	clz	r2, r2
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	f002 021f 	and.w	r2, r2, #31
 8003702:	2101      	movs	r1, #1
 8003704:	fa01 f202 	lsl.w	r2, r1, r2
 8003708:	4013      	ands	r3, r2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d180      	bne.n	8003610 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800370e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003712:	2b01      	cmp	r3, #1
 8003714:	d105      	bne.n	8003722 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003716:	4b9e      	ldr	r3, [pc, #632]	; (8003990 <HAL_RCC_OscConfig+0xe38>)
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	4a9d      	ldr	r2, [pc, #628]	; (8003990 <HAL_RCC_OscConfig+0xe38>)
 800371c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003720:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003726:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 825e 	beq.w	8003bf0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003734:	4b96      	ldr	r3, [pc, #600]	; (8003990 <HAL_RCC_OscConfig+0xe38>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 030c 	and.w	r3, r3, #12
 800373c:	2b08      	cmp	r3, #8
 800373e:	f000 821f 	beq.w	8003b80 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003746:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	2b02      	cmp	r3, #2
 8003750:	f040 8170 	bne.w	8003a34 <HAL_RCC_OscConfig+0xedc>
 8003754:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003758:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800375c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003766:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	fa93 f2a3 	rbit	r2, r3
 8003770:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003774:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003778:	601a      	str	r2, [r3, #0]
  return result;
 800377a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800377e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003782:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003784:	fab3 f383 	clz	r3, r3
 8003788:	b2db      	uxtb	r3, r3
 800378a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800378e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	461a      	mov	r2, r3
 8003796:	2300      	movs	r3, #0
 8003798:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379a:	f7fd fa93 	bl	8000cc4 <HAL_GetTick>
 800379e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a2:	e009      	b.n	80037b8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a4:	f7fd fa8e 	bl	8000cc4 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e21c      	b.n	8003bf2 <HAL_RCC_OscConfig+0x109a>
 80037b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037bc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80037c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	fa93 f2a3 	rbit	r2, r3
 80037d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037d8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037dc:	601a      	str	r2, [r3, #0]
  return result;
 80037de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e8:	fab3 f383 	clz	r3, r3
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d102      	bne.n	8003802 <HAL_RCC_OscConfig+0xcaa>
 80037fc:	4b64      	ldr	r3, [pc, #400]	; (8003990 <HAL_RCC_OscConfig+0xe38>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	e027      	b.n	8003852 <HAL_RCC_OscConfig+0xcfa>
 8003802:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003806:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800380a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800380e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003814:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	fa93 f2a3 	rbit	r2, r3
 800381e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003822:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800382c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003830:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800383a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	fa93 f2a3 	rbit	r2, r3
 8003844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003848:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	4b50      	ldr	r3, [pc, #320]	; (8003990 <HAL_RCC_OscConfig+0xe38>)
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003856:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800385a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800385e:	6011      	str	r1, [r2, #0]
 8003860:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003864:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	fa92 f1a2 	rbit	r1, r2
 800386e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003872:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003876:	6011      	str	r1, [r2, #0]
  return result;
 8003878:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800387c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	fab2 f282 	clz	r2, r2
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	f042 0220 	orr.w	r2, r2, #32
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	f002 021f 	and.w	r2, r2, #31
 8003892:	2101      	movs	r1, #1
 8003894:	fa01 f202 	lsl.w	r2, r1, r2
 8003898:	4013      	ands	r3, r2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d182      	bne.n	80037a4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800389e:	4b3c      	ldr	r3, [pc, #240]	; (8003990 <HAL_RCC_OscConfig+0xe38>)
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	f023 020f 	bic.w	r2, r3, #15
 80038a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	4937      	ldr	r1, [pc, #220]	; (8003990 <HAL_RCC_OscConfig+0xe38>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80038b8:	4b35      	ldr	r3, [pc, #212]	; (8003990 <HAL_RCC_OscConfig+0xe38>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80038c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a19      	ldr	r1, [r3, #32]
 80038cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	430b      	orrs	r3, r1
 80038da:	492d      	ldr	r1, [pc, #180]	; (8003990 <HAL_RCC_OscConfig+0xe38>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	604b      	str	r3, [r1, #4]
 80038e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80038e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	fa93 f2a3 	rbit	r2, r3
 80038fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003900:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003904:	601a      	str	r2, [r3, #0]
  return result;
 8003906:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800390a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800390e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003910:	fab3 f383 	clz	r3, r3
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800391a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	461a      	mov	r2, r3
 8003922:	2301      	movs	r3, #1
 8003924:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7fd f9cd 	bl	8000cc4 <HAL_GetTick>
 800392a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800392e:	e009      	b.n	8003944 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003930:	f7fd f9c8 	bl	8000cc4 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e156      	b.n	8003bf2 <HAL_RCC_OscConfig+0x109a>
 8003944:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003948:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800394c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003956:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	fa93 f2a3 	rbit	r2, r3
 8003960:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003964:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003968:	601a      	str	r2, [r3, #0]
  return result;
 800396a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800396e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003972:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003974:	fab3 f383 	clz	r3, r3
 8003978:	b2db      	uxtb	r3, r3
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f043 0301 	orr.w	r3, r3, #1
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d105      	bne.n	8003994 <HAL_RCC_OscConfig+0xe3c>
 8003988:	4b01      	ldr	r3, [pc, #4]	; (8003990 <HAL_RCC_OscConfig+0xe38>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	e02a      	b.n	80039e4 <HAL_RCC_OscConfig+0xe8c>
 800398e:	bf00      	nop
 8003990:	40021000 	.word	0x40021000
 8003994:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003998:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800399c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039a6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	fa93 f2a3 	rbit	r2, r3
 80039b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039b4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039be:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80039c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039cc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	fa93 f2a3 	rbit	r2, r3
 80039d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039da:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	4b86      	ldr	r3, [pc, #536]	; (8003bfc <HAL_RCC_OscConfig+0x10a4>)
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80039e8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80039ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039f0:	6011      	str	r1, [r2, #0]
 80039f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80039f6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	fa92 f1a2 	rbit	r1, r2
 8003a00:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a04:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003a08:	6011      	str	r1, [r2, #0]
  return result;
 8003a0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003a0e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	fab2 f282 	clz	r2, r2
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	f042 0220 	orr.w	r2, r2, #32
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	f002 021f 	and.w	r2, r2, #31
 8003a24:	2101      	movs	r1, #1
 8003a26:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f43f af7f 	beq.w	8003930 <HAL_RCC_OscConfig+0xdd8>
 8003a32:	e0dd      	b.n	8003bf0 <HAL_RCC_OscConfig+0x1098>
 8003a34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a38:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003a3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a46:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	fa93 f2a3 	rbit	r2, r3
 8003a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a54:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a58:	601a      	str	r2, [r3, #0]
  return result;
 8003a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a5e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a62:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a64:	fab3 f383 	clz	r3, r3
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a6e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	461a      	mov	r2, r3
 8003a76:	2300      	movs	r3, #0
 8003a78:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7a:	f7fd f923 	bl	8000cc4 <HAL_GetTick>
 8003a7e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a82:	e009      	b.n	8003a98 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a84:	f7fd f91e 	bl	8000cc4 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e0ac      	b.n	8003bf2 <HAL_RCC_OscConfig+0x109a>
 8003a98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a9c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003aa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aaa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	fa93 f2a3 	rbit	r2, r3
 8003ab4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ab8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003abc:	601a      	str	r2, [r3, #0]
  return result;
 8003abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ac2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003ac6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac8:	fab3 f383 	clz	r3, r3
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d102      	bne.n	8003ae2 <HAL_RCC_OscConfig+0xf8a>
 8003adc:	4b47      	ldr	r3, [pc, #284]	; (8003bfc <HAL_RCC_OscConfig+0x10a4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	e027      	b.n	8003b32 <HAL_RCC_OscConfig+0xfda>
 8003ae2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ae6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003aea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003af4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	fa93 f2a3 	rbit	r2, r3
 8003afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b02:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b0c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003b10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b1a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	fa93 f2a3 	rbit	r2, r3
 8003b24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b28:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	4b33      	ldr	r3, [pc, #204]	; (8003bfc <HAL_RCC_OscConfig+0x10a4>)
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b36:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003b3a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b3e:	6011      	str	r1, [r2, #0]
 8003b40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b44:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003b48:	6812      	ldr	r2, [r2, #0]
 8003b4a:	fa92 f1a2 	rbit	r1, r2
 8003b4e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b52:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003b56:	6011      	str	r1, [r2, #0]
  return result;
 8003b58:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b5c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	fab2 f282 	clz	r2, r2
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	f042 0220 	orr.w	r2, r2, #32
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	f002 021f 	and.w	r2, r2, #31
 8003b72:	2101      	movs	r1, #1
 8003b74:	fa01 f202 	lsl.w	r2, r1, r2
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d182      	bne.n	8003a84 <HAL_RCC_OscConfig+0xf2c>
 8003b7e:	e037      	b.n	8003bf0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b84:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e02e      	b.n	8003bf2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b94:	4b19      	ldr	r3, [pc, #100]	; (8003bfc <HAL_RCC_OscConfig+0x10a4>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003b9c:	4b17      	ldr	r3, [pc, #92]	; (8003bfc <HAL_RCC_OscConfig+0x10a4>)
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ba4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ba8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003bac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bb0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d117      	bne.n	8003bec <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003bbc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003bc0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bc8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d10b      	bne.n	8003bec <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003bd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bd8:	f003 020f 	and.w	r2, r3, #15
 8003bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003be0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40021000 	.word	0x40021000

08003c00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b09e      	sub	sp, #120	; 0x78
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e162      	b.n	8003ede <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c18:	4b90      	ldr	r3, [pc, #576]	; (8003e5c <HAL_RCC_ClockConfig+0x25c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d910      	bls.n	8003c48 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c26:	4b8d      	ldr	r3, [pc, #564]	; (8003e5c <HAL_RCC_ClockConfig+0x25c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 0207 	bic.w	r2, r3, #7
 8003c2e:	498b      	ldr	r1, [pc, #556]	; (8003e5c <HAL_RCC_ClockConfig+0x25c>)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c36:	4b89      	ldr	r3, [pc, #548]	; (8003e5c <HAL_RCC_ClockConfig+0x25c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e14a      	b.n	8003ede <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c54:	4b82      	ldr	r3, [pc, #520]	; (8003e60 <HAL_RCC_ClockConfig+0x260>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	497f      	ldr	r1, [pc, #508]	; (8003e60 <HAL_RCC_ClockConfig+0x260>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80dc 	beq.w	8003e2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d13c      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xf6>
 8003c7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c80:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c84:	fa93 f3a3 	rbit	r3, r3
 8003c88:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8c:	fab3 f383 	clz	r3, r3
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d102      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xa6>
 8003ca0:	4b6f      	ldr	r3, [pc, #444]	; (8003e60 <HAL_RCC_ClockConfig+0x260>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	e00f      	b.n	8003cc6 <HAL_RCC_ClockConfig+0xc6>
 8003ca6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003caa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	667b      	str	r3, [r7, #100]	; 0x64
 8003cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cb8:	663b      	str	r3, [r7, #96]	; 0x60
 8003cba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cbc:	fa93 f3a3 	rbit	r3, r3
 8003cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cc2:	4b67      	ldr	r3, [pc, #412]	; (8003e60 <HAL_RCC_ClockConfig+0x260>)
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cca:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ccc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cce:	fa92 f2a2 	rbit	r2, r2
 8003cd2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003cd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cd6:	fab2 f282 	clz	r2, r2
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	f042 0220 	orr.w	r2, r2, #32
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	f002 021f 	and.w	r2, r2, #31
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cec:	4013      	ands	r3, r2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d17b      	bne.n	8003dea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e0f3      	b.n	8003ede <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d13c      	bne.n	8003d78 <HAL_RCC_ClockConfig+0x178>
 8003cfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d06:	fa93 f3a3 	rbit	r3, r3
 8003d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d0e:	fab3 f383 	clz	r3, r3
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d102      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x128>
 8003d22:	4b4f      	ldr	r3, [pc, #316]	; (8003e60 <HAL_RCC_ClockConfig+0x260>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	e00f      	b.n	8003d48 <HAL_RCC_ClockConfig+0x148>
 8003d28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d30:	fa93 f3a3 	rbit	r3, r3
 8003d34:	647b      	str	r3, [r7, #68]	; 0x44
 8003d36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d3a:	643b      	str	r3, [r7, #64]	; 0x40
 8003d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d3e:	fa93 f3a3 	rbit	r3, r3
 8003d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d44:	4b46      	ldr	r3, [pc, #280]	; (8003e60 <HAL_RCC_ClockConfig+0x260>)
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d4c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d50:	fa92 f2a2 	rbit	r2, r2
 8003d54:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003d56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d58:	fab2 f282 	clz	r2, r2
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	f042 0220 	orr.w	r2, r2, #32
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	f002 021f 	and.w	r2, r2, #31
 8003d68:	2101      	movs	r1, #1
 8003d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d13a      	bne.n	8003dea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e0b2      	b.n	8003ede <HAL_RCC_ClockConfig+0x2de>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7e:	fa93 f3a3 	rbit	r3, r3
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d86:	fab3 f383 	clz	r3, r3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d102      	bne.n	8003da0 <HAL_RCC_ClockConfig+0x1a0>
 8003d9a:	4b31      	ldr	r3, [pc, #196]	; (8003e60 <HAL_RCC_ClockConfig+0x260>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	e00d      	b.n	8003dbc <HAL_RCC_ClockConfig+0x1bc>
 8003da0:	2302      	movs	r3, #2
 8003da2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	fa93 f3a3 	rbit	r3, r3
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
 8003dac:	2302      	movs	r3, #2
 8003dae:	623b      	str	r3, [r7, #32]
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	fa93 f3a3 	rbit	r3, r3
 8003db6:	61fb      	str	r3, [r7, #28]
 8003db8:	4b29      	ldr	r3, [pc, #164]	; (8003e60 <HAL_RCC_ClockConfig+0x260>)
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	61ba      	str	r2, [r7, #24]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	fa92 f2a2 	rbit	r2, r2
 8003dc6:	617a      	str	r2, [r7, #20]
  return result;
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	fab2 f282 	clz	r2, r2
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	f042 0220 	orr.w	r2, r2, #32
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	f002 021f 	and.w	r2, r2, #31
 8003dda:	2101      	movs	r1, #1
 8003ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e079      	b.n	8003ede <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dea:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <HAL_RCC_ClockConfig+0x260>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f023 0203 	bic.w	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	491a      	ldr	r1, [pc, #104]	; (8003e60 <HAL_RCC_ClockConfig+0x260>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dfc:	f7fc ff62 	bl	8000cc4 <HAL_GetTick>
 8003e00:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e02:	e00a      	b.n	8003e1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e04:	f7fc ff5e 	bl	8000cc4 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e061      	b.n	8003ede <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1a:	4b11      	ldr	r3, [pc, #68]	; (8003e60 <HAL_RCC_ClockConfig+0x260>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f003 020c 	and.w	r2, r3, #12
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d1eb      	bne.n	8003e04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <HAL_RCC_ClockConfig+0x25c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d214      	bcs.n	8003e64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3a:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <HAL_RCC_ClockConfig+0x25c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 0207 	bic.w	r2, r3, #7
 8003e42:	4906      	ldr	r1, [pc, #24]	; (8003e5c <HAL_RCC_ClockConfig+0x25c>)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4a:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <HAL_RCC_ClockConfig+0x25c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d005      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e040      	b.n	8003ede <HAL_RCC_ClockConfig+0x2de>
 8003e5c:	40022000 	.word	0x40022000
 8003e60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e70:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	491a      	ldr	r1, [pc, #104]	; (8003ee8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d009      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e8e:	4b16      	ldr	r3, [pc, #88]	; (8003ee8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4912      	ldr	r1, [pc, #72]	; (8003ee8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ea2:	f000 f829 	bl	8003ef8 <HAL_RCC_GetSysClockFreq>
 8003ea6:	4601      	mov	r1, r0
 8003ea8:	4b0f      	ldr	r3, [pc, #60]	; (8003ee8 <HAL_RCC_ClockConfig+0x2e8>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb0:	22f0      	movs	r2, #240	; 0xf0
 8003eb2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	fa92 f2a2 	rbit	r2, r2
 8003eba:	60fa      	str	r2, [r7, #12]
  return result;
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	fab2 f282 	clz	r2, r2
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	40d3      	lsrs	r3, r2
 8003ec6:	4a09      	ldr	r2, [pc, #36]	; (8003eec <HAL_RCC_ClockConfig+0x2ec>)
 8003ec8:	5cd3      	ldrb	r3, [r2, r3]
 8003eca:	fa21 f303 	lsr.w	r3, r1, r3
 8003ece:	4a08      	ldr	r2, [pc, #32]	; (8003ef0 <HAL_RCC_ClockConfig+0x2f0>)
 8003ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ed2:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <HAL_RCC_ClockConfig+0x2f4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fc feb0 	bl	8000c3c <HAL_InitTick>
  
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3778      	adds	r7, #120	; 0x78
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	08006218 	.word	0x08006218
 8003ef0:	20000000 	.word	0x20000000
 8003ef4:	20000004 	.word	0x20000004

08003ef8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b08b      	sub	sp, #44	; 0x2c
 8003efc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	2300      	movs	r3, #0
 8003f04:	61bb      	str	r3, [r7, #24]
 8003f06:	2300      	movs	r3, #0
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003f12:	4b2a      	ldr	r3, [pc, #168]	; (8003fbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d002      	beq.n	8003f28 <HAL_RCC_GetSysClockFreq+0x30>
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d003      	beq.n	8003f2e <HAL_RCC_GetSysClockFreq+0x36>
 8003f26:	e03f      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f28:	4b25      	ldr	r3, [pc, #148]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f2a:	623b      	str	r3, [r7, #32]
      break;
 8003f2c:	e03f      	b.n	8003fae <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003f38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	fa92 f2a2 	rbit	r2, r2
 8003f40:	607a      	str	r2, [r7, #4]
  return result;
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	fab2 f282 	clz	r2, r2
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	40d3      	lsrs	r3, r2
 8003f4c:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f4e:	5cd3      	ldrb	r3, [r2, r3]
 8003f50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003f52:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	220f      	movs	r2, #15
 8003f5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	fa92 f2a2 	rbit	r2, r2
 8003f64:	60fa      	str	r2, [r7, #12]
  return result;
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	fab2 f282 	clz	r2, r2
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	40d3      	lsrs	r3, r2
 8003f70:	4a15      	ldr	r2, [pc, #84]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f72:	5cd3      	ldrb	r3, [r2, r3]
 8003f74:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f80:	4a0f      	ldr	r2, [pc, #60]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f90:	e007      	b.n	8003fa2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f92:	4a0b      	ldr	r2, [pc, #44]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	fb02 f303 	mul.w	r3, r2, r3
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	623b      	str	r3, [r7, #32]
      break;
 8003fa6:	e002      	b.n	8003fae <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fa8:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003faa:	623b      	str	r3, [r7, #32]
      break;
 8003fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fae:	6a3b      	ldr	r3, [r7, #32]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	372c      	adds	r7, #44	; 0x2c
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	007a1200 	.word	0x007a1200
 8003fc4:	08006230 	.word	0x08006230
 8003fc8:	08006240 	.word	0x08006240

08003fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd0:	4b03      	ldr	r3, [pc, #12]	; (8003fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	20000000 	.word	0x20000000

08003fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003fea:	f7ff ffef 	bl	8003fcc <HAL_RCC_GetHCLKFreq>
 8003fee:	4601      	mov	r1, r0
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ff8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ffc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	fa92 f2a2 	rbit	r2, r2
 8004004:	603a      	str	r2, [r7, #0]
  return result;
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	fab2 f282 	clz	r2, r2
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	40d3      	lsrs	r3, r2
 8004010:	4a04      	ldr	r2, [pc, #16]	; (8004024 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004012:	5cd3      	ldrb	r3, [r2, r3]
 8004014:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004018:	4618      	mov	r0, r3
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40021000 	.word	0x40021000
 8004024:	08006228 	.word	0x08006228

08004028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800402e:	f7ff ffcd 	bl	8003fcc <HAL_RCC_GetHCLKFreq>
 8004032:	4601      	mov	r1, r0
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800403c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004040:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	fa92 f2a2 	rbit	r2, r2
 8004048:	603a      	str	r2, [r7, #0]
  return result;
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	fab2 f282 	clz	r2, r2
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	40d3      	lsrs	r3, r2
 8004054:	4a04      	ldr	r2, [pc, #16]	; (8004068 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004056:	5cd3      	ldrb	r3, [r2, r3]
 8004058:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800405c:	4618      	mov	r0, r3
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40021000 	.word	0x40021000
 8004068:	08006228 	.word	0x08006228

0800406c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b092      	sub	sp, #72	; 0x48
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800407c:	2300      	movs	r3, #0
 800407e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 80d4 	beq.w	8004238 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004090:	4b4e      	ldr	r3, [pc, #312]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10e      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800409c:	4b4b      	ldr	r3, [pc, #300]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	4a4a      	ldr	r2, [pc, #296]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a6:	61d3      	str	r3, [r2, #28]
 80040a8:	4b48      	ldr	r3, [pc, #288]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040b4:	2301      	movs	r3, #1
 80040b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ba:	4b45      	ldr	r3, [pc, #276]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d118      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040c6:	4b42      	ldr	r3, [pc, #264]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a41      	ldr	r2, [pc, #260]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040d2:	f7fc fdf7 	bl	8000cc4 <HAL_GetTick>
 80040d6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d8:	e008      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040da:	f7fc fdf3 	bl	8000cc4 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b64      	cmp	r3, #100	; 0x64
 80040e6:	d901      	bls.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e1d6      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ec:	4b38      	ldr	r3, [pc, #224]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040f8:	4b34      	ldr	r3, [pc, #208]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004100:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8084 	beq.w	8004212 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004112:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004114:	429a      	cmp	r2, r3
 8004116:	d07c      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004118:	4b2c      	ldr	r3, [pc, #176]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004122:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004126:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412a:	fa93 f3a3 	rbit	r3, r3
 800412e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004132:	fab3 f383 	clz	r3, r3
 8004136:	b2db      	uxtb	r3, r3
 8004138:	461a      	mov	r2, r3
 800413a:	4b26      	ldr	r3, [pc, #152]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	461a      	mov	r2, r3
 8004142:	2301      	movs	r3, #1
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800414a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414e:	fa93 f3a3 	rbit	r3, r3
 8004152:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004156:	fab3 f383 	clz	r3, r3
 800415a:	b2db      	uxtb	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	461a      	mov	r2, r3
 8004166:	2300      	movs	r3, #0
 8004168:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800416a:	4a18      	ldr	r2, [pc, #96]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800416e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d04b      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417a:	f7fc fda3 	bl	8000cc4 <HAL_GetTick>
 800417e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004180:	e00a      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004182:	f7fc fd9f 	bl	8000cc4 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004190:	4293      	cmp	r3, r2
 8004192:	d901      	bls.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e180      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004198:	2302      	movs	r3, #2
 800419a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419e:	fa93 f3a3 	rbit	r3, r3
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
 80041a4:	2302      	movs	r3, #2
 80041a6:	623b      	str	r3, [r7, #32]
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	fa93 f3a3 	rbit	r3, r3
 80041ae:	61fb      	str	r3, [r7, #28]
  return result;
 80041b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b2:	fab3 f383 	clz	r3, r3
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	095b      	lsrs	r3, r3, #5
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f043 0302 	orr.w	r3, r3, #2
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d108      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80041c6:	4b01      	ldr	r3, [pc, #4]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	e00d      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80041cc:	40021000 	.word	0x40021000
 80041d0:	40007000 	.word	0x40007000
 80041d4:	10908100 	.word	0x10908100
 80041d8:	2302      	movs	r3, #2
 80041da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	fa93 f3a3 	rbit	r3, r3
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	4b9a      	ldr	r3, [pc, #616]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	2202      	movs	r2, #2
 80041ea:	613a      	str	r2, [r7, #16]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	fa92 f2a2 	rbit	r2, r2
 80041f2:	60fa      	str	r2, [r7, #12]
  return result;
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	fab2 f282 	clz	r2, r2
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	f002 021f 	and.w	r2, r2, #31
 8004206:	2101      	movs	r1, #1
 8004208:	fa01 f202 	lsl.w	r2, r1, r2
 800420c:	4013      	ands	r3, r2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0b7      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004212:	4b8f      	ldr	r3, [pc, #572]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	498c      	ldr	r1, [pc, #560]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004220:	4313      	orrs	r3, r2
 8004222:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004224:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004228:	2b01      	cmp	r3, #1
 800422a:	d105      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800422c:	4b88      	ldr	r3, [pc, #544]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	4a87      	ldr	r2, [pc, #540]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004236:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004244:	4b82      	ldr	r3, [pc, #520]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	f023 0203 	bic.w	r2, r3, #3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	497f      	ldr	r1, [pc, #508]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004252:	4313      	orrs	r3, r2
 8004254:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d008      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004262:	4b7b      	ldr	r3, [pc, #492]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	4978      	ldr	r1, [pc, #480]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004270:	4313      	orrs	r3, r2
 8004272:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004280:	4b73      	ldr	r3, [pc, #460]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	4970      	ldr	r1, [pc, #448]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800428e:	4313      	orrs	r3, r2
 8004290:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0320 	and.w	r3, r3, #32
 800429a:	2b00      	cmp	r3, #0
 800429c:	d008      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800429e:	4b6c      	ldr	r3, [pc, #432]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	f023 0210 	bic.w	r2, r3, #16
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	4969      	ldr	r1, [pc, #420]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80042bc:	4b64      	ldr	r3, [pc, #400]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c8:	4961      	ldr	r1, [pc, #388]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042da:	4b5d      	ldr	r3, [pc, #372]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	f023 0220 	bic.w	r2, r3, #32
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	495a      	ldr	r1, [pc, #360]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042f8:	4b55      	ldr	r3, [pc, #340]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	4952      	ldr	r1, [pc, #328]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004306:	4313      	orrs	r3, r2
 8004308:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d008      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004316:	4b4e      	ldr	r3, [pc, #312]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	494b      	ldr	r1, [pc, #300]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004324:	4313      	orrs	r3, r2
 8004326:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004334:	4b46      	ldr	r3, [pc, #280]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004338:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	4943      	ldr	r1, [pc, #268]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004342:	4313      	orrs	r3, r2
 8004344:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004352:	4b3f      	ldr	r3, [pc, #252]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	493c      	ldr	r1, [pc, #240]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004360:	4313      	orrs	r3, r2
 8004362:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004370:	4b37      	ldr	r3, [pc, #220]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437c:	4934      	ldr	r1, [pc, #208]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800437e:	4313      	orrs	r3, r2
 8004380:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d008      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800438e:	4b30      	ldr	r3, [pc, #192]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004392:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	492d      	ldr	r1, [pc, #180]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800439c:	4313      	orrs	r3, r2
 800439e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80043ac:	4b28      	ldr	r3, [pc, #160]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b8:	4925      	ldr	r1, [pc, #148]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d008      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80043ca:	4b21      	ldr	r3, [pc, #132]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	491e      	ldr	r1, [pc, #120]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80043e8:	4b19      	ldr	r3, [pc, #100]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f4:	4916      	ldr	r1, [pc, #88]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d008      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004406:	4b12      	ldr	r3, [pc, #72]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004412:	490f      	ldr	r1, [pc, #60]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004414:	4313      	orrs	r3, r2
 8004416:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004424:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004428:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004430:	4907      	ldr	r1, [pc, #28]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004432:	4313      	orrs	r3, r2
 8004434:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00c      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004442:	4b03      	ldr	r3, [pc, #12]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	e002      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000
 8004454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004456:	4913      	ldr	r1, [pc, #76]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004458:	4313      	orrs	r3, r2
 800445a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004468:	4b0e      	ldr	r3, [pc, #56]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004474:	490b      	ldr	r1, [pc, #44]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004476:	4313      	orrs	r3, r2
 8004478:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d008      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004486:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004492:	4904      	ldr	r1, [pc, #16]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004494:	4313      	orrs	r3, r2
 8004496:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3748      	adds	r7, #72	; 0x48
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000

080044a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e0c1      	b.n	800463e <HAL_SPI_Init+0x196>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d108      	bne.n	80044d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ca:	d009      	beq.n	80044e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	61da      	str	r2, [r3, #28]
 80044d2:	e005      	b.n	80044e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d12a      	bne.n	8004548 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a52      	ldr	r2, [pc, #328]	; (8004648 <HAL_SPI_Init+0x1a0>)
 80044fe:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a52      	ldr	r2, [pc, #328]	; (800464c <HAL_SPI_Init+0x1a4>)
 8004504:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a51      	ldr	r2, [pc, #324]	; (8004650 <HAL_SPI_Init+0x1a8>)
 800450a:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a51      	ldr	r2, [pc, #324]	; (8004654 <HAL_SPI_Init+0x1ac>)
 8004510:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a50      	ldr	r2, [pc, #320]	; (8004658 <HAL_SPI_Init+0x1b0>)
 8004516:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a50      	ldr	r2, [pc, #320]	; (800465c <HAL_SPI_Init+0x1b4>)
 800451c:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a4f      	ldr	r2, [pc, #316]	; (8004660 <HAL_SPI_Init+0x1b8>)
 8004522:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a4f      	ldr	r2, [pc, #316]	; (8004664 <HAL_SPI_Init+0x1bc>)
 8004528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004532:	2b00      	cmp	r3, #0
 8004534:	d103      	bne.n	800453e <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a4b      	ldr	r2, [pc, #300]	; (8004668 <HAL_SPI_Init+0x1c0>)
 800453a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800455e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004568:	d902      	bls.n	8004570 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	e002      	b.n	8004576 <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004574:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800457e:	d007      	beq.n	8004590 <HAL_SPI_Init+0xe8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004588:	d002      	beq.n	8004590 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d2:	ea42 0103 	orr.w	r1, r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	0c1b      	lsrs	r3, r3, #16
 80045ec:	f003 0204 	and.w	r2, r3, #4
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800460c:	ea42 0103 	orr.w	r1, r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69da      	ldr	r2, [r3, #28]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800462c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	0800486d 	.word	0x0800486d
 800464c:	08004881 	.word	0x08004881
 8004650:	08004895 	.word	0x08004895
 8004654:	080048a9 	.word	0x080048a9
 8004658:	080048bd 	.word	0x080048bd
 800465c:	080048d1 	.word	0x080048d1
 8004660:	080048e5 	.word	0x080048e5
 8004664:	080048f9 	.word	0x080048f9
 8004668:	080008d1 	.word	0x080008d1

0800466c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	099b      	lsrs	r3, r3, #6
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10f      	bne.n	80046b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	099b      	lsrs	r3, r3, #6
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d004      	beq.n	80046b0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	4798      	blx	r3
    return;
 80046ae:	e0d8      	b.n	8004862 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <HAL_SPI_IRQHandler+0x66>
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	09db      	lsrs	r3, r3, #7
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d004      	beq.n	80046d2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4798      	blx	r3
    return;
 80046d0:	e0c7      	b.n	8004862 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	095b      	lsrs	r3, r3, #5
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10c      	bne.n	80046f8 <HAL_SPI_IRQHandler+0x8c>
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	099b      	lsrs	r3, r3, #6
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	0a1b      	lsrs	r3, r3, #8
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 80b5 	beq.w	8004862 <HAL_SPI_IRQHandler+0x1f6>
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	095b      	lsrs	r3, r3, #5
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 80ae 	beq.w	8004862 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	099b      	lsrs	r3, r3, #6
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d023      	beq.n	800475a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b03      	cmp	r3, #3
 800471c:	d011      	beq.n	8004742 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004722:	f043 0204 	orr.w	r2, r3, #4
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	e00b      	b.n	800475a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	693b      	ldr	r3, [r7, #16]
        return;
 8004758:	e083      	b.n	8004862 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d014      	beq.n	8004790 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476a:	f043 0201 	orr.w	r2, r3, #1
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00c      	beq.n	80047b6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a0:	f043 0208 	orr.w	r2, r3, #8
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80047a8:	2300      	movs	r3, #0
 80047aa:	60bb      	str	r3, [r7, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	60bb      	str	r3, [r7, #8]
 80047b4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d050      	beq.n	8004860 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047cc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d104      	bne.n	80047ea <HAL_SPI_IRQHandler+0x17e>
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d034      	beq.n	8004854 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0203 	bic.w	r2, r2, #3
 80047f8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d011      	beq.n	8004826 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004806:	4a18      	ldr	r2, [pc, #96]	; (8004868 <HAL_SPI_IRQHandler+0x1fc>)
 8004808:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480e:	4618      	mov	r0, r3
 8004810:	f7fd fdaa 	bl	8002368 <HAL_DMA_Abort_IT>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d005      	beq.n	8004826 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800481e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482a:	2b00      	cmp	r3, #0
 800482c:	d017      	beq.n	800485e <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004832:	4a0d      	ldr	r2, [pc, #52]	; (8004868 <HAL_SPI_IRQHandler+0x1fc>)
 8004834:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483a:	4618      	mov	r0, r3
 800483c:	f7fd fd94 	bl	8002368 <HAL_DMA_Abort_IT>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00b      	beq.n	800485e <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004852:	e004      	b.n	800485e <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800485c:	e000      	b.n	8004860 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 800485e:	bf00      	nop
    return;
 8004860:	bf00      	nop
  }
}
 8004862:	3720      	adds	r7, #32
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	0800490d 	.word	0x0800490d

0800486c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004930:	bf00      	nop
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e049      	b.n	80049de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fc f802 	bl	8000968 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3304      	adds	r3, #4
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f000 fab6 	bl	8004ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d001      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e04f      	b.n	8004aa0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a23      	ldr	r2, [pc, #140]	; (8004aac <HAL_TIM_Base_Start_IT+0xc4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d01d      	beq.n	8004a5e <HAL_TIM_Base_Start_IT+0x76>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2a:	d018      	beq.n	8004a5e <HAL_TIM_Base_Start_IT+0x76>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a1f      	ldr	r2, [pc, #124]	; (8004ab0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d013      	beq.n	8004a5e <HAL_TIM_Base_Start_IT+0x76>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a1e      	ldr	r2, [pc, #120]	; (8004ab4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00e      	beq.n	8004a5e <HAL_TIM_Base_Start_IT+0x76>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1c      	ldr	r2, [pc, #112]	; (8004ab8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d009      	beq.n	8004a5e <HAL_TIM_Base_Start_IT+0x76>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1b      	ldr	r2, [pc, #108]	; (8004abc <HAL_TIM_Base_Start_IT+0xd4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d004      	beq.n	8004a5e <HAL_TIM_Base_Start_IT+0x76>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a19      	ldr	r2, [pc, #100]	; (8004ac0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d115      	bne.n	8004a8a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	4b17      	ldr	r3, [pc, #92]	; (8004ac4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b06      	cmp	r3, #6
 8004a6e:	d015      	beq.n	8004a9c <HAL_TIM_Base_Start_IT+0xb4>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a76:	d011      	beq.n	8004a9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a88:	e008      	b.n	8004a9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0201 	orr.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	e000      	b.n	8004a9e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	40012c00 	.word	0x40012c00
 8004ab0:	40000400 	.word	0x40000400
 8004ab4:	40000800 	.word	0x40000800
 8004ab8:	40013400 	.word	0x40013400
 8004abc:	40014000 	.word	0x40014000
 8004ac0:	40015000 	.word	0x40015000
 8004ac4:	00010007 	.word	0x00010007

08004ac8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d122      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d11b      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0202 	mvn.w	r2, #2
 8004af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f9ce 	bl	8004eac <HAL_TIM_IC_CaptureCallback>
 8004b10:	e005      	b.n	8004b1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f9c0 	bl	8004e98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f9d1 	bl	8004ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f003 0304 	and.w	r3, r3, #4
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d122      	bne.n	8004b78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	d11b      	bne.n	8004b78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0204 	mvn.w	r2, #4
 8004b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f9a4 	bl	8004eac <HAL_TIM_IC_CaptureCallback>
 8004b64:	e005      	b.n	8004b72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f996 	bl	8004e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f9a7 	bl	8004ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d122      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d11b      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0208 	mvn.w	r2, #8
 8004b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f97a 	bl	8004eac <HAL_TIM_IC_CaptureCallback>
 8004bb8:	e005      	b.n	8004bc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f96c 	bl	8004e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f97d 	bl	8004ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0310 	and.w	r3, r3, #16
 8004bd6:	2b10      	cmp	r3, #16
 8004bd8:	d122      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0310 	and.w	r3, r3, #16
 8004be4:	2b10      	cmp	r3, #16
 8004be6:	d11b      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0210 	mvn.w	r2, #16
 8004bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2208      	movs	r2, #8
 8004bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f950 	bl	8004eac <HAL_TIM_IC_CaptureCallback>
 8004c0c:	e005      	b.n	8004c1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f942 	bl	8004e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f953 	bl	8004ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d10e      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d107      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0201 	mvn.w	r2, #1
 8004c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fb fd74 	bl	8000734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c56:	2b80      	cmp	r3, #128	; 0x80
 8004c58:	d10e      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c64:	2b80      	cmp	r3, #128	; 0x80
 8004c66:	d107      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fb06 	bl	8005284 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c86:	d10e      	bne.n	8004ca6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c92:	2b80      	cmp	r3, #128	; 0x80
 8004c94:	d107      	bne.n	8004ca6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 faf9 	bl	8005298 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb0:	2b40      	cmp	r3, #64	; 0x40
 8004cb2:	d10e      	bne.n	8004cd2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbe:	2b40      	cmp	r3, #64	; 0x40
 8004cc0:	d107      	bne.n	8004cd2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f901 	bl	8004ed4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f003 0320 	and.w	r3, r3, #32
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d10e      	bne.n	8004cfe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	d107      	bne.n	8004cfe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f06f 0220 	mvn.w	r2, #32
 8004cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fab9 	bl	8005270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cfe:	bf00      	nop
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_TIM_ConfigClockSource+0x1c>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e0b6      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x18a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d40:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d44:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d4c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d5e:	d03e      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0xd8>
 8004d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d64:	f200 8087 	bhi.w	8004e76 <HAL_TIM_ConfigClockSource+0x170>
 8004d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6c:	f000 8086 	beq.w	8004e7c <HAL_TIM_ConfigClockSource+0x176>
 8004d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d74:	d87f      	bhi.n	8004e76 <HAL_TIM_ConfigClockSource+0x170>
 8004d76:	2b70      	cmp	r3, #112	; 0x70
 8004d78:	d01a      	beq.n	8004db0 <HAL_TIM_ConfigClockSource+0xaa>
 8004d7a:	2b70      	cmp	r3, #112	; 0x70
 8004d7c:	d87b      	bhi.n	8004e76 <HAL_TIM_ConfigClockSource+0x170>
 8004d7e:	2b60      	cmp	r3, #96	; 0x60
 8004d80:	d050      	beq.n	8004e24 <HAL_TIM_ConfigClockSource+0x11e>
 8004d82:	2b60      	cmp	r3, #96	; 0x60
 8004d84:	d877      	bhi.n	8004e76 <HAL_TIM_ConfigClockSource+0x170>
 8004d86:	2b50      	cmp	r3, #80	; 0x50
 8004d88:	d03c      	beq.n	8004e04 <HAL_TIM_ConfigClockSource+0xfe>
 8004d8a:	2b50      	cmp	r3, #80	; 0x50
 8004d8c:	d873      	bhi.n	8004e76 <HAL_TIM_ConfigClockSource+0x170>
 8004d8e:	2b40      	cmp	r3, #64	; 0x40
 8004d90:	d058      	beq.n	8004e44 <HAL_TIM_ConfigClockSource+0x13e>
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d86f      	bhi.n	8004e76 <HAL_TIM_ConfigClockSource+0x170>
 8004d96:	2b30      	cmp	r3, #48	; 0x30
 8004d98:	d064      	beq.n	8004e64 <HAL_TIM_ConfigClockSource+0x15e>
 8004d9a:	2b30      	cmp	r3, #48	; 0x30
 8004d9c:	d86b      	bhi.n	8004e76 <HAL_TIM_ConfigClockSource+0x170>
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d060      	beq.n	8004e64 <HAL_TIM_ConfigClockSource+0x15e>
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	d867      	bhi.n	8004e76 <HAL_TIM_ConfigClockSource+0x170>
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d05c      	beq.n	8004e64 <HAL_TIM_ConfigClockSource+0x15e>
 8004daa:	2b10      	cmp	r3, #16
 8004dac:	d05a      	beq.n	8004e64 <HAL_TIM_ConfigClockSource+0x15e>
 8004dae:	e062      	b.n	8004e76 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	6899      	ldr	r1, [r3, #8]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f000 f9aa 	bl	8005118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dd2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	609a      	str	r2, [r3, #8]
      break;
 8004ddc:	e04f      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6899      	ldr	r1, [r3, #8]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f000 f993 	bl	8005118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e00:	609a      	str	r2, [r3, #8]
      break;
 8004e02:	e03c      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	6859      	ldr	r1, [r3, #4]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	461a      	mov	r2, r3
 8004e12:	f000 f907 	bl	8005024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2150      	movs	r1, #80	; 0x50
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 f960 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004e22:	e02c      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6818      	ldr	r0, [r3, #0]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	6859      	ldr	r1, [r3, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	461a      	mov	r2, r3
 8004e32:	f000 f926 	bl	8005082 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2160      	movs	r1, #96	; 0x60
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 f950 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004e42:	e01c      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	6859      	ldr	r1, [r3, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	461a      	mov	r2, r3
 8004e52:	f000 f8e7 	bl	8005024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2140      	movs	r1, #64	; 0x40
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 f940 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004e62:	e00c      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	4610      	mov	r0, r2
 8004e70:	f000 f937 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004e74:	e003      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	73fb      	strb	r3, [r7, #15]
      break;
 8004e7a:	e000      	b.n	8004e7e <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004e7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a42      	ldr	r2, [pc, #264]	; (8005004 <TIM_Base_SetConfig+0x11c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d013      	beq.n	8004f28 <TIM_Base_SetConfig+0x40>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f06:	d00f      	beq.n	8004f28 <TIM_Base_SetConfig+0x40>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a3f      	ldr	r2, [pc, #252]	; (8005008 <TIM_Base_SetConfig+0x120>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00b      	beq.n	8004f28 <TIM_Base_SetConfig+0x40>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a3e      	ldr	r2, [pc, #248]	; (800500c <TIM_Base_SetConfig+0x124>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d007      	beq.n	8004f28 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a3d      	ldr	r2, [pc, #244]	; (8005010 <TIM_Base_SetConfig+0x128>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d003      	beq.n	8004f28 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a3c      	ldr	r2, [pc, #240]	; (8005014 <TIM_Base_SetConfig+0x12c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d108      	bne.n	8004f3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a31      	ldr	r2, [pc, #196]	; (8005004 <TIM_Base_SetConfig+0x11c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d01f      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f48:	d01b      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a2e      	ldr	r2, [pc, #184]	; (8005008 <TIM_Base_SetConfig+0x120>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d017      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a2d      	ldr	r2, [pc, #180]	; (800500c <TIM_Base_SetConfig+0x124>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a2c      	ldr	r2, [pc, #176]	; (8005010 <TIM_Base_SetConfig+0x128>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00f      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a2c      	ldr	r2, [pc, #176]	; (8005018 <TIM_Base_SetConfig+0x130>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00b      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2b      	ldr	r2, [pc, #172]	; (800501c <TIM_Base_SetConfig+0x134>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d007      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a2a      	ldr	r2, [pc, #168]	; (8005020 <TIM_Base_SetConfig+0x138>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d003      	beq.n	8004f82 <TIM_Base_SetConfig+0x9a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a25      	ldr	r2, [pc, #148]	; (8005014 <TIM_Base_SetConfig+0x12c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d108      	bne.n	8004f94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a12      	ldr	r2, [pc, #72]	; (8005004 <TIM_Base_SetConfig+0x11c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d013      	beq.n	8004fe8 <TIM_Base_SetConfig+0x100>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a13      	ldr	r2, [pc, #76]	; (8005010 <TIM_Base_SetConfig+0x128>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00f      	beq.n	8004fe8 <TIM_Base_SetConfig+0x100>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a13      	ldr	r2, [pc, #76]	; (8005018 <TIM_Base_SetConfig+0x130>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00b      	beq.n	8004fe8 <TIM_Base_SetConfig+0x100>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a12      	ldr	r2, [pc, #72]	; (800501c <TIM_Base_SetConfig+0x134>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d007      	beq.n	8004fe8 <TIM_Base_SetConfig+0x100>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a11      	ldr	r2, [pc, #68]	; (8005020 <TIM_Base_SetConfig+0x138>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <TIM_Base_SetConfig+0x100>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a0c      	ldr	r2, [pc, #48]	; (8005014 <TIM_Base_SetConfig+0x12c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d103      	bne.n	8004ff0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	615a      	str	r2, [r3, #20]
}
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40012c00 	.word	0x40012c00
 8005008:	40000400 	.word	0x40000400
 800500c:	40000800 	.word	0x40000800
 8005010:	40013400 	.word	0x40013400
 8005014:	40015000 	.word	0x40015000
 8005018:	40014000 	.word	0x40014000
 800501c:	40014400 	.word	0x40014400
 8005020:	40014800 	.word	0x40014800

08005024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	f023 0201 	bic.w	r2, r3, #1
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800504e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4313      	orrs	r3, r2
 8005058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f023 030a 	bic.w	r3, r3, #10
 8005060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005082:	b480      	push	{r7}
 8005084:	b087      	sub	sp, #28
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	f023 0210 	bic.w	r2, r3, #16
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	031b      	lsls	r3, r3, #12
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	621a      	str	r2, [r3, #32]
}
 80050d6:	bf00      	nop
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b085      	sub	sp, #20
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	f043 0307 	orr.w	r3, r3, #7
 8005104:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	609a      	str	r2, [r3, #8]
}
 800510c:	bf00      	nop
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	021a      	lsls	r2, r3, #8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	431a      	orrs	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4313      	orrs	r3, r2
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	609a      	str	r2, [r3, #8]
}
 800514c:	bf00      	nop
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800516c:	2302      	movs	r3, #2
 800516e:	e06d      	b.n	800524c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a30      	ldr	r2, [pc, #192]	; (8005258 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d009      	beq.n	80051ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a2f      	ldr	r2, [pc, #188]	; (800525c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d004      	beq.n	80051ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a2d      	ldr	r2, [pc, #180]	; (8005260 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d108      	bne.n	80051c0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a1e      	ldr	r2, [pc, #120]	; (8005258 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d01d      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ec:	d018      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1c      	ldr	r2, [pc, #112]	; (8005264 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d013      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a1a      	ldr	r2, [pc, #104]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00e      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a15      	ldr	r2, [pc, #84]	; (800525c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d009      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a16      	ldr	r2, [pc, #88]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d004      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a11      	ldr	r2, [pc, #68]	; (8005260 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d10c      	bne.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005226:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	4313      	orrs	r3, r2
 8005230:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	40012c00 	.word	0x40012c00
 800525c:	40013400 	.word	0x40013400
 8005260:	40015000 	.word	0x40015000
 8005264:	40000400 	.word	0x40000400
 8005268:	40000800 	.word	0x40000800
 800526c:	40014000 	.word	0x40014000

08005270 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e040      	b.n	8005340 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d106      	bne.n	80052d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fb fb70 	bl	80009b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2224      	movs	r2, #36	; 0x24
 80052d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0201 	bic.w	r2, r2, #1
 80052e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fb2a 	bl	8005944 <UART_SetConfig>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e022      	b.n	8005340 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fcf4 	bl	8005cf0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005316:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689a      	ldr	r2, [r3, #8]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005326:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fd7b 	bl	8005e34 <UART_CheckIdleState>
 800533e:	4603      	mov	r3, r0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b0ba      	sub	sp, #232	; 0xe8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800536e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005372:	f640 030f 	movw	r3, #2063	; 0x80f
 8005376:	4013      	ands	r3, r2
 8005378:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800537c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005380:	2b00      	cmp	r3, #0
 8005382:	d115      	bne.n	80053b0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00f      	beq.n	80053b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005394:	f003 0320 	and.w	r3, r3, #32
 8005398:	2b00      	cmp	r3, #0
 800539a:	d009      	beq.n	80053b0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 82a3 	beq.w	80058ec <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	4798      	blx	r3
      }
      return;
 80053ae:	e29d      	b.n	80058ec <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80053b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 8117 	beq.w	80055e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80053ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d106      	bne.n	80053d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80053c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80053ca:	4b85      	ldr	r3, [pc, #532]	; (80055e0 <HAL_UART_IRQHandler+0x298>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 810a 	beq.w	80055e8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d011      	beq.n	8005404 <HAL_UART_IRQHandler+0xbc>
 80053e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00b      	beq.n	8005404 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2201      	movs	r2, #1
 80053f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053fa:	f043 0201 	orr.w	r2, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d011      	beq.n	8005434 <HAL_UART_IRQHandler+0xec>
 8005410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00b      	beq.n	8005434 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2202      	movs	r2, #2
 8005422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800542a:	f043 0204 	orr.w	r2, r3, #4
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	d011      	beq.n	8005464 <HAL_UART_IRQHandler+0x11c>
 8005440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00b      	beq.n	8005464 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2204      	movs	r2, #4
 8005452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800545a:	f043 0202 	orr.w	r2, r3, #2
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b00      	cmp	r3, #0
 800546e:	d017      	beq.n	80054a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005474:	f003 0320 	and.w	r3, r3, #32
 8005478:	2b00      	cmp	r3, #0
 800547a:	d105      	bne.n	8005488 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800547c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005480:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00b      	beq.n	80054a0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2208      	movs	r2, #8
 800548e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005496:	f043 0208 	orr.w	r2, r3, #8
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d012      	beq.n	80054d2 <HAL_UART_IRQHandler+0x18a>
 80054ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00c      	beq.n	80054d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054c8:	f043 0220 	orr.w	r2, r3, #32
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 8209 	beq.w	80058f0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80054de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00d      	beq.n	8005506 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d007      	beq.n	8005506 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800550c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551a:	2b40      	cmp	r3, #64	; 0x40
 800551c:	d005      	beq.n	800552a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800551e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005522:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005526:	2b00      	cmp	r3, #0
 8005528:	d04f      	beq.n	80055ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fd8f 	bl	800604e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553a:	2b40      	cmp	r3, #64	; 0x40
 800553c:	d141      	bne.n	80055c2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3308      	adds	r3, #8
 8005544:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005554:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800555c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3308      	adds	r3, #8
 8005566:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800556a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800556e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005572:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005576:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005582:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1d9      	bne.n	800553e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558e:	2b00      	cmp	r3, #0
 8005590:	d013      	beq.n	80055ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005596:	4a13      	ldr	r2, [pc, #76]	; (80055e4 <HAL_UART_IRQHandler+0x29c>)
 8005598:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fc fee2 	bl	8002368 <HAL_DMA_Abort_IT>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d017      	beq.n	80055da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80055b4:	4610      	mov	r0, r2
 80055b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b8:	e00f      	b.n	80055da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f9ac 	bl	8005918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c0:	e00b      	b.n	80055da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f9a8 	bl	8005918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c8:	e007      	b.n	80055da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f9a4 	bl	8005918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80055d8:	e18a      	b.n	80058f0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055da:	bf00      	nop
    return;
 80055dc:	e188      	b.n	80058f0 <HAL_UART_IRQHandler+0x5a8>
 80055de:	bf00      	nop
 80055e0:	04000120 	.word	0x04000120
 80055e4:	08006115 	.word	0x08006115

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	f040 8143 	bne.w	8005878 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f6:	f003 0310 	and.w	r3, r3, #16
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 813c 	beq.w	8005878 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 8135 	beq.w	8005878 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2210      	movs	r2, #16
 8005614:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005620:	2b40      	cmp	r3, #64	; 0x40
 8005622:	f040 80b1 	bne.w	8005788 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005632:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 815c 	beq.w	80058f4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005646:	429a      	cmp	r2, r3
 8005648:	f080 8154 	bcs.w	80058f4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005652:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	2b20      	cmp	r3, #32
 800565e:	f000 8085 	beq.w	800576c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005676:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800567a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800567e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800568c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005690:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005694:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005698:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800569c:	e841 2300 	strex	r3, r2, [r1]
 80056a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80056a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1da      	bne.n	8005662 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3308      	adds	r3, #8
 80056b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056be:	f023 0301 	bic.w	r3, r3, #1
 80056c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3308      	adds	r3, #8
 80056cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056dc:	e841 2300 	strex	r3, r2, [r1]
 80056e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e1      	bne.n	80056ac <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3308      	adds	r3, #8
 80056ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056f2:	e853 3f00 	ldrex	r3, [r3]
 80056f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3308      	adds	r3, #8
 8005708:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800570c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800570e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005712:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800571a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e3      	bne.n	80056e8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800573a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800573c:	f023 0310 	bic.w	r3, r3, #16
 8005740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800574e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005750:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005754:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800575c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1e4      	bne.n	800572c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005766:	4618      	mov	r0, r3
 8005768:	f7fc fdc5 	bl	80022f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005778:	b29b      	uxth	r3, r3
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	b29b      	uxth	r3, r3
 800577e:	4619      	mov	r1, r3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f8d3 	bl	800592c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005786:	e0b5      	b.n	80058f4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005794:	b29b      	uxth	r3, r3
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80a7 	beq.w	80058f8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80057aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 80a2 	beq.w	80058f8 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	461a      	mov	r2, r3
 80057d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057d6:	647b      	str	r3, [r7, #68]	; 0x44
 80057d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057de:	e841 2300 	strex	r3, r2, [r1]
 80057e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1e4      	bne.n	80057b4 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3308      	adds	r3, #8
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	e853 3f00 	ldrex	r3, [r3]
 80057f8:	623b      	str	r3, [r7, #32]
   return(result);
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	f023 0301 	bic.w	r3, r3, #1
 8005800:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3308      	adds	r3, #8
 800580a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800580e:	633a      	str	r2, [r7, #48]	; 0x30
 8005810:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800581c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e3      	bne.n	80057ea <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2220      	movs	r2, #32
 8005826:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	60fb      	str	r3, [r7, #12]
   return(result);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f023 0310 	bic.w	r3, r3, #16
 8005848:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005856:	61fb      	str	r3, [r7, #28]
 8005858:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	69b9      	ldr	r1, [r7, #24]
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	617b      	str	r3, [r7, #20]
   return(result);
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e4      	bne.n	8005834 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800586a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800586e:	4619      	mov	r1, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f85b 	bl	800592c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005876:	e03f      	b.n	80058f8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00e      	beq.n	80058a2 <HAL_UART_IRQHandler+0x55a>
 8005884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d008      	beq.n	80058a2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005898:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fc7a 	bl	8006194 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058a0:	e02d      	b.n	80058fe <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80058a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00e      	beq.n	80058cc <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80058ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d008      	beq.n	80058cc <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d01c      	beq.n	80058fc <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	4798      	blx	r3
    }
    return;
 80058ca:	e017      	b.n	80058fc <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d012      	beq.n	80058fe <HAL_UART_IRQHandler+0x5b6>
 80058d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00c      	beq.n	80058fe <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fc2b 	bl	8006140 <UART_EndTransmit_IT>
    return;
 80058ea:	e008      	b.n	80058fe <HAL_UART_IRQHandler+0x5b6>
      return;
 80058ec:	bf00      	nop
 80058ee:	e006      	b.n	80058fe <HAL_UART_IRQHandler+0x5b6>
    return;
 80058f0:	bf00      	nop
 80058f2:	e004      	b.n	80058fe <HAL_UART_IRQHandler+0x5b6>
      return;
 80058f4:	bf00      	nop
 80058f6:	e002      	b.n	80058fe <HAL_UART_IRQHandler+0x5b6>
      return;
 80058f8:	bf00      	nop
 80058fa:	e000      	b.n	80058fe <HAL_UART_IRQHandler+0x5b6>
    return;
 80058fc:	bf00      	nop
  }

}
 80058fe:	37e8      	adds	r7, #232	; 0xe8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	4b92      	ldr	r3, [pc, #584]	; (8005bb8 <UART_SetConfig+0x274>)
 8005970:	4013      	ands	r3, r2
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	6979      	ldr	r1, [r7, #20]
 8005978:	430b      	orrs	r3, r1
 800597a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	4313      	orrs	r3, r2
 80059a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a80      	ldr	r2, [pc, #512]	; (8005bbc <UART_SetConfig+0x278>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d120      	bne.n	8005a02 <UART_SetConfig+0xbe>
 80059c0:	4b7f      	ldr	r3, [pc, #508]	; (8005bc0 <UART_SetConfig+0x27c>)
 80059c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d817      	bhi.n	80059fc <UART_SetConfig+0xb8>
 80059cc:	a201      	add	r2, pc, #4	; (adr r2, 80059d4 <UART_SetConfig+0x90>)
 80059ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d2:	bf00      	nop
 80059d4:	080059e5 	.word	0x080059e5
 80059d8:	080059f1 	.word	0x080059f1
 80059dc:	080059f7 	.word	0x080059f7
 80059e0:	080059eb 	.word	0x080059eb
 80059e4:	2301      	movs	r3, #1
 80059e6:	77fb      	strb	r3, [r7, #31]
 80059e8:	e0b5      	b.n	8005b56 <UART_SetConfig+0x212>
 80059ea:	2302      	movs	r3, #2
 80059ec:	77fb      	strb	r3, [r7, #31]
 80059ee:	e0b2      	b.n	8005b56 <UART_SetConfig+0x212>
 80059f0:	2304      	movs	r3, #4
 80059f2:	77fb      	strb	r3, [r7, #31]
 80059f4:	e0af      	b.n	8005b56 <UART_SetConfig+0x212>
 80059f6:	2308      	movs	r3, #8
 80059f8:	77fb      	strb	r3, [r7, #31]
 80059fa:	e0ac      	b.n	8005b56 <UART_SetConfig+0x212>
 80059fc:	2310      	movs	r3, #16
 80059fe:	77fb      	strb	r3, [r7, #31]
 8005a00:	e0a9      	b.n	8005b56 <UART_SetConfig+0x212>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a6f      	ldr	r2, [pc, #444]	; (8005bc4 <UART_SetConfig+0x280>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d124      	bne.n	8005a56 <UART_SetConfig+0x112>
 8005a0c:	4b6c      	ldr	r3, [pc, #432]	; (8005bc0 <UART_SetConfig+0x27c>)
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a18:	d011      	beq.n	8005a3e <UART_SetConfig+0xfa>
 8005a1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a1e:	d817      	bhi.n	8005a50 <UART_SetConfig+0x10c>
 8005a20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a24:	d011      	beq.n	8005a4a <UART_SetConfig+0x106>
 8005a26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a2a:	d811      	bhi.n	8005a50 <UART_SetConfig+0x10c>
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <UART_SetConfig+0xf4>
 8005a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a34:	d006      	beq.n	8005a44 <UART_SetConfig+0x100>
 8005a36:	e00b      	b.n	8005a50 <UART_SetConfig+0x10c>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	77fb      	strb	r3, [r7, #31]
 8005a3c:	e08b      	b.n	8005b56 <UART_SetConfig+0x212>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	77fb      	strb	r3, [r7, #31]
 8005a42:	e088      	b.n	8005b56 <UART_SetConfig+0x212>
 8005a44:	2304      	movs	r3, #4
 8005a46:	77fb      	strb	r3, [r7, #31]
 8005a48:	e085      	b.n	8005b56 <UART_SetConfig+0x212>
 8005a4a:	2308      	movs	r3, #8
 8005a4c:	77fb      	strb	r3, [r7, #31]
 8005a4e:	e082      	b.n	8005b56 <UART_SetConfig+0x212>
 8005a50:	2310      	movs	r3, #16
 8005a52:	77fb      	strb	r3, [r7, #31]
 8005a54:	e07f      	b.n	8005b56 <UART_SetConfig+0x212>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a5b      	ldr	r2, [pc, #364]	; (8005bc8 <UART_SetConfig+0x284>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d124      	bne.n	8005aaa <UART_SetConfig+0x166>
 8005a60:	4b57      	ldr	r3, [pc, #348]	; (8005bc0 <UART_SetConfig+0x27c>)
 8005a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a64:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005a68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005a6c:	d011      	beq.n	8005a92 <UART_SetConfig+0x14e>
 8005a6e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005a72:	d817      	bhi.n	8005aa4 <UART_SetConfig+0x160>
 8005a74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a78:	d011      	beq.n	8005a9e <UART_SetConfig+0x15a>
 8005a7a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a7e:	d811      	bhi.n	8005aa4 <UART_SetConfig+0x160>
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <UART_SetConfig+0x148>
 8005a84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a88:	d006      	beq.n	8005a98 <UART_SetConfig+0x154>
 8005a8a:	e00b      	b.n	8005aa4 <UART_SetConfig+0x160>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	77fb      	strb	r3, [r7, #31]
 8005a90:	e061      	b.n	8005b56 <UART_SetConfig+0x212>
 8005a92:	2302      	movs	r3, #2
 8005a94:	77fb      	strb	r3, [r7, #31]
 8005a96:	e05e      	b.n	8005b56 <UART_SetConfig+0x212>
 8005a98:	2304      	movs	r3, #4
 8005a9a:	77fb      	strb	r3, [r7, #31]
 8005a9c:	e05b      	b.n	8005b56 <UART_SetConfig+0x212>
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	77fb      	strb	r3, [r7, #31]
 8005aa2:	e058      	b.n	8005b56 <UART_SetConfig+0x212>
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	77fb      	strb	r3, [r7, #31]
 8005aa8:	e055      	b.n	8005b56 <UART_SetConfig+0x212>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a47      	ldr	r2, [pc, #284]	; (8005bcc <UART_SetConfig+0x288>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d124      	bne.n	8005afe <UART_SetConfig+0x1ba>
 8005ab4:	4b42      	ldr	r3, [pc, #264]	; (8005bc0 <UART_SetConfig+0x27c>)
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005abc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ac0:	d011      	beq.n	8005ae6 <UART_SetConfig+0x1a2>
 8005ac2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ac6:	d817      	bhi.n	8005af8 <UART_SetConfig+0x1b4>
 8005ac8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005acc:	d011      	beq.n	8005af2 <UART_SetConfig+0x1ae>
 8005ace:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ad2:	d811      	bhi.n	8005af8 <UART_SetConfig+0x1b4>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <UART_SetConfig+0x19c>
 8005ad8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005adc:	d006      	beq.n	8005aec <UART_SetConfig+0x1a8>
 8005ade:	e00b      	b.n	8005af8 <UART_SetConfig+0x1b4>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	77fb      	strb	r3, [r7, #31]
 8005ae4:	e037      	b.n	8005b56 <UART_SetConfig+0x212>
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	77fb      	strb	r3, [r7, #31]
 8005aea:	e034      	b.n	8005b56 <UART_SetConfig+0x212>
 8005aec:	2304      	movs	r3, #4
 8005aee:	77fb      	strb	r3, [r7, #31]
 8005af0:	e031      	b.n	8005b56 <UART_SetConfig+0x212>
 8005af2:	2308      	movs	r3, #8
 8005af4:	77fb      	strb	r3, [r7, #31]
 8005af6:	e02e      	b.n	8005b56 <UART_SetConfig+0x212>
 8005af8:	2310      	movs	r3, #16
 8005afa:	77fb      	strb	r3, [r7, #31]
 8005afc:	e02b      	b.n	8005b56 <UART_SetConfig+0x212>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a33      	ldr	r2, [pc, #204]	; (8005bd0 <UART_SetConfig+0x28c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d124      	bne.n	8005b52 <UART_SetConfig+0x20e>
 8005b08:	4b2d      	ldr	r3, [pc, #180]	; (8005bc0 <UART_SetConfig+0x27c>)
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005b10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b14:	d011      	beq.n	8005b3a <UART_SetConfig+0x1f6>
 8005b16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b1a:	d817      	bhi.n	8005b4c <UART_SetConfig+0x208>
 8005b1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b20:	d011      	beq.n	8005b46 <UART_SetConfig+0x202>
 8005b22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b26:	d811      	bhi.n	8005b4c <UART_SetConfig+0x208>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <UART_SetConfig+0x1f0>
 8005b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b30:	d006      	beq.n	8005b40 <UART_SetConfig+0x1fc>
 8005b32:	e00b      	b.n	8005b4c <UART_SetConfig+0x208>
 8005b34:	2300      	movs	r3, #0
 8005b36:	77fb      	strb	r3, [r7, #31]
 8005b38:	e00d      	b.n	8005b56 <UART_SetConfig+0x212>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	77fb      	strb	r3, [r7, #31]
 8005b3e:	e00a      	b.n	8005b56 <UART_SetConfig+0x212>
 8005b40:	2304      	movs	r3, #4
 8005b42:	77fb      	strb	r3, [r7, #31]
 8005b44:	e007      	b.n	8005b56 <UART_SetConfig+0x212>
 8005b46:	2308      	movs	r3, #8
 8005b48:	77fb      	strb	r3, [r7, #31]
 8005b4a:	e004      	b.n	8005b56 <UART_SetConfig+0x212>
 8005b4c:	2310      	movs	r3, #16
 8005b4e:	77fb      	strb	r3, [r7, #31]
 8005b50:	e001      	b.n	8005b56 <UART_SetConfig+0x212>
 8005b52:	2310      	movs	r3, #16
 8005b54:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b5e:	d16c      	bne.n	8005c3a <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8005b60:	7ffb      	ldrb	r3, [r7, #31]
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d838      	bhi.n	8005bd8 <UART_SetConfig+0x294>
 8005b66:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <UART_SetConfig+0x228>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005b91 	.word	0x08005b91
 8005b70:	08005b99 	.word	0x08005b99
 8005b74:	08005ba1 	.word	0x08005ba1
 8005b78:	08005bd9 	.word	0x08005bd9
 8005b7c:	08005ba7 	.word	0x08005ba7
 8005b80:	08005bd9 	.word	0x08005bd9
 8005b84:	08005bd9 	.word	0x08005bd9
 8005b88:	08005bd9 	.word	0x08005bd9
 8005b8c:	08005baf 	.word	0x08005baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b90:	f7fe fa28 	bl	8003fe4 <HAL_RCC_GetPCLK1Freq>
 8005b94:	61b8      	str	r0, [r7, #24]
        break;
 8005b96:	e024      	b.n	8005be2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b98:	f7fe fa46 	bl	8004028 <HAL_RCC_GetPCLK2Freq>
 8005b9c:	61b8      	str	r0, [r7, #24]
        break;
 8005b9e:	e020      	b.n	8005be2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ba0:	4b0c      	ldr	r3, [pc, #48]	; (8005bd4 <UART_SetConfig+0x290>)
 8005ba2:	61bb      	str	r3, [r7, #24]
        break;
 8005ba4:	e01d      	b.n	8005be2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ba6:	f7fe f9a7 	bl	8003ef8 <HAL_RCC_GetSysClockFreq>
 8005baa:	61b8      	str	r0, [r7, #24]
        break;
 8005bac:	e019      	b.n	8005be2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bb2:	61bb      	str	r3, [r7, #24]
        break;
 8005bb4:	e015      	b.n	8005be2 <UART_SetConfig+0x29e>
 8005bb6:	bf00      	nop
 8005bb8:	efff69f3 	.word	0xefff69f3
 8005bbc:	40013800 	.word	0x40013800
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	40004400 	.word	0x40004400
 8005bc8:	40004800 	.word	0x40004800
 8005bcc:	40004c00 	.word	0x40004c00
 8005bd0:	40005000 	.word	0x40005000
 8005bd4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	77bb      	strb	r3, [r7, #30]
        break;
 8005be0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d075      	beq.n	8005cd4 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	005a      	lsls	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	085b      	lsrs	r3, r3, #1
 8005bf2:	441a      	add	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	2b0f      	cmp	r3, #15
 8005c04:	d916      	bls.n	8005c34 <UART_SetConfig+0x2f0>
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c0c:	d212      	bcs.n	8005c34 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	f023 030f 	bic.w	r3, r3, #15
 8005c16:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	085b      	lsrs	r3, r3, #1
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	89fb      	ldrh	r3, [r7, #14]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	89fa      	ldrh	r2, [r7, #14]
 8005c30:	60da      	str	r2, [r3, #12]
 8005c32:	e04f      	b.n	8005cd4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	77bb      	strb	r3, [r7, #30]
 8005c38:	e04c      	b.n	8005cd4 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c3a:	7ffb      	ldrb	r3, [r7, #31]
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d828      	bhi.n	8005c92 <UART_SetConfig+0x34e>
 8005c40:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <UART_SetConfig+0x304>)
 8005c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c46:	bf00      	nop
 8005c48:	08005c6d 	.word	0x08005c6d
 8005c4c:	08005c75 	.word	0x08005c75
 8005c50:	08005c7d 	.word	0x08005c7d
 8005c54:	08005c93 	.word	0x08005c93
 8005c58:	08005c83 	.word	0x08005c83
 8005c5c:	08005c93 	.word	0x08005c93
 8005c60:	08005c93 	.word	0x08005c93
 8005c64:	08005c93 	.word	0x08005c93
 8005c68:	08005c8b 	.word	0x08005c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c6c:	f7fe f9ba 	bl	8003fe4 <HAL_RCC_GetPCLK1Freq>
 8005c70:	61b8      	str	r0, [r7, #24]
        break;
 8005c72:	e013      	b.n	8005c9c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c74:	f7fe f9d8 	bl	8004028 <HAL_RCC_GetPCLK2Freq>
 8005c78:	61b8      	str	r0, [r7, #24]
        break;
 8005c7a:	e00f      	b.n	8005c9c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c7c:	4b1b      	ldr	r3, [pc, #108]	; (8005cec <UART_SetConfig+0x3a8>)
 8005c7e:	61bb      	str	r3, [r7, #24]
        break;
 8005c80:	e00c      	b.n	8005c9c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c82:	f7fe f939 	bl	8003ef8 <HAL_RCC_GetSysClockFreq>
 8005c86:	61b8      	str	r0, [r7, #24]
        break;
 8005c88:	e008      	b.n	8005c9c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c8e:	61bb      	str	r3, [r7, #24]
        break;
 8005c90:	e004      	b.n	8005c9c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	77bb      	strb	r3, [r7, #30]
        break;
 8005c9a:	bf00      	nop
    }

    if (pclk != 0U)
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d018      	beq.n	8005cd4 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	085a      	lsrs	r2, r3, #1
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	441a      	add	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	2b0f      	cmp	r3, #15
 8005cbc:	d908      	bls.n	8005cd0 <UART_SetConfig+0x38c>
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc4:	d204      	bcs.n	8005cd0 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	60da      	str	r2, [r3, #12]
 8005cce:	e001      	b.n	8005cd4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ce0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3720      	adds	r7, #32
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	007a1200 	.word	0x007a1200

08005cf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00a      	beq.n	8005d5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	f003 0308 	and.w	r3, r3, #8
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	f003 0310 	and.w	r3, r3, #16
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00a      	beq.n	8005dc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d01a      	beq.n	8005e06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dee:	d10a      	bne.n	8005e06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	605a      	str	r2, [r3, #4]
  }
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e44:	f7fa ff3e 	bl	8000cc4 <HAL_GetTick>
 8005e48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d10e      	bne.n	8005e76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f82d 	bl	8005ec6 <UART_WaitOnFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e023      	b.n	8005ebe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d10e      	bne.n	8005ea2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f817 	bl	8005ec6 <UART_WaitOnFlagUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e00d      	b.n	8005ebe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b09c      	sub	sp, #112	; 0x70
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	603b      	str	r3, [r7, #0]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed6:	e0a5      	b.n	8006024 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ede:	f000 80a1 	beq.w	8006024 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee2:	f7fa feef 	bl	8000cc4 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d302      	bcc.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d13e      	bne.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f00:	e853 3f00 	ldrex	r3, [r3]
 8005f04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f0c:	667b      	str	r3, [r7, #100]	; 0x64
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f18:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f1e:	e841 2300 	strex	r3, r2, [r1]
 8005f22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1e6      	bne.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3308      	adds	r3, #8
 8005f30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	f023 0301 	bic.w	r3, r3, #1
 8005f40:	663b      	str	r3, [r7, #96]	; 0x60
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3308      	adds	r3, #8
 8005f48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1e5      	bne.n	8005f2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2220      	movs	r2, #32
 8005f62:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2220      	movs	r2, #32
 8005f68:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e067      	b.n	8006046 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d04f      	beq.n	8006024 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f92:	d147      	bne.n	8006024 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8005fbe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e6      	bne.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	e853 3f00 	ldrex	r3, [r3]
 8005fde:	613b      	str	r3, [r7, #16]
   return(result);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f023 0301 	bic.w	r3, r3, #1
 8005fe6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3308      	adds	r3, #8
 8005fee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ff0:	623a      	str	r2, [r7, #32]
 8005ff2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff4:	69f9      	ldr	r1, [r7, #28]
 8005ff6:	6a3a      	ldr	r2, [r7, #32]
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e5      	bne.n	8005fd0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2220      	movs	r2, #32
 8006008:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2220      	movs	r2, #32
 800600e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2220      	movs	r2, #32
 8006014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e010      	b.n	8006046 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	69da      	ldr	r2, [r3, #28]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	4013      	ands	r3, r2
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	429a      	cmp	r2, r3
 8006032:	bf0c      	ite	eq
 8006034:	2301      	moveq	r3, #1
 8006036:	2300      	movne	r3, #0
 8006038:	b2db      	uxtb	r3, r3
 800603a:	461a      	mov	r2, r3
 800603c:	79fb      	ldrb	r3, [r7, #7]
 800603e:	429a      	cmp	r2, r3
 8006040:	f43f af4a 	beq.w	8005ed8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3770      	adds	r7, #112	; 0x70
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800604e:	b480      	push	{r7}
 8006050:	b095      	sub	sp, #84	; 0x54
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605e:	e853 3f00 	ldrex	r3, [r3]
 8006062:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006066:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800606a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	461a      	mov	r2, r3
 8006072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006074:	643b      	str	r3, [r7, #64]	; 0x40
 8006076:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006078:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800607a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800607c:	e841 2300 	strex	r3, r2, [r1]
 8006080:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1e6      	bne.n	8006056 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3308      	adds	r3, #8
 800608e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	e853 3f00 	ldrex	r3, [r3]
 8006096:	61fb      	str	r3, [r7, #28]
   return(result);
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	f023 0301 	bic.w	r3, r3, #1
 800609e:	64bb      	str	r3, [r7, #72]	; 0x48
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3308      	adds	r3, #8
 80060a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060b0:	e841 2300 	strex	r3, r2, [r1]
 80060b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1e5      	bne.n	8006088 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d118      	bne.n	80060f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f023 0310 	bic.w	r3, r3, #16
 80060d8:	647b      	str	r3, [r7, #68]	; 0x44
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060e2:	61bb      	str	r3, [r7, #24]
 80060e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	6979      	ldr	r1, [r7, #20]
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	613b      	str	r3, [r7, #16]
   return(result);
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e6      	bne.n	80060c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2220      	movs	r2, #32
 80060fa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006108:	bf00      	nop
 800610a:	3754      	adds	r7, #84	; 0x54
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7ff fbf0 	bl	8005918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006138:	bf00      	nop
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	60bb      	str	r3, [r7, #8]
   return(result);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800615c:	61fb      	str	r3, [r7, #28]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	61bb      	str	r3, [r7, #24]
 8006168:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616a:	6979      	ldr	r1, [r7, #20]
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	e841 2300 	strex	r3, r2, [r1]
 8006172:	613b      	str	r3, [r7, #16]
   return(result);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1e6      	bne.n	8006148 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2220      	movs	r2, #32
 800617e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff fbbc 	bl	8005904 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800618c:	bf00      	nop
 800618e:	3720      	adds	r7, #32
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <__libc_init_array>:
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	4d0d      	ldr	r5, [pc, #52]	; (80061e0 <__libc_init_array+0x38>)
 80061ac:	4c0d      	ldr	r4, [pc, #52]	; (80061e4 <__libc_init_array+0x3c>)
 80061ae:	1b64      	subs	r4, r4, r5
 80061b0:	10a4      	asrs	r4, r4, #2
 80061b2:	2600      	movs	r6, #0
 80061b4:	42a6      	cmp	r6, r4
 80061b6:	d109      	bne.n	80061cc <__libc_init_array+0x24>
 80061b8:	4d0b      	ldr	r5, [pc, #44]	; (80061e8 <__libc_init_array+0x40>)
 80061ba:	4c0c      	ldr	r4, [pc, #48]	; (80061ec <__libc_init_array+0x44>)
 80061bc:	f000 f820 	bl	8006200 <_init>
 80061c0:	1b64      	subs	r4, r4, r5
 80061c2:	10a4      	asrs	r4, r4, #2
 80061c4:	2600      	movs	r6, #0
 80061c6:	42a6      	cmp	r6, r4
 80061c8:	d105      	bne.n	80061d6 <__libc_init_array+0x2e>
 80061ca:	bd70      	pop	{r4, r5, r6, pc}
 80061cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80061d0:	4798      	blx	r3
 80061d2:	3601      	adds	r6, #1
 80061d4:	e7ee      	b.n	80061b4 <__libc_init_array+0xc>
 80061d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061da:	4798      	blx	r3
 80061dc:	3601      	adds	r6, #1
 80061de:	e7f2      	b.n	80061c6 <__libc_init_array+0x1e>
 80061e0:	08006250 	.word	0x08006250
 80061e4:	08006250 	.word	0x08006250
 80061e8:	08006250 	.word	0x08006250
 80061ec:	08006254 	.word	0x08006254

080061f0 <memset>:
 80061f0:	4402      	add	r2, r0
 80061f2:	4603      	mov	r3, r0
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d100      	bne.n	80061fa <memset+0xa>
 80061f8:	4770      	bx	lr
 80061fa:	f803 1b01 	strb.w	r1, [r3], #1
 80061fe:	e7f9      	b.n	80061f4 <memset+0x4>

08006200 <_init>:
 8006200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006202:	bf00      	nop
 8006204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006206:	bc08      	pop	{r3}
 8006208:	469e      	mov	lr, r3
 800620a:	4770      	bx	lr

0800620c <_fini>:
 800620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620e:	bf00      	nop
 8006210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006212:	bc08      	pop	{r3}
 8006214:	469e      	mov	lr, r3
 8006216:	4770      	bx	lr
